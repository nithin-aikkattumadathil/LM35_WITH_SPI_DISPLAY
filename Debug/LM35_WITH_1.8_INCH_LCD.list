
LM35_WITH_1.8_INCH_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001464  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df4  08005df4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dfc  08005dfc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000078  08005e7c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08005e7c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008701  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001976  00000000  00000000  000287a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d1d  00000000  00000000  0002b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a360  00000000  00000000  0003ee25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007824b  00000000  00000000  00049185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c13d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  000c1420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004978 	.word	0x08004978

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004978 	.word	0x08004978

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f852 	bl	800030c <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_d2uiz>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2200      	movs	r2, #0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <__aeabi_d2uiz+0x38>)
 80002d6:	0004      	movs	r4, r0
 80002d8:	000d      	movs	r5, r1
 80002da:	f000 ff71 	bl	80011c0 <__aeabi_dcmpge>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d104      	bne.n	80002ec <__aeabi_d2uiz+0x1c>
 80002e2:	0020      	movs	r0, r4
 80002e4:	0029      	movs	r1, r5
 80002e6:	f000 fedb 	bl	80010a0 <__aeabi_d2iz>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <__aeabi_d2uiz+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	0020      	movs	r0, r4
 80002f2:	0029      	movs	r1, r5
 80002f4:	f000 fb42 	bl	800097c <__aeabi_dsub>
 80002f8:	f000 fed2 	bl	80010a0 <__aeabi_d2iz>
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	469c      	mov	ip, r3
 8000302:	4460      	add	r0, ip
 8000304:	e7f1      	b.n	80002ea <__aeabi_d2uiz+0x1a>
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	41e00000 	.word	0x41e00000

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	4657      	mov	r7, sl
 8000310:	464e      	mov	r6, r9
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	b5e0      	push	{r5, r6, r7, lr}
 8000318:	0004      	movs	r4, r0
 800031a:	000d      	movs	r5, r1
 800031c:	4692      	mov	sl, r2
 800031e:	4699      	mov	r9, r3
 8000320:	b083      	sub	sp, #12
 8000322:	428b      	cmp	r3, r1
 8000324:	d830      	bhi.n	8000388 <__udivmoddi4+0x7c>
 8000326:	d02d      	beq.n	8000384 <__udivmoddi4+0x78>
 8000328:	4649      	mov	r1, r9
 800032a:	4650      	mov	r0, sl
 800032c:	f000 ff70 	bl	8001210 <__clzdi2>
 8000330:	0029      	movs	r1, r5
 8000332:	0006      	movs	r6, r0
 8000334:	0020      	movs	r0, r4
 8000336:	f000 ff6b 	bl	8001210 <__clzdi2>
 800033a:	1a33      	subs	r3, r6, r0
 800033c:	4698      	mov	r8, r3
 800033e:	3b20      	subs	r3, #32
 8000340:	469b      	mov	fp, r3
 8000342:	d433      	bmi.n	80003ac <__udivmoddi4+0xa0>
 8000344:	465a      	mov	r2, fp
 8000346:	4653      	mov	r3, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	4642      	mov	r2, r8
 800034c:	001f      	movs	r7, r3
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d83a      	bhi.n	80003ce <__udivmoddi4+0xc2>
 8000358:	42af      	cmp	r7, r5
 800035a:	d100      	bne.n	800035e <__udivmoddi4+0x52>
 800035c:	e078      	b.n	8000450 <__udivmoddi4+0x144>
 800035e:	465b      	mov	r3, fp
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	41bd      	sbcs	r5, r7
 8000364:	2b00      	cmp	r3, #0
 8000366:	da00      	bge.n	800036a <__udivmoddi4+0x5e>
 8000368:	e075      	b.n	8000456 <__udivmoddi4+0x14a>
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	465a      	mov	r2, fp
 8000376:	4093      	lsls	r3, r2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	4642      	mov	r2, r8
 800037e:	4093      	lsls	r3, r2
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	e028      	b.n	80003d6 <__udivmoddi4+0xca>
 8000384:	4282      	cmp	r2, r0
 8000386:	d9cf      	bls.n	8000328 <__udivmoddi4+0x1c>
 8000388:	2200      	movs	r2, #0
 800038a:	2300      	movs	r3, #0
 800038c:	9200      	str	r2, [sp, #0]
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <__udivmoddi4+0x8e>
 8000396:	601c      	str	r4, [r3, #0]
 8000398:	605d      	str	r5, [r3, #4]
 800039a:	9800      	ldr	r0, [sp, #0]
 800039c:	9901      	ldr	r1, [sp, #4]
 800039e:	b003      	add	sp, #12
 80003a0:	bcf0      	pop	{r4, r5, r6, r7}
 80003a2:	46bb      	mov	fp, r7
 80003a4:	46b2      	mov	sl, r6
 80003a6:	46a9      	mov	r9, r5
 80003a8:	46a0      	mov	r8, r4
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	4642      	mov	r2, r8
 80003c2:	431f      	orrs	r7, r3
 80003c4:	4653      	mov	r3, sl
 80003c6:	4093      	lsls	r3, r2
 80003c8:	001e      	movs	r6, r3
 80003ca:	42af      	cmp	r7, r5
 80003cc:	d9c4      	bls.n	8000358 <__udivmoddi4+0x4c>
 80003ce:	2200      	movs	r2, #0
 80003d0:	2300      	movs	r3, #0
 80003d2:	9200      	str	r2, [sp, #0]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	4643      	mov	r3, r8
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0d9      	beq.n	8000390 <__udivmoddi4+0x84>
 80003dc:	07fb      	lsls	r3, r7, #31
 80003de:	0872      	lsrs	r2, r6, #1
 80003e0:	431a      	orrs	r2, r3
 80003e2:	4646      	mov	r6, r8
 80003e4:	087b      	lsrs	r3, r7, #1
 80003e6:	e00e      	b.n	8000406 <__udivmoddi4+0xfa>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d101      	bne.n	80003f0 <__udivmoddi4+0xe4>
 80003ec:	42a2      	cmp	r2, r4
 80003ee:	d80c      	bhi.n	800040a <__udivmoddi4+0xfe>
 80003f0:	1aa4      	subs	r4, r4, r2
 80003f2:	419d      	sbcs	r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	1924      	adds	r4, r4, r4
 80003f8:	416d      	adcs	r5, r5
 80003fa:	2100      	movs	r1, #0
 80003fc:	3e01      	subs	r6, #1
 80003fe:	1824      	adds	r4, r4, r0
 8000400:	414d      	adcs	r5, r1
 8000402:	2e00      	cmp	r6, #0
 8000404:	d006      	beq.n	8000414 <__udivmoddi4+0x108>
 8000406:	42ab      	cmp	r3, r5
 8000408:	d9ee      	bls.n	80003e8 <__udivmoddi4+0xdc>
 800040a:	3e01      	subs	r6, #1
 800040c:	1924      	adds	r4, r4, r4
 800040e:	416d      	adcs	r5, r5
 8000410:	2e00      	cmp	r6, #0
 8000412:	d1f8      	bne.n	8000406 <__udivmoddi4+0xfa>
 8000414:	9800      	ldr	r0, [sp, #0]
 8000416:	9901      	ldr	r1, [sp, #4]
 8000418:	465b      	mov	r3, fp
 800041a:	1900      	adds	r0, r0, r4
 800041c:	4169      	adcs	r1, r5
 800041e:	2b00      	cmp	r3, #0
 8000420:	db24      	blt.n	800046c <__udivmoddi4+0x160>
 8000422:	002b      	movs	r3, r5
 8000424:	465a      	mov	r2, fp
 8000426:	4644      	mov	r4, r8
 8000428:	40d3      	lsrs	r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	40e2      	lsrs	r2, r4
 800042e:	001c      	movs	r4, r3
 8000430:	465b      	mov	r3, fp
 8000432:	0015      	movs	r5, r2
 8000434:	2b00      	cmp	r3, #0
 8000436:	db2a      	blt.n	800048e <__udivmoddi4+0x182>
 8000438:	0026      	movs	r6, r4
 800043a:	409e      	lsls	r6, r3
 800043c:	0033      	movs	r3, r6
 800043e:	0026      	movs	r6, r4
 8000440:	4647      	mov	r7, r8
 8000442:	40be      	lsls	r6, r7
 8000444:	0032      	movs	r2, r6
 8000446:	1a80      	subs	r0, r0, r2
 8000448:	4199      	sbcs	r1, r3
 800044a:	9000      	str	r0, [sp, #0]
 800044c:	9101      	str	r1, [sp, #4]
 800044e:	e79f      	b.n	8000390 <__udivmoddi4+0x84>
 8000450:	42a3      	cmp	r3, r4
 8000452:	d8bc      	bhi.n	80003ce <__udivmoddi4+0xc2>
 8000454:	e783      	b.n	800035e <__udivmoddi4+0x52>
 8000456:	4642      	mov	r2, r8
 8000458:	2320      	movs	r3, #32
 800045a:	2100      	movs	r1, #0
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	2200      	movs	r2, #0
 8000460:	9100      	str	r1, [sp, #0]
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	2201      	movs	r2, #1
 8000466:	40da      	lsrs	r2, r3
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	e786      	b.n	800037a <__udivmoddi4+0x6e>
 800046c:	4642      	mov	r2, r8
 800046e:	2320      	movs	r3, #32
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	002a      	movs	r2, r5
 8000474:	4646      	mov	r6, r8
 8000476:	409a      	lsls	r2, r3
 8000478:	0023      	movs	r3, r4
 800047a:	40f3      	lsrs	r3, r6
 800047c:	4644      	mov	r4, r8
 800047e:	4313      	orrs	r3, r2
 8000480:	002a      	movs	r2, r5
 8000482:	40e2      	lsrs	r2, r4
 8000484:	001c      	movs	r4, r3
 8000486:	465b      	mov	r3, fp
 8000488:	0015      	movs	r5, r2
 800048a:	2b00      	cmp	r3, #0
 800048c:	dad4      	bge.n	8000438 <__udivmoddi4+0x12c>
 800048e:	4642      	mov	r2, r8
 8000490:	002f      	movs	r7, r5
 8000492:	2320      	movs	r3, #32
 8000494:	0026      	movs	r6, r4
 8000496:	4097      	lsls	r7, r2
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	40de      	lsrs	r6, r3
 800049c:	003b      	movs	r3, r7
 800049e:	4333      	orrs	r3, r6
 80004a0:	e7cd      	b.n	800043e <__udivmoddi4+0x132>
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dmul>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	4698      	mov	r8, r3
 80004b2:	030c      	lsls	r4, r1, #12
 80004b4:	004b      	lsls	r3, r1, #1
 80004b6:	0006      	movs	r6, r0
 80004b8:	4692      	mov	sl, r2
 80004ba:	b087      	sub	sp, #28
 80004bc:	0b24      	lsrs	r4, r4, #12
 80004be:	0d5b      	lsrs	r3, r3, #21
 80004c0:	0fcf      	lsrs	r7, r1, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dmul+0x24>
 80004c6:	e15c      	b.n	8000782 <__aeabi_dmul+0x2de>
 80004c8:	4ad9      	ldr	r2, [pc, #868]	; (8000830 <__aeabi_dmul+0x38c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d100      	bne.n	80004d0 <__aeabi_dmul+0x2c>
 80004ce:	e175      	b.n	80007bc <__aeabi_dmul+0x318>
 80004d0:	0f42      	lsrs	r2, r0, #29
 80004d2:	00e4      	lsls	r4, r4, #3
 80004d4:	4314      	orrs	r4, r2
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	0412      	lsls	r2, r2, #16
 80004da:	4314      	orrs	r4, r2
 80004dc:	4ad5      	ldr	r2, [pc, #852]	; (8000834 <__aeabi_dmul+0x390>)
 80004de:	00c5      	lsls	r5, r0, #3
 80004e0:	4694      	mov	ip, r2
 80004e2:	4463      	add	r3, ip
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2300      	movs	r3, #0
 80004e8:	4699      	mov	r9, r3
 80004ea:	469b      	mov	fp, r3
 80004ec:	4643      	mov	r3, r8
 80004ee:	4642      	mov	r2, r8
 80004f0:	031e      	lsls	r6, r3, #12
 80004f2:	0fd2      	lsrs	r2, r2, #31
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	4650      	mov	r0, sl
 80004f8:	4690      	mov	r8, r2
 80004fa:	0b36      	lsrs	r6, r6, #12
 80004fc:	0d5b      	lsrs	r3, r3, #21
 80004fe:	d100      	bne.n	8000502 <__aeabi_dmul+0x5e>
 8000500:	e120      	b.n	8000744 <__aeabi_dmul+0x2a0>
 8000502:	4acb      	ldr	r2, [pc, #812]	; (8000830 <__aeabi_dmul+0x38c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x66>
 8000508:	e162      	b.n	80007d0 <__aeabi_dmul+0x32c>
 800050a:	49ca      	ldr	r1, [pc, #808]	; (8000834 <__aeabi_dmul+0x390>)
 800050c:	0f42      	lsrs	r2, r0, #29
 800050e:	468c      	mov	ip, r1
 8000510:	9900      	ldr	r1, [sp, #0]
 8000512:	4463      	add	r3, ip
 8000514:	00f6      	lsls	r6, r6, #3
 8000516:	468c      	mov	ip, r1
 8000518:	4316      	orrs	r6, r2
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	449c      	add	ip, r3
 800051e:	0412      	lsls	r2, r2, #16
 8000520:	4663      	mov	r3, ip
 8000522:	4316      	orrs	r6, r2
 8000524:	00c2      	lsls	r2, r0, #3
 8000526:	2000      	movs	r0, #0
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	9900      	ldr	r1, [sp, #0]
 800052c:	4643      	mov	r3, r8
 800052e:	3101      	adds	r1, #1
 8000530:	468c      	mov	ip, r1
 8000532:	4649      	mov	r1, r9
 8000534:	407b      	eors	r3, r7
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	290f      	cmp	r1, #15
 800053a:	d826      	bhi.n	800058a <__aeabi_dmul+0xe6>
 800053c:	4bbe      	ldr	r3, [pc, #760]	; (8000838 <__aeabi_dmul+0x394>)
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	5859      	ldr	r1, [r3, r1]
 8000542:	468f      	mov	pc, r1
 8000544:	4643      	mov	r3, r8
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	0034      	movs	r4, r6
 800054a:	0015      	movs	r5, r2
 800054c:	4683      	mov	fp, r0
 800054e:	465b      	mov	r3, fp
 8000550:	2b02      	cmp	r3, #2
 8000552:	d016      	beq.n	8000582 <__aeabi_dmul+0xde>
 8000554:	2b03      	cmp	r3, #3
 8000556:	d100      	bne.n	800055a <__aeabi_dmul+0xb6>
 8000558:	e203      	b.n	8000962 <__aeabi_dmul+0x4be>
 800055a:	2b01      	cmp	r3, #1
 800055c:	d000      	beq.n	8000560 <__aeabi_dmul+0xbc>
 800055e:	e0cd      	b.n	80006fc <__aeabi_dmul+0x258>
 8000560:	2200      	movs	r2, #0
 8000562:	2400      	movs	r4, #0
 8000564:	2500      	movs	r5, #0
 8000566:	9b01      	ldr	r3, [sp, #4]
 8000568:	0512      	lsls	r2, r2, #20
 800056a:	4322      	orrs	r2, r4
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	431a      	orrs	r2, r3
 8000570:	0028      	movs	r0, r5
 8000572:	0011      	movs	r1, r2
 8000574:	b007      	add	sp, #28
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	46bb      	mov	fp, r7
 800057a:	46b2      	mov	sl, r6
 800057c:	46a9      	mov	r9, r5
 800057e:	46a0      	mov	r8, r4
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	2400      	movs	r4, #0
 8000584:	2500      	movs	r5, #0
 8000586:	4aaa      	ldr	r2, [pc, #680]	; (8000830 <__aeabi_dmul+0x38c>)
 8000588:	e7ed      	b.n	8000566 <__aeabi_dmul+0xc2>
 800058a:	0c28      	lsrs	r0, r5, #16
 800058c:	042d      	lsls	r5, r5, #16
 800058e:	0c2d      	lsrs	r5, r5, #16
 8000590:	002b      	movs	r3, r5
 8000592:	0c11      	lsrs	r1, r2, #16
 8000594:	0412      	lsls	r2, r2, #16
 8000596:	0c12      	lsrs	r2, r2, #16
 8000598:	4353      	muls	r3, r2
 800059a:	4698      	mov	r8, r3
 800059c:	0013      	movs	r3, r2
 800059e:	002f      	movs	r7, r5
 80005a0:	4343      	muls	r3, r0
 80005a2:	4699      	mov	r9, r3
 80005a4:	434f      	muls	r7, r1
 80005a6:	444f      	add	r7, r9
 80005a8:	46bb      	mov	fp, r7
 80005aa:	4647      	mov	r7, r8
 80005ac:	000b      	movs	r3, r1
 80005ae:	0c3f      	lsrs	r7, r7, #16
 80005b0:	46ba      	mov	sl, r7
 80005b2:	4343      	muls	r3, r0
 80005b4:	44da      	add	sl, fp
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	45d1      	cmp	r9, sl
 80005ba:	d904      	bls.n	80005c6 <__aeabi_dmul+0x122>
 80005bc:	2780      	movs	r7, #128	; 0x80
 80005be:	027f      	lsls	r7, r7, #9
 80005c0:	46b9      	mov	r9, r7
 80005c2:	444b      	add	r3, r9
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	4653      	mov	r3, sl
 80005c8:	0c1b      	lsrs	r3, r3, #16
 80005ca:	469b      	mov	fp, r3
 80005cc:	4653      	mov	r3, sl
 80005ce:	041f      	lsls	r7, r3, #16
 80005d0:	4643      	mov	r3, r8
 80005d2:	041b      	lsls	r3, r3, #16
 80005d4:	0c1b      	lsrs	r3, r3, #16
 80005d6:	4698      	mov	r8, r3
 80005d8:	003b      	movs	r3, r7
 80005da:	4443      	add	r3, r8
 80005dc:	9304      	str	r3, [sp, #16]
 80005de:	0c33      	lsrs	r3, r6, #16
 80005e0:	0436      	lsls	r6, r6, #16
 80005e2:	0c36      	lsrs	r6, r6, #16
 80005e4:	4698      	mov	r8, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	4343      	muls	r3, r0
 80005ea:	4699      	mov	r9, r3
 80005ec:	4643      	mov	r3, r8
 80005ee:	4343      	muls	r3, r0
 80005f0:	002f      	movs	r7, r5
 80005f2:	469a      	mov	sl, r3
 80005f4:	4643      	mov	r3, r8
 80005f6:	4377      	muls	r7, r6
 80005f8:	435d      	muls	r5, r3
 80005fa:	0c38      	lsrs	r0, r7, #16
 80005fc:	444d      	add	r5, r9
 80005fe:	1945      	adds	r5, r0, r5
 8000600:	45a9      	cmp	r9, r5
 8000602:	d903      	bls.n	800060c <__aeabi_dmul+0x168>
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	025b      	lsls	r3, r3, #9
 8000608:	4699      	mov	r9, r3
 800060a:	44ca      	add	sl, r9
 800060c:	043f      	lsls	r7, r7, #16
 800060e:	0c28      	lsrs	r0, r5, #16
 8000610:	0c3f      	lsrs	r7, r7, #16
 8000612:	042d      	lsls	r5, r5, #16
 8000614:	19ed      	adds	r5, r5, r7
 8000616:	0c27      	lsrs	r7, r4, #16
 8000618:	0424      	lsls	r4, r4, #16
 800061a:	0c24      	lsrs	r4, r4, #16
 800061c:	0003      	movs	r3, r0
 800061e:	0020      	movs	r0, r4
 8000620:	4350      	muls	r0, r2
 8000622:	437a      	muls	r2, r7
 8000624:	4691      	mov	r9, r2
 8000626:	003a      	movs	r2, r7
 8000628:	4453      	add	r3, sl
 800062a:	9305      	str	r3, [sp, #20]
 800062c:	0c03      	lsrs	r3, r0, #16
 800062e:	469a      	mov	sl, r3
 8000630:	434a      	muls	r2, r1
 8000632:	4361      	muls	r1, r4
 8000634:	4449      	add	r1, r9
 8000636:	4451      	add	r1, sl
 8000638:	44ab      	add	fp, r5
 800063a:	4589      	cmp	r9, r1
 800063c:	d903      	bls.n	8000646 <__aeabi_dmul+0x1a2>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	025b      	lsls	r3, r3, #9
 8000642:	4699      	mov	r9, r3
 8000644:	444a      	add	r2, r9
 8000646:	0400      	lsls	r0, r0, #16
 8000648:	0c0b      	lsrs	r3, r1, #16
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	0409      	lsls	r1, r1, #16
 800064e:	1809      	adds	r1, r1, r0
 8000650:	0020      	movs	r0, r4
 8000652:	4699      	mov	r9, r3
 8000654:	4643      	mov	r3, r8
 8000656:	4370      	muls	r0, r6
 8000658:	435c      	muls	r4, r3
 800065a:	437e      	muls	r6, r7
 800065c:	435f      	muls	r7, r3
 800065e:	0c03      	lsrs	r3, r0, #16
 8000660:	4698      	mov	r8, r3
 8000662:	19a4      	adds	r4, r4, r6
 8000664:	4444      	add	r4, r8
 8000666:	444a      	add	r2, r9
 8000668:	9703      	str	r7, [sp, #12]
 800066a:	42a6      	cmp	r6, r4
 800066c:	d904      	bls.n	8000678 <__aeabi_dmul+0x1d4>
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	4698      	mov	r8, r3
 8000674:	4447      	add	r7, r8
 8000676:	9703      	str	r7, [sp, #12]
 8000678:	0423      	lsls	r3, r4, #16
 800067a:	9e02      	ldr	r6, [sp, #8]
 800067c:	469a      	mov	sl, r3
 800067e:	9b05      	ldr	r3, [sp, #20]
 8000680:	445e      	add	r6, fp
 8000682:	4698      	mov	r8, r3
 8000684:	42ae      	cmp	r6, r5
 8000686:	41ad      	sbcs	r5, r5
 8000688:	1876      	adds	r6, r6, r1
 800068a:	428e      	cmp	r6, r1
 800068c:	4189      	sbcs	r1, r1
 800068e:	0400      	lsls	r0, r0, #16
 8000690:	0c00      	lsrs	r0, r0, #16
 8000692:	4450      	add	r0, sl
 8000694:	4440      	add	r0, r8
 8000696:	426d      	negs	r5, r5
 8000698:	1947      	adds	r7, r0, r5
 800069a:	46b8      	mov	r8, r7
 800069c:	4693      	mov	fp, r2
 800069e:	4249      	negs	r1, r1
 80006a0:	4689      	mov	r9, r1
 80006a2:	44c3      	add	fp, r8
 80006a4:	44d9      	add	r9, fp
 80006a6:	4298      	cmp	r0, r3
 80006a8:	4180      	sbcs	r0, r0
 80006aa:	45a8      	cmp	r8, r5
 80006ac:	41ad      	sbcs	r5, r5
 80006ae:	4593      	cmp	fp, r2
 80006b0:	4192      	sbcs	r2, r2
 80006b2:	4589      	cmp	r9, r1
 80006b4:	4189      	sbcs	r1, r1
 80006b6:	426d      	negs	r5, r5
 80006b8:	4240      	negs	r0, r0
 80006ba:	4328      	orrs	r0, r5
 80006bc:	0c24      	lsrs	r4, r4, #16
 80006be:	4252      	negs	r2, r2
 80006c0:	4249      	negs	r1, r1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	9b03      	ldr	r3, [sp, #12]
 80006c6:	1900      	adds	r0, r0, r4
 80006c8:	1880      	adds	r0, r0, r2
 80006ca:	18c7      	adds	r7, r0, r3
 80006cc:	464b      	mov	r3, r9
 80006ce:	0ddc      	lsrs	r4, r3, #23
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	0275      	lsls	r5, r6, #9
 80006d4:	431d      	orrs	r5, r3
 80006d6:	1e6a      	subs	r2, r5, #1
 80006d8:	4195      	sbcs	r5, r2
 80006da:	464b      	mov	r3, r9
 80006dc:	0df6      	lsrs	r6, r6, #23
 80006de:	027f      	lsls	r7, r7, #9
 80006e0:	4335      	orrs	r5, r6
 80006e2:	025a      	lsls	r2, r3, #9
 80006e4:	433c      	orrs	r4, r7
 80006e6:	4315      	orrs	r5, r2
 80006e8:	01fb      	lsls	r3, r7, #7
 80006ea:	d400      	bmi.n	80006ee <__aeabi_dmul+0x24a>
 80006ec:	e11c      	b.n	8000928 <__aeabi_dmul+0x484>
 80006ee:	2101      	movs	r1, #1
 80006f0:	086a      	lsrs	r2, r5, #1
 80006f2:	400d      	ands	r5, r1
 80006f4:	4315      	orrs	r5, r2
 80006f6:	07e2      	lsls	r2, r4, #31
 80006f8:	4315      	orrs	r5, r2
 80006fa:	0864      	lsrs	r4, r4, #1
 80006fc:	494f      	ldr	r1, [pc, #316]	; (800083c <__aeabi_dmul+0x398>)
 80006fe:	4461      	add	r1, ip
 8000700:	2900      	cmp	r1, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dmul+0x262>
 8000704:	e0b0      	b.n	8000868 <__aeabi_dmul+0x3c4>
 8000706:	076b      	lsls	r3, r5, #29
 8000708:	d009      	beq.n	800071e <__aeabi_dmul+0x27a>
 800070a:	220f      	movs	r2, #15
 800070c:	402a      	ands	r2, r5
 800070e:	2a04      	cmp	r2, #4
 8000710:	d005      	beq.n	800071e <__aeabi_dmul+0x27a>
 8000712:	1d2a      	adds	r2, r5, #4
 8000714:	42aa      	cmp	r2, r5
 8000716:	41ad      	sbcs	r5, r5
 8000718:	426d      	negs	r5, r5
 800071a:	1964      	adds	r4, r4, r5
 800071c:	0015      	movs	r5, r2
 800071e:	01e3      	lsls	r3, r4, #7
 8000720:	d504      	bpl.n	800072c <__aeabi_dmul+0x288>
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4a46      	ldr	r2, [pc, #280]	; (8000840 <__aeabi_dmul+0x39c>)
 8000726:	00c9      	lsls	r1, r1, #3
 8000728:	4014      	ands	r4, r2
 800072a:	4461      	add	r1, ip
 800072c:	4a45      	ldr	r2, [pc, #276]	; (8000844 <__aeabi_dmul+0x3a0>)
 800072e:	4291      	cmp	r1, r2
 8000730:	dd00      	ble.n	8000734 <__aeabi_dmul+0x290>
 8000732:	e726      	b.n	8000582 <__aeabi_dmul+0xde>
 8000734:	0762      	lsls	r2, r4, #29
 8000736:	08ed      	lsrs	r5, r5, #3
 8000738:	0264      	lsls	r4, r4, #9
 800073a:	0549      	lsls	r1, r1, #21
 800073c:	4315      	orrs	r5, r2
 800073e:	0b24      	lsrs	r4, r4, #12
 8000740:	0d4a      	lsrs	r2, r1, #21
 8000742:	e710      	b.n	8000566 <__aeabi_dmul+0xc2>
 8000744:	4652      	mov	r2, sl
 8000746:	4332      	orrs	r2, r6
 8000748:	d100      	bne.n	800074c <__aeabi_dmul+0x2a8>
 800074a:	e07f      	b.n	800084c <__aeabi_dmul+0x3a8>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_dmul+0x2ae>
 8000750:	e0dc      	b.n	800090c <__aeabi_dmul+0x468>
 8000752:	0030      	movs	r0, r6
 8000754:	f000 fd3e 	bl	80011d4 <__clzsi2>
 8000758:	0002      	movs	r2, r0
 800075a:	3a0b      	subs	r2, #11
 800075c:	231d      	movs	r3, #29
 800075e:	0001      	movs	r1, r0
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	4652      	mov	r2, sl
 8000764:	3908      	subs	r1, #8
 8000766:	40da      	lsrs	r2, r3
 8000768:	408e      	lsls	r6, r1
 800076a:	4316      	orrs	r6, r2
 800076c:	4652      	mov	r2, sl
 800076e:	408a      	lsls	r2, r1
 8000770:	9b00      	ldr	r3, [sp, #0]
 8000772:	4935      	ldr	r1, [pc, #212]	; (8000848 <__aeabi_dmul+0x3a4>)
 8000774:	1a18      	subs	r0, r3, r0
 8000776:	0003      	movs	r3, r0
 8000778:	468c      	mov	ip, r1
 800077a:	4463      	add	r3, ip
 800077c:	2000      	movs	r0, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	e6d3      	b.n	800052a <__aeabi_dmul+0x86>
 8000782:	0025      	movs	r5, r4
 8000784:	4305      	orrs	r5, r0
 8000786:	d04a      	beq.n	800081e <__aeabi_dmul+0x37a>
 8000788:	2c00      	cmp	r4, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dmul+0x2ea>
 800078c:	e0b0      	b.n	80008f0 <__aeabi_dmul+0x44c>
 800078e:	0020      	movs	r0, r4
 8000790:	f000 fd20 	bl	80011d4 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	0002      	movs	r2, r0
 8000798:	390b      	subs	r1, #11
 800079a:	231d      	movs	r3, #29
 800079c:	0010      	movs	r0, r2
 800079e:	1a5b      	subs	r3, r3, r1
 80007a0:	0031      	movs	r1, r6
 80007a2:	0035      	movs	r5, r6
 80007a4:	3808      	subs	r0, #8
 80007a6:	4084      	lsls	r4, r0
 80007a8:	40d9      	lsrs	r1, r3
 80007aa:	4085      	lsls	r5, r0
 80007ac:	430c      	orrs	r4, r1
 80007ae:	4826      	ldr	r0, [pc, #152]	; (8000848 <__aeabi_dmul+0x3a4>)
 80007b0:	1a83      	subs	r3, r0, r2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	4699      	mov	r9, r3
 80007b8:	469b      	mov	fp, r3
 80007ba:	e697      	b.n	80004ec <__aeabi_dmul+0x48>
 80007bc:	0005      	movs	r5, r0
 80007be:	4325      	orrs	r5, r4
 80007c0:	d126      	bne.n	8000810 <__aeabi_dmul+0x36c>
 80007c2:	2208      	movs	r2, #8
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2302      	movs	r3, #2
 80007c8:	2400      	movs	r4, #0
 80007ca:	4691      	mov	r9, r2
 80007cc:	469b      	mov	fp, r3
 80007ce:	e68d      	b.n	80004ec <__aeabi_dmul+0x48>
 80007d0:	4652      	mov	r2, sl
 80007d2:	9b00      	ldr	r3, [sp, #0]
 80007d4:	4332      	orrs	r2, r6
 80007d6:	d110      	bne.n	80007fa <__aeabi_dmul+0x356>
 80007d8:	4915      	ldr	r1, [pc, #84]	; (8000830 <__aeabi_dmul+0x38c>)
 80007da:	2600      	movs	r6, #0
 80007dc:	468c      	mov	ip, r1
 80007de:	4463      	add	r3, ip
 80007e0:	4649      	mov	r1, r9
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	4319      	orrs	r1, r3
 80007e8:	4689      	mov	r9, r1
 80007ea:	2002      	movs	r0, #2
 80007ec:	e69d      	b.n	800052a <__aeabi_dmul+0x86>
 80007ee:	465b      	mov	r3, fp
 80007f0:	9701      	str	r7, [sp, #4]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dmul+0x354>
 80007f6:	e6ad      	b.n	8000554 <__aeabi_dmul+0xb0>
 80007f8:	e6c3      	b.n	8000582 <__aeabi_dmul+0xde>
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <__aeabi_dmul+0x38c>)
 80007fc:	2003      	movs	r0, #3
 80007fe:	4694      	mov	ip, r2
 8000800:	4463      	add	r3, ip
 8000802:	464a      	mov	r2, r9
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2303      	movs	r3, #3
 8000808:	431a      	orrs	r2, r3
 800080a:	4691      	mov	r9, r2
 800080c:	4652      	mov	r2, sl
 800080e:	e68c      	b.n	800052a <__aeabi_dmul+0x86>
 8000810:	220c      	movs	r2, #12
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2303      	movs	r3, #3
 8000816:	0005      	movs	r5, r0
 8000818:	4691      	mov	r9, r2
 800081a:	469b      	mov	fp, r3
 800081c:	e666      	b.n	80004ec <__aeabi_dmul+0x48>
 800081e:	2304      	movs	r3, #4
 8000820:	4699      	mov	r9, r3
 8000822:	2300      	movs	r3, #0
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	2400      	movs	r4, #0
 800082a:	469b      	mov	fp, r3
 800082c:	e65e      	b.n	80004ec <__aeabi_dmul+0x48>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	fffffc01 	.word	0xfffffc01
 8000838:	080049a8 	.word	0x080049a8
 800083c:	000003ff 	.word	0x000003ff
 8000840:	feffffff 	.word	0xfeffffff
 8000844:	000007fe 	.word	0x000007fe
 8000848:	fffffc0d 	.word	0xfffffc0d
 800084c:	4649      	mov	r1, r9
 800084e:	2301      	movs	r3, #1
 8000850:	4319      	orrs	r1, r3
 8000852:	4689      	mov	r9, r1
 8000854:	2600      	movs	r6, #0
 8000856:	2001      	movs	r0, #1
 8000858:	e667      	b.n	800052a <__aeabi_dmul+0x86>
 800085a:	2300      	movs	r3, #0
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	2500      	movs	r5, #0
 8000860:	4a43      	ldr	r2, [pc, #268]	; (8000970 <__aeabi_dmul+0x4cc>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	0324      	lsls	r4, r4, #12
 8000866:	e67e      	b.n	8000566 <__aeabi_dmul+0xc2>
 8000868:	2001      	movs	r0, #1
 800086a:	1a40      	subs	r0, r0, r1
 800086c:	2838      	cmp	r0, #56	; 0x38
 800086e:	dd00      	ble.n	8000872 <__aeabi_dmul+0x3ce>
 8000870:	e676      	b.n	8000560 <__aeabi_dmul+0xbc>
 8000872:	281f      	cmp	r0, #31
 8000874:	dd5b      	ble.n	800092e <__aeabi_dmul+0x48a>
 8000876:	221f      	movs	r2, #31
 8000878:	0023      	movs	r3, r4
 800087a:	4252      	negs	r2, r2
 800087c:	1a51      	subs	r1, r2, r1
 800087e:	40cb      	lsrs	r3, r1
 8000880:	0019      	movs	r1, r3
 8000882:	2820      	cmp	r0, #32
 8000884:	d003      	beq.n	800088e <__aeabi_dmul+0x3ea>
 8000886:	4a3b      	ldr	r2, [pc, #236]	; (8000974 <__aeabi_dmul+0x4d0>)
 8000888:	4462      	add	r2, ip
 800088a:	4094      	lsls	r4, r2
 800088c:	4325      	orrs	r5, r4
 800088e:	1e6a      	subs	r2, r5, #1
 8000890:	4195      	sbcs	r5, r2
 8000892:	002a      	movs	r2, r5
 8000894:	430a      	orrs	r2, r1
 8000896:	2107      	movs	r1, #7
 8000898:	000d      	movs	r5, r1
 800089a:	2400      	movs	r4, #0
 800089c:	4015      	ands	r5, r2
 800089e:	4211      	tst	r1, r2
 80008a0:	d05b      	beq.n	800095a <__aeabi_dmul+0x4b6>
 80008a2:	210f      	movs	r1, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	4011      	ands	r1, r2
 80008a8:	2904      	cmp	r1, #4
 80008aa:	d053      	beq.n	8000954 <__aeabi_dmul+0x4b0>
 80008ac:	1d11      	adds	r1, r2, #4
 80008ae:	4291      	cmp	r1, r2
 80008b0:	4192      	sbcs	r2, r2
 80008b2:	4252      	negs	r2, r2
 80008b4:	18a4      	adds	r4, r4, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	0223      	lsls	r3, r4, #8
 80008ba:	d54b      	bpl.n	8000954 <__aeabi_dmul+0x4b0>
 80008bc:	2201      	movs	r2, #1
 80008be:	2400      	movs	r4, #0
 80008c0:	2500      	movs	r5, #0
 80008c2:	e650      	b.n	8000566 <__aeabi_dmul+0xc2>
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	031b      	lsls	r3, r3, #12
 80008c8:	421c      	tst	r4, r3
 80008ca:	d009      	beq.n	80008e0 <__aeabi_dmul+0x43c>
 80008cc:	421e      	tst	r6, r3
 80008ce:	d107      	bne.n	80008e0 <__aeabi_dmul+0x43c>
 80008d0:	4333      	orrs	r3, r6
 80008d2:	031c      	lsls	r4, r3, #12
 80008d4:	4643      	mov	r3, r8
 80008d6:	0015      	movs	r5, r2
 80008d8:	0b24      	lsrs	r4, r4, #12
 80008da:	4a25      	ldr	r2, [pc, #148]	; (8000970 <__aeabi_dmul+0x4cc>)
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	e642      	b.n	8000566 <__aeabi_dmul+0xc2>
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0312      	lsls	r2, r2, #12
 80008e4:	4314      	orrs	r4, r2
 80008e6:	0324      	lsls	r4, r4, #12
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <__aeabi_dmul+0x4cc>)
 80008ea:	0b24      	lsrs	r4, r4, #12
 80008ec:	9701      	str	r7, [sp, #4]
 80008ee:	e63a      	b.n	8000566 <__aeabi_dmul+0xc2>
 80008f0:	f000 fc70 	bl	80011d4 <__clzsi2>
 80008f4:	0001      	movs	r1, r0
 80008f6:	0002      	movs	r2, r0
 80008f8:	3115      	adds	r1, #21
 80008fa:	3220      	adds	r2, #32
 80008fc:	291c      	cmp	r1, #28
 80008fe:	dc00      	bgt.n	8000902 <__aeabi_dmul+0x45e>
 8000900:	e74b      	b.n	800079a <__aeabi_dmul+0x2f6>
 8000902:	0034      	movs	r4, r6
 8000904:	3808      	subs	r0, #8
 8000906:	2500      	movs	r5, #0
 8000908:	4084      	lsls	r4, r0
 800090a:	e750      	b.n	80007ae <__aeabi_dmul+0x30a>
 800090c:	f000 fc62 	bl	80011d4 <__clzsi2>
 8000910:	0003      	movs	r3, r0
 8000912:	001a      	movs	r2, r3
 8000914:	3215      	adds	r2, #21
 8000916:	3020      	adds	r0, #32
 8000918:	2a1c      	cmp	r2, #28
 800091a:	dc00      	bgt.n	800091e <__aeabi_dmul+0x47a>
 800091c:	e71e      	b.n	800075c <__aeabi_dmul+0x2b8>
 800091e:	4656      	mov	r6, sl
 8000920:	3b08      	subs	r3, #8
 8000922:	2200      	movs	r2, #0
 8000924:	409e      	lsls	r6, r3
 8000926:	e723      	b.n	8000770 <__aeabi_dmul+0x2cc>
 8000928:	9b00      	ldr	r3, [sp, #0]
 800092a:	469c      	mov	ip, r3
 800092c:	e6e6      	b.n	80006fc <__aeabi_dmul+0x258>
 800092e:	4912      	ldr	r1, [pc, #72]	; (8000978 <__aeabi_dmul+0x4d4>)
 8000930:	0022      	movs	r2, r4
 8000932:	4461      	add	r1, ip
 8000934:	002e      	movs	r6, r5
 8000936:	408d      	lsls	r5, r1
 8000938:	408a      	lsls	r2, r1
 800093a:	40c6      	lsrs	r6, r0
 800093c:	1e69      	subs	r1, r5, #1
 800093e:	418d      	sbcs	r5, r1
 8000940:	4332      	orrs	r2, r6
 8000942:	432a      	orrs	r2, r5
 8000944:	40c4      	lsrs	r4, r0
 8000946:	0753      	lsls	r3, r2, #29
 8000948:	d0b6      	beq.n	80008b8 <__aeabi_dmul+0x414>
 800094a:	210f      	movs	r1, #15
 800094c:	4011      	ands	r1, r2
 800094e:	2904      	cmp	r1, #4
 8000950:	d1ac      	bne.n	80008ac <__aeabi_dmul+0x408>
 8000952:	e7b1      	b.n	80008b8 <__aeabi_dmul+0x414>
 8000954:	0765      	lsls	r5, r4, #29
 8000956:	0264      	lsls	r4, r4, #9
 8000958:	0b24      	lsrs	r4, r4, #12
 800095a:	08d2      	lsrs	r2, r2, #3
 800095c:	4315      	orrs	r5, r2
 800095e:	2200      	movs	r2, #0
 8000960:	e601      	b.n	8000566 <__aeabi_dmul+0xc2>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0312      	lsls	r2, r2, #12
 8000966:	4314      	orrs	r4, r2
 8000968:	0324      	lsls	r4, r4, #12
 800096a:	4a01      	ldr	r2, [pc, #4]	; (8000970 <__aeabi_dmul+0x4cc>)
 800096c:	0b24      	lsrs	r4, r4, #12
 800096e:	e5fa      	b.n	8000566 <__aeabi_dmul+0xc2>
 8000970:	000007ff 	.word	0x000007ff
 8000974:	0000043e 	.word	0x0000043e
 8000978:	0000041e 	.word	0x0000041e

0800097c <__aeabi_dsub>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	4657      	mov	r7, sl
 8000980:	464e      	mov	r6, r9
 8000982:	4645      	mov	r5, r8
 8000984:	46de      	mov	lr, fp
 8000986:	b5e0      	push	{r5, r6, r7, lr}
 8000988:	001e      	movs	r6, r3
 800098a:	0017      	movs	r7, r2
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	030b      	lsls	r3, r1, #12
 8000990:	0d52      	lsrs	r2, r2, #21
 8000992:	0a5b      	lsrs	r3, r3, #9
 8000994:	4690      	mov	r8, r2
 8000996:	0f42      	lsrs	r2, r0, #29
 8000998:	431a      	orrs	r2, r3
 800099a:	0fcd      	lsrs	r5, r1, #31
 800099c:	4ccd      	ldr	r4, [pc, #820]	; (8000cd4 <__aeabi_dsub+0x358>)
 800099e:	0331      	lsls	r1, r6, #12
 80009a0:	00c3      	lsls	r3, r0, #3
 80009a2:	4694      	mov	ip, r2
 80009a4:	0070      	lsls	r0, r6, #1
 80009a6:	0f7a      	lsrs	r2, r7, #29
 80009a8:	0a49      	lsrs	r1, r1, #9
 80009aa:	00ff      	lsls	r7, r7, #3
 80009ac:	469a      	mov	sl, r3
 80009ae:	46b9      	mov	r9, r7
 80009b0:	0d40      	lsrs	r0, r0, #21
 80009b2:	0ff6      	lsrs	r6, r6, #31
 80009b4:	4311      	orrs	r1, r2
 80009b6:	42a0      	cmp	r0, r4
 80009b8:	d100      	bne.n	80009bc <__aeabi_dsub+0x40>
 80009ba:	e0b1      	b.n	8000b20 <__aeabi_dsub+0x1a4>
 80009bc:	2201      	movs	r2, #1
 80009be:	4056      	eors	r6, r2
 80009c0:	46b3      	mov	fp, r6
 80009c2:	42b5      	cmp	r5, r6
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dsub+0x4c>
 80009c6:	e088      	b.n	8000ada <__aeabi_dsub+0x15e>
 80009c8:	4642      	mov	r2, r8
 80009ca:	1a12      	subs	r2, r2, r0
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	dc00      	bgt.n	80009d2 <__aeabi_dsub+0x56>
 80009d0:	e0ae      	b.n	8000b30 <__aeabi_dsub+0x1b4>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x5c>
 80009d6:	e0c1      	b.n	8000b5c <__aeabi_dsub+0x1e0>
 80009d8:	48be      	ldr	r0, [pc, #760]	; (8000cd4 <__aeabi_dsub+0x358>)
 80009da:	4580      	cmp	r8, r0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dsub+0x64>
 80009de:	e151      	b.n	8000c84 <__aeabi_dsub+0x308>
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	0400      	lsls	r0, r0, #16
 80009e4:	4301      	orrs	r1, r0
 80009e6:	2a38      	cmp	r2, #56	; 0x38
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dsub+0x70>
 80009ea:	e17b      	b.n	8000ce4 <__aeabi_dsub+0x368>
 80009ec:	2a1f      	cmp	r2, #31
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_dsub+0x76>
 80009f0:	e1ee      	b.n	8000dd0 <__aeabi_dsub+0x454>
 80009f2:	2020      	movs	r0, #32
 80009f4:	003e      	movs	r6, r7
 80009f6:	1a80      	subs	r0, r0, r2
 80009f8:	000c      	movs	r4, r1
 80009fa:	40d6      	lsrs	r6, r2
 80009fc:	40d1      	lsrs	r1, r2
 80009fe:	4087      	lsls	r7, r0
 8000a00:	4662      	mov	r2, ip
 8000a02:	4084      	lsls	r4, r0
 8000a04:	1a52      	subs	r2, r2, r1
 8000a06:	1e78      	subs	r0, r7, #1
 8000a08:	4187      	sbcs	r7, r0
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	4334      	orrs	r4, r6
 8000a0e:	4327      	orrs	r7, r4
 8000a10:	1bdc      	subs	r4, r3, r7
 8000a12:	42a3      	cmp	r3, r4
 8000a14:	419b      	sbcs	r3, r3
 8000a16:	4662      	mov	r2, ip
 8000a18:	425b      	negs	r3, r3
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	464b      	mov	r3, r9
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_dsub+0xaa>
 8000a24:	e118      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8000a26:	464b      	mov	r3, r9
 8000a28:	0258      	lsls	r0, r3, #9
 8000a2a:	0a43      	lsrs	r3, r0, #9
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	464b      	mov	r3, r9
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dsub+0xba>
 8000a34:	e137      	b.n	8000ca6 <__aeabi_dsub+0x32a>
 8000a36:	4648      	mov	r0, r9
 8000a38:	f000 fbcc 	bl	80011d4 <__clzsi2>
 8000a3c:	0001      	movs	r1, r0
 8000a3e:	3908      	subs	r1, #8
 8000a40:	2320      	movs	r3, #32
 8000a42:	0022      	movs	r2, r4
 8000a44:	4648      	mov	r0, r9
 8000a46:	1a5b      	subs	r3, r3, r1
 8000a48:	40da      	lsrs	r2, r3
 8000a4a:	4088      	lsls	r0, r1
 8000a4c:	408c      	lsls	r4, r1
 8000a4e:	4643      	mov	r3, r8
 8000a50:	4310      	orrs	r0, r2
 8000a52:	4588      	cmp	r8, r1
 8000a54:	dd00      	ble.n	8000a58 <__aeabi_dsub+0xdc>
 8000a56:	e136      	b.n	8000cc6 <__aeabi_dsub+0x34a>
 8000a58:	1ac9      	subs	r1, r1, r3
 8000a5a:	1c4b      	adds	r3, r1, #1
 8000a5c:	2b1f      	cmp	r3, #31
 8000a5e:	dd00      	ble.n	8000a62 <__aeabi_dsub+0xe6>
 8000a60:	e0ea      	b.n	8000c38 <__aeabi_dsub+0x2bc>
 8000a62:	2220      	movs	r2, #32
 8000a64:	0026      	movs	r6, r4
 8000a66:	1ad2      	subs	r2, r2, r3
 8000a68:	0001      	movs	r1, r0
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	40de      	lsrs	r6, r3
 8000a6e:	40d8      	lsrs	r0, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	4091      	lsls	r1, r2
 8000a74:	1e62      	subs	r2, r4, #1
 8000a76:	4194      	sbcs	r4, r2
 8000a78:	4681      	mov	r9, r0
 8000a7a:	4698      	mov	r8, r3
 8000a7c:	4331      	orrs	r1, r6
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	0763      	lsls	r3, r4, #29
 8000a82:	d009      	beq.n	8000a98 <__aeabi_dsub+0x11c>
 8000a84:	230f      	movs	r3, #15
 8000a86:	4023      	ands	r3, r4
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d005      	beq.n	8000a98 <__aeabi_dsub+0x11c>
 8000a8c:	1d23      	adds	r3, r4, #4
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	41a4      	sbcs	r4, r4
 8000a92:	4264      	negs	r4, r4
 8000a94:	44a1      	add	r9, r4
 8000a96:	001c      	movs	r4, r3
 8000a98:	464b      	mov	r3, r9
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	d400      	bmi.n	8000aa0 <__aeabi_dsub+0x124>
 8000a9e:	e0de      	b.n	8000c5e <__aeabi_dsub+0x2e2>
 8000aa0:	4641      	mov	r1, r8
 8000aa2:	4b8c      	ldr	r3, [pc, #560]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000aa4:	3101      	adds	r1, #1
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dsub+0x130>
 8000aaa:	e0e7      	b.n	8000c7c <__aeabi_dsub+0x300>
 8000aac:	464b      	mov	r3, r9
 8000aae:	488a      	ldr	r0, [pc, #552]	; (8000cd8 <__aeabi_dsub+0x35c>)
 8000ab0:	08e4      	lsrs	r4, r4, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	0549      	lsls	r1, r1, #21
 8000ab8:	075b      	lsls	r3, r3, #29
 8000aba:	0240      	lsls	r0, r0, #9
 8000abc:	4323      	orrs	r3, r4
 8000abe:	0d4a      	lsrs	r2, r1, #21
 8000ac0:	0b04      	lsrs	r4, r0, #12
 8000ac2:	0512      	lsls	r2, r2, #20
 8000ac4:	07ed      	lsls	r5, r5, #31
 8000ac6:	4322      	orrs	r2, r4
 8000ac8:	432a      	orrs	r2, r5
 8000aca:	0018      	movs	r0, r3
 8000acc:	0011      	movs	r1, r2
 8000ace:	bcf0      	pop	{r4, r5, r6, r7}
 8000ad0:	46bb      	mov	fp, r7
 8000ad2:	46b2      	mov	sl, r6
 8000ad4:	46a9      	mov	r9, r5
 8000ad6:	46a0      	mov	r8, r4
 8000ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ada:	4642      	mov	r2, r8
 8000adc:	1a12      	subs	r2, r2, r0
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	dd52      	ble.n	8000b88 <__aeabi_dsub+0x20c>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dsub+0x16c>
 8000ae6:	e09c      	b.n	8000c22 <__aeabi_dsub+0x2a6>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	d100      	bne.n	8000aee <__aeabi_dsub+0x172>
 8000aec:	e0ca      	b.n	8000c84 <__aeabi_dsub+0x308>
 8000aee:	2080      	movs	r0, #128	; 0x80
 8000af0:	0400      	lsls	r0, r0, #16
 8000af2:	4301      	orrs	r1, r0
 8000af4:	2a38      	cmp	r2, #56	; 0x38
 8000af6:	dd00      	ble.n	8000afa <__aeabi_dsub+0x17e>
 8000af8:	e149      	b.n	8000d8e <__aeabi_dsub+0x412>
 8000afa:	2a1f      	cmp	r2, #31
 8000afc:	dc00      	bgt.n	8000b00 <__aeabi_dsub+0x184>
 8000afe:	e197      	b.n	8000e30 <__aeabi_dsub+0x4b4>
 8000b00:	0010      	movs	r0, r2
 8000b02:	000e      	movs	r6, r1
 8000b04:	3820      	subs	r0, #32
 8000b06:	40c6      	lsrs	r6, r0
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d004      	beq.n	8000b16 <__aeabi_dsub+0x19a>
 8000b0c:	2040      	movs	r0, #64	; 0x40
 8000b0e:	1a82      	subs	r2, r0, r2
 8000b10:	4091      	lsls	r1, r2
 8000b12:	430f      	orrs	r7, r1
 8000b14:	46b9      	mov	r9, r7
 8000b16:	464c      	mov	r4, r9
 8000b18:	1e62      	subs	r2, r4, #1
 8000b1a:	4194      	sbcs	r4, r2
 8000b1c:	4334      	orrs	r4, r6
 8000b1e:	e13a      	b.n	8000d96 <__aeabi_dsub+0x41a>
 8000b20:	000a      	movs	r2, r1
 8000b22:	433a      	orrs	r2, r7
 8000b24:	d028      	beq.n	8000b78 <__aeabi_dsub+0x1fc>
 8000b26:	46b3      	mov	fp, r6
 8000b28:	42b5      	cmp	r5, r6
 8000b2a:	d02b      	beq.n	8000b84 <__aeabi_dsub+0x208>
 8000b2c:	4a6b      	ldr	r2, [pc, #428]	; (8000cdc <__aeabi_dsub+0x360>)
 8000b2e:	4442      	add	r2, r8
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d05d      	beq.n	8000bf0 <__aeabi_dsub+0x274>
 8000b34:	4642      	mov	r2, r8
 8000b36:	4644      	mov	r4, r8
 8000b38:	1a82      	subs	r2, r0, r2
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dsub+0x1c4>
 8000b3e:	e0f5      	b.n	8000d2c <__aeabi_dsub+0x3b0>
 8000b40:	4665      	mov	r5, ip
 8000b42:	431d      	orrs	r5, r3
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dsub+0x1cc>
 8000b46:	e19c      	b.n	8000e82 <__aeabi_dsub+0x506>
 8000b48:	1e55      	subs	r5, r2, #1
 8000b4a:	2a01      	cmp	r2, #1
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dsub+0x1d4>
 8000b4e:	e1fb      	b.n	8000f48 <__aeabi_dsub+0x5cc>
 8000b50:	4c60      	ldr	r4, [pc, #384]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000b52:	42a2      	cmp	r2, r4
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dsub+0x1dc>
 8000b56:	e1bd      	b.n	8000ed4 <__aeabi_dsub+0x558>
 8000b58:	002a      	movs	r2, r5
 8000b5a:	e0f0      	b.n	8000d3e <__aeabi_dsub+0x3c2>
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4338      	orrs	r0, r7
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dsub+0x1e8>
 8000b62:	e0c3      	b.n	8000cec <__aeabi_dsub+0x370>
 8000b64:	1e50      	subs	r0, r2, #1
 8000b66:	2a01      	cmp	r2, #1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dsub+0x1f0>
 8000b6a:	e1a8      	b.n	8000ebe <__aeabi_dsub+0x542>
 8000b6c:	4c59      	ldr	r4, [pc, #356]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000b6e:	42a2      	cmp	r2, r4
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dsub+0x1f8>
 8000b72:	e087      	b.n	8000c84 <__aeabi_dsub+0x308>
 8000b74:	0002      	movs	r2, r0
 8000b76:	e736      	b.n	80009e6 <__aeabi_dsub+0x6a>
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4056      	eors	r6, r2
 8000b7c:	46b3      	mov	fp, r6
 8000b7e:	42b5      	cmp	r5, r6
 8000b80:	d000      	beq.n	8000b84 <__aeabi_dsub+0x208>
 8000b82:	e721      	b.n	80009c8 <__aeabi_dsub+0x4c>
 8000b84:	4a55      	ldr	r2, [pc, #340]	; (8000cdc <__aeabi_dsub+0x360>)
 8000b86:	4442      	add	r2, r8
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dsub+0x212>
 8000b8c:	e0b5      	b.n	8000cfa <__aeabi_dsub+0x37e>
 8000b8e:	4642      	mov	r2, r8
 8000b90:	4644      	mov	r4, r8
 8000b92:	1a82      	subs	r2, r0, r2
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dsub+0x21e>
 8000b98:	e138      	b.n	8000e0c <__aeabi_dsub+0x490>
 8000b9a:	4e4e      	ldr	r6, [pc, #312]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000b9c:	42b0      	cmp	r0, r6
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dsub+0x226>
 8000ba0:	e1de      	b.n	8000f60 <__aeabi_dsub+0x5e4>
 8000ba2:	2680      	movs	r6, #128	; 0x80
 8000ba4:	4664      	mov	r4, ip
 8000ba6:	0436      	lsls	r6, r6, #16
 8000ba8:	4334      	orrs	r4, r6
 8000baa:	46a4      	mov	ip, r4
 8000bac:	2a38      	cmp	r2, #56	; 0x38
 8000bae:	dd00      	ble.n	8000bb2 <__aeabi_dsub+0x236>
 8000bb0:	e196      	b.n	8000ee0 <__aeabi_dsub+0x564>
 8000bb2:	2a1f      	cmp	r2, #31
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dsub+0x23c>
 8000bb6:	e224      	b.n	8001002 <__aeabi_dsub+0x686>
 8000bb8:	2620      	movs	r6, #32
 8000bba:	1ab4      	subs	r4, r6, r2
 8000bbc:	46a2      	mov	sl, r4
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	4656      	mov	r6, sl
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	46a1      	mov	r9, r4
 8000bc6:	001c      	movs	r4, r3
 8000bc8:	464e      	mov	r6, r9
 8000bca:	40d4      	lsrs	r4, r2
 8000bcc:	4326      	orrs	r6, r4
 8000bce:	0034      	movs	r4, r6
 8000bd0:	4656      	mov	r6, sl
 8000bd2:	40b3      	lsls	r3, r6
 8000bd4:	1e5e      	subs	r6, r3, #1
 8000bd6:	41b3      	sbcs	r3, r6
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	4663      	mov	r3, ip
 8000bdc:	40d3      	lsrs	r3, r2
 8000bde:	18c9      	adds	r1, r1, r3
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	42bc      	cmp	r4, r7
 8000be4:	41bf      	sbcs	r7, r7
 8000be6:	427f      	negs	r7, r7
 8000be8:	46b9      	mov	r9, r7
 8000bea:	4680      	mov	r8, r0
 8000bec:	4489      	add	r9, r1
 8000bee:	e0d8      	b.n	8000da2 <__aeabi_dsub+0x426>
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4c3b      	ldr	r4, [pc, #236]	; (8000ce0 <__aeabi_dsub+0x364>)
 8000bf4:	3001      	adds	r0, #1
 8000bf6:	4220      	tst	r0, r4
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_dsub+0x280>
 8000bfa:	e0b4      	b.n	8000d66 <__aeabi_dsub+0x3ea>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dsub+0x288>
 8000c02:	e144      	b.n	8000e8e <__aeabi_dsub+0x512>
 8000c04:	4660      	mov	r0, ip
 8000c06:	4318      	orrs	r0, r3
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x290>
 8000c0a:	e190      	b.n	8000f2e <__aeabi_dsub+0x5b2>
 8000c0c:	0008      	movs	r0, r1
 8000c0e:	4338      	orrs	r0, r7
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dsub+0x298>
 8000c12:	e1aa      	b.n	8000f6a <__aeabi_dsub+0x5ee>
 8000c14:	4661      	mov	r1, ip
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	0749      	lsls	r1, r1, #29
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	4661      	mov	r1, ip
 8000c1e:	08cc      	lsrs	r4, r1, #3
 8000c20:	e027      	b.n	8000c72 <__aeabi_dsub+0x2f6>
 8000c22:	0008      	movs	r0, r1
 8000c24:	4338      	orrs	r0, r7
 8000c26:	d061      	beq.n	8000cec <__aeabi_dsub+0x370>
 8000c28:	1e50      	subs	r0, r2, #1
 8000c2a:	2a01      	cmp	r2, #1
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dsub+0x2b4>
 8000c2e:	e139      	b.n	8000ea4 <__aeabi_dsub+0x528>
 8000c30:	42a2      	cmp	r2, r4
 8000c32:	d027      	beq.n	8000c84 <__aeabi_dsub+0x308>
 8000c34:	0002      	movs	r2, r0
 8000c36:	e75d      	b.n	8000af4 <__aeabi_dsub+0x178>
 8000c38:	0002      	movs	r2, r0
 8000c3a:	391f      	subs	r1, #31
 8000c3c:	40ca      	lsrs	r2, r1
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d003      	beq.n	8000c4c <__aeabi_dsub+0x2d0>
 8000c44:	2240      	movs	r2, #64	; 0x40
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	4098      	lsls	r0, r3
 8000c4a:	4304      	orrs	r4, r0
 8000c4c:	1e63      	subs	r3, r4, #1
 8000c4e:	419c      	sbcs	r4, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	4699      	mov	r9, r3
 8000c54:	4698      	mov	r8, r3
 8000c56:	430c      	orrs	r4, r1
 8000c58:	0763      	lsls	r3, r4, #29
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dsub+0x2e2>
 8000c5c:	e712      	b.n	8000a84 <__aeabi_dsub+0x108>
 8000c5e:	464b      	mov	r3, r9
 8000c60:	464a      	mov	r2, r9
 8000c62:	08e4      	lsrs	r4, r4, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4323      	orrs	r3, r4
 8000c68:	08d4      	lsrs	r4, r2, #3
 8000c6a:	4642      	mov	r2, r8
 8000c6c:	4919      	ldr	r1, [pc, #100]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	d00e      	beq.n	8000c90 <__aeabi_dsub+0x314>
 8000c72:	0324      	lsls	r4, r4, #12
 8000c74:	0552      	lsls	r2, r2, #21
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d52      	lsrs	r2, r2, #21
 8000c7a:	e722      	b.n	8000ac2 <__aeabi_dsub+0x146>
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	2400      	movs	r4, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	e71e      	b.n	8000ac2 <__aeabi_dsub+0x146>
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4662      	mov	r2, ip
 8000c88:	0752      	lsls	r2, r2, #29
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	08d4      	lsrs	r4, r2, #3
 8000c90:	001a      	movs	r2, r3
 8000c92:	4322      	orrs	r2, r4
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dsub+0x31c>
 8000c96:	e1fc      	b.n	8001092 <__aeabi_dsub+0x716>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0312      	lsls	r2, r2, #12
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	0324      	lsls	r4, r4, #12
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <__aeabi_dsub+0x358>)
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	e70d      	b.n	8000ac2 <__aeabi_dsub+0x146>
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	f000 fa94 	bl	80011d4 <__clzsi2>
 8000cac:	0001      	movs	r1, r0
 8000cae:	3118      	adds	r1, #24
 8000cb0:	291f      	cmp	r1, #31
 8000cb2:	dc00      	bgt.n	8000cb6 <__aeabi_dsub+0x33a>
 8000cb4:	e6c4      	b.n	8000a40 <__aeabi_dsub+0xc4>
 8000cb6:	3808      	subs	r0, #8
 8000cb8:	4084      	lsls	r4, r0
 8000cba:	4643      	mov	r3, r8
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	4588      	cmp	r8, r1
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_dsub+0x34a>
 8000cc4:	e6c8      	b.n	8000a58 <__aeabi_dsub+0xdc>
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__aeabi_dsub+0x35c>)
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	4010      	ands	r0, r2
 8000ccc:	4698      	mov	r8, r3
 8000cce:	4681      	mov	r9, r0
 8000cd0:	e6d6      	b.n	8000a80 <__aeabi_dsub+0x104>
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	000007ff 	.word	0x000007ff
 8000cd8:	ff7fffff 	.word	0xff7fffff
 8000cdc:	fffff801 	.word	0xfffff801
 8000ce0:	000007fe 	.word	0x000007fe
 8000ce4:	430f      	orrs	r7, r1
 8000ce6:	1e7a      	subs	r2, r7, #1
 8000ce8:	4197      	sbcs	r7, r2
 8000cea:	e691      	b.n	8000a10 <__aeabi_dsub+0x94>
 8000cec:	4661      	mov	r1, ip
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	0749      	lsls	r1, r1, #29
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	4661      	mov	r1, ip
 8000cf6:	08cc      	lsrs	r4, r1, #3
 8000cf8:	e7b8      	b.n	8000c6c <__aeabi_dsub+0x2f0>
 8000cfa:	4640      	mov	r0, r8
 8000cfc:	4cd3      	ldr	r4, [pc, #844]	; (800104c <__aeabi_dsub+0x6d0>)
 8000cfe:	3001      	adds	r0, #1
 8000d00:	4220      	tst	r0, r4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dsub+0x38a>
 8000d04:	e0a2      	b.n	8000e4c <__aeabi_dsub+0x4d0>
 8000d06:	4640      	mov	r0, r8
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dsub+0x392>
 8000d0c:	e101      	b.n	8000f12 <__aeabi_dsub+0x596>
 8000d0e:	4660      	mov	r0, ip
 8000d10:	4318      	orrs	r0, r3
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dsub+0x39a>
 8000d14:	e15e      	b.n	8000fd4 <__aeabi_dsub+0x658>
 8000d16:	0008      	movs	r0, r1
 8000d18:	4338      	orrs	r0, r7
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dsub+0x3a2>
 8000d1c:	e15f      	b.n	8000fde <__aeabi_dsub+0x662>
 8000d1e:	4661      	mov	r1, ip
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	0749      	lsls	r1, r1, #29
 8000d24:	430b      	orrs	r3, r1
 8000d26:	4661      	mov	r1, ip
 8000d28:	08cc      	lsrs	r4, r1, #3
 8000d2a:	e7a2      	b.n	8000c72 <__aeabi_dsub+0x2f6>
 8000d2c:	4dc8      	ldr	r5, [pc, #800]	; (8001050 <__aeabi_dsub+0x6d4>)
 8000d2e:	42a8      	cmp	r0, r5
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x3b8>
 8000d32:	e0cf      	b.n	8000ed4 <__aeabi_dsub+0x558>
 8000d34:	2580      	movs	r5, #128	; 0x80
 8000d36:	4664      	mov	r4, ip
 8000d38:	042d      	lsls	r5, r5, #16
 8000d3a:	432c      	orrs	r4, r5
 8000d3c:	46a4      	mov	ip, r4
 8000d3e:	2a38      	cmp	r2, #56	; 0x38
 8000d40:	dc56      	bgt.n	8000df0 <__aeabi_dsub+0x474>
 8000d42:	2a1f      	cmp	r2, #31
 8000d44:	dd00      	ble.n	8000d48 <__aeabi_dsub+0x3cc>
 8000d46:	e0d1      	b.n	8000eec <__aeabi_dsub+0x570>
 8000d48:	2520      	movs	r5, #32
 8000d4a:	001e      	movs	r6, r3
 8000d4c:	1aad      	subs	r5, r5, r2
 8000d4e:	4664      	mov	r4, ip
 8000d50:	40ab      	lsls	r3, r5
 8000d52:	40ac      	lsls	r4, r5
 8000d54:	40d6      	lsrs	r6, r2
 8000d56:	1e5d      	subs	r5, r3, #1
 8000d58:	41ab      	sbcs	r3, r5
 8000d5a:	4334      	orrs	r4, r6
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	4664      	mov	r4, ip
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	1b09      	subs	r1, r1, r4
 8000d64:	e049      	b.n	8000dfa <__aeabi_dsub+0x47e>
 8000d66:	4660      	mov	r0, ip
 8000d68:	1bdc      	subs	r4, r3, r7
 8000d6a:	1a46      	subs	r6, r0, r1
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	4180      	sbcs	r0, r0
 8000d70:	4240      	negs	r0, r0
 8000d72:	4681      	mov	r9, r0
 8000d74:	0030      	movs	r0, r6
 8000d76:	464e      	mov	r6, r9
 8000d78:	1b80      	subs	r0, r0, r6
 8000d7a:	4681      	mov	r9, r0
 8000d7c:	0200      	lsls	r0, r0, #8
 8000d7e:	d476      	bmi.n	8000e6e <__aeabi_dsub+0x4f2>
 8000d80:	464b      	mov	r3, r9
 8000d82:	4323      	orrs	r3, r4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dsub+0x40c>
 8000d86:	e652      	b.n	8000a2e <__aeabi_dsub+0xb2>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e771      	b.n	8000c72 <__aeabi_dsub+0x2f6>
 8000d8e:	4339      	orrs	r1, r7
 8000d90:	000c      	movs	r4, r1
 8000d92:	1e62      	subs	r2, r4, #1
 8000d94:	4194      	sbcs	r4, r2
 8000d96:	18e4      	adds	r4, r4, r3
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	4463      	add	r3, ip
 8000da0:	4699      	mov	r9, r3
 8000da2:	464b      	mov	r3, r9
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	d400      	bmi.n	8000daa <__aeabi_dsub+0x42e>
 8000da8:	e756      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8000daa:	2301      	movs	r3, #1
 8000dac:	469c      	mov	ip, r3
 8000dae:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <__aeabi_dsub+0x6d4>)
 8000db0:	44e0      	add	r8, ip
 8000db2:	4598      	cmp	r8, r3
 8000db4:	d038      	beq.n	8000e28 <__aeabi_dsub+0x4ac>
 8000db6:	464b      	mov	r3, r9
 8000db8:	48a6      	ldr	r0, [pc, #664]	; (8001054 <__aeabi_dsub+0x6d8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4003      	ands	r3, r0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	0863      	lsrs	r3, r4, #1
 8000dc2:	4014      	ands	r4, r2
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	07c3      	lsls	r3, r0, #31
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	0843      	lsrs	r3, r0, #1
 8000dcc:	4699      	mov	r9, r3
 8000dce:	e657      	b.n	8000a80 <__aeabi_dsub+0x104>
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	000e      	movs	r6, r1
 8000dd4:	3820      	subs	r0, #32
 8000dd6:	40c6      	lsrs	r6, r0
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d004      	beq.n	8000de6 <__aeabi_dsub+0x46a>
 8000ddc:	2040      	movs	r0, #64	; 0x40
 8000dde:	1a82      	subs	r2, r0, r2
 8000de0:	4091      	lsls	r1, r2
 8000de2:	430f      	orrs	r7, r1
 8000de4:	46b9      	mov	r9, r7
 8000de6:	464f      	mov	r7, r9
 8000de8:	1e7a      	subs	r2, r7, #1
 8000dea:	4197      	sbcs	r7, r2
 8000dec:	4337      	orrs	r7, r6
 8000dee:	e60f      	b.n	8000a10 <__aeabi_dsub+0x94>
 8000df0:	4662      	mov	r2, ip
 8000df2:	431a      	orrs	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	4193      	sbcs	r3, r2
 8000dfa:	1afc      	subs	r4, r7, r3
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	41bf      	sbcs	r7, r7
 8000e00:	427f      	negs	r7, r7
 8000e02:	1bcb      	subs	r3, r1, r7
 8000e04:	4699      	mov	r9, r3
 8000e06:	465d      	mov	r5, fp
 8000e08:	4680      	mov	r8, r0
 8000e0a:	e608      	b.n	8000a1e <__aeabi_dsub+0xa2>
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dsub+0x498>
 8000e12:	e0be      	b.n	8000f92 <__aeabi_dsub+0x616>
 8000e14:	1e56      	subs	r6, r2, #1
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dsub+0x4a0>
 8000e1a:	e109      	b.n	8001030 <__aeabi_dsub+0x6b4>
 8000e1c:	4c8c      	ldr	r4, [pc, #560]	; (8001050 <__aeabi_dsub+0x6d4>)
 8000e1e:	42a2      	cmp	r2, r4
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dsub+0x4a8>
 8000e22:	e119      	b.n	8001058 <__aeabi_dsub+0x6dc>
 8000e24:	0032      	movs	r2, r6
 8000e26:	e6c1      	b.n	8000bac <__aeabi_dsub+0x230>
 8000e28:	4642      	mov	r2, r8
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e648      	b.n	8000ac2 <__aeabi_dsub+0x146>
 8000e30:	2020      	movs	r0, #32
 8000e32:	000c      	movs	r4, r1
 8000e34:	1a80      	subs	r0, r0, r2
 8000e36:	003e      	movs	r6, r7
 8000e38:	4087      	lsls	r7, r0
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	40d6      	lsrs	r6, r2
 8000e3e:	1e78      	subs	r0, r7, #1
 8000e40:	4187      	sbcs	r7, r0
 8000e42:	40d1      	lsrs	r1, r2
 8000e44:	4334      	orrs	r4, r6
 8000e46:	433c      	orrs	r4, r7
 8000e48:	448c      	add	ip, r1
 8000e4a:	e7a4      	b.n	8000d96 <__aeabi_dsub+0x41a>
 8000e4c:	4a80      	ldr	r2, [pc, #512]	; (8001050 <__aeabi_dsub+0x6d4>)
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dsub+0x4d8>
 8000e52:	e0e9      	b.n	8001028 <__aeabi_dsub+0x6ac>
 8000e54:	19df      	adds	r7, r3, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	419b      	sbcs	r3, r3
 8000e5a:	4461      	add	r1, ip
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	18c9      	adds	r1, r1, r3
 8000e60:	07cc      	lsls	r4, r1, #31
 8000e62:	087f      	lsrs	r7, r7, #1
 8000e64:	084b      	lsrs	r3, r1, #1
 8000e66:	4699      	mov	r9, r3
 8000e68:	4680      	mov	r8, r0
 8000e6a:	433c      	orrs	r4, r7
 8000e6c:	e6f4      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8000e6e:	1afc      	subs	r4, r7, r3
 8000e70:	42a7      	cmp	r7, r4
 8000e72:	41bf      	sbcs	r7, r7
 8000e74:	4663      	mov	r3, ip
 8000e76:	427f      	negs	r7, r7
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	1bcb      	subs	r3, r1, r7
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	465d      	mov	r5, fp
 8000e80:	e5d5      	b.n	8000a2e <__aeabi_dsub+0xb2>
 8000e82:	08ff      	lsrs	r7, r7, #3
 8000e84:	074b      	lsls	r3, r1, #29
 8000e86:	465d      	mov	r5, fp
 8000e88:	433b      	orrs	r3, r7
 8000e8a:	08cc      	lsrs	r4, r1, #3
 8000e8c:	e6ee      	b.n	8000c6c <__aeabi_dsub+0x2f0>
 8000e8e:	4662      	mov	r2, ip
 8000e90:	431a      	orrs	r2, r3
 8000e92:	d000      	beq.n	8000e96 <__aeabi_dsub+0x51a>
 8000e94:	e082      	b.n	8000f9c <__aeabi_dsub+0x620>
 8000e96:	000b      	movs	r3, r1
 8000e98:	433b      	orrs	r3, r7
 8000e9a:	d11b      	bne.n	8000ed4 <__aeabi_dsub+0x558>
 8000e9c:	2480      	movs	r4, #128	; 0x80
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	0324      	lsls	r4, r4, #12
 8000ea2:	e6f9      	b.n	8000c98 <__aeabi_dsub+0x31c>
 8000ea4:	19dc      	adds	r4, r3, r7
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	419b      	sbcs	r3, r3
 8000eaa:	4461      	add	r1, ip
 8000eac:	4689      	mov	r9, r1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	4499      	add	r9, r3
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	d444      	bmi.n	8000f42 <__aeabi_dsub+0x5c6>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	4698      	mov	r8, r3
 8000ebc:	e6cc      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8000ebe:	1bdc      	subs	r4, r3, r7
 8000ec0:	4662      	mov	r2, ip
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	1a51      	subs	r1, r2, r1
 8000ec8:	425b      	negs	r3, r3
 8000eca:	1acb      	subs	r3, r1, r3
 8000ecc:	4699      	mov	r9, r3
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	e5a4      	b.n	8000a1e <__aeabi_dsub+0xa2>
 8000ed4:	08ff      	lsrs	r7, r7, #3
 8000ed6:	074b      	lsls	r3, r1, #29
 8000ed8:	465d      	mov	r5, fp
 8000eda:	433b      	orrs	r3, r7
 8000edc:	08cc      	lsrs	r4, r1, #3
 8000ede:	e6d7      	b.n	8000c90 <__aeabi_dsub+0x314>
 8000ee0:	4662      	mov	r2, ip
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	0014      	movs	r4, r2
 8000ee6:	1e63      	subs	r3, r4, #1
 8000ee8:	419c      	sbcs	r4, r3
 8000eea:	e679      	b.n	8000be0 <__aeabi_dsub+0x264>
 8000eec:	0015      	movs	r5, r2
 8000eee:	4664      	mov	r4, ip
 8000ef0:	3d20      	subs	r5, #32
 8000ef2:	40ec      	lsrs	r4, r5
 8000ef4:	46a0      	mov	r8, r4
 8000ef6:	2a20      	cmp	r2, #32
 8000ef8:	d005      	beq.n	8000f06 <__aeabi_dsub+0x58a>
 8000efa:	2540      	movs	r5, #64	; 0x40
 8000efc:	4664      	mov	r4, ip
 8000efe:	1aaa      	subs	r2, r5, r2
 8000f00:	4094      	lsls	r4, r2
 8000f02:	4323      	orrs	r3, r4
 8000f04:	469a      	mov	sl, r3
 8000f06:	4654      	mov	r4, sl
 8000f08:	1e63      	subs	r3, r4, #1
 8000f0a:	419c      	sbcs	r4, r3
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	e773      	b.n	8000dfa <__aeabi_dsub+0x47e>
 8000f12:	4662      	mov	r2, ip
 8000f14:	431a      	orrs	r2, r3
 8000f16:	d023      	beq.n	8000f60 <__aeabi_dsub+0x5e4>
 8000f18:	000a      	movs	r2, r1
 8000f1a:	433a      	orrs	r2, r7
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dsub+0x5a4>
 8000f1e:	e0a0      	b.n	8001062 <__aeabi_dsub+0x6e6>
 8000f20:	4662      	mov	r2, ip
 8000f22:	08db      	lsrs	r3, r3, #3
 8000f24:	0752      	lsls	r2, r2, #29
 8000f26:	4313      	orrs	r3, r2
 8000f28:	4662      	mov	r2, ip
 8000f2a:	08d4      	lsrs	r4, r2, #3
 8000f2c:	e6b0      	b.n	8000c90 <__aeabi_dsub+0x314>
 8000f2e:	000b      	movs	r3, r1
 8000f30:	433b      	orrs	r3, r7
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0x5ba>
 8000f34:	e728      	b.n	8000d88 <__aeabi_dsub+0x40c>
 8000f36:	08ff      	lsrs	r7, r7, #3
 8000f38:	074b      	lsls	r3, r1, #29
 8000f3a:	465d      	mov	r5, fp
 8000f3c:	433b      	orrs	r3, r7
 8000f3e:	08cc      	lsrs	r4, r1, #3
 8000f40:	e697      	b.n	8000c72 <__aeabi_dsub+0x2f6>
 8000f42:	2302      	movs	r3, #2
 8000f44:	4698      	mov	r8, r3
 8000f46:	e736      	b.n	8000db6 <__aeabi_dsub+0x43a>
 8000f48:	1afc      	subs	r4, r7, r3
 8000f4a:	42a7      	cmp	r7, r4
 8000f4c:	41bf      	sbcs	r7, r7
 8000f4e:	4663      	mov	r3, ip
 8000f50:	427f      	negs	r7, r7
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	1bcb      	subs	r3, r1, r7
 8000f56:	4699      	mov	r9, r3
 8000f58:	2301      	movs	r3, #1
 8000f5a:	465d      	mov	r5, fp
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	e55e      	b.n	8000a1e <__aeabi_dsub+0xa2>
 8000f60:	074b      	lsls	r3, r1, #29
 8000f62:	08ff      	lsrs	r7, r7, #3
 8000f64:	433b      	orrs	r3, r7
 8000f66:	08cc      	lsrs	r4, r1, #3
 8000f68:	e692      	b.n	8000c90 <__aeabi_dsub+0x314>
 8000f6a:	1bdc      	subs	r4, r3, r7
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	41b6      	sbcs	r6, r6
 8000f72:	1a40      	subs	r0, r0, r1
 8000f74:	4276      	negs	r6, r6
 8000f76:	1b80      	subs	r0, r0, r6
 8000f78:	4681      	mov	r9, r0
 8000f7a:	0200      	lsls	r0, r0, #8
 8000f7c:	d560      	bpl.n	8001040 <__aeabi_dsub+0x6c4>
 8000f7e:	1afc      	subs	r4, r7, r3
 8000f80:	42a7      	cmp	r7, r4
 8000f82:	41bf      	sbcs	r7, r7
 8000f84:	4663      	mov	r3, ip
 8000f86:	427f      	negs	r7, r7
 8000f88:	1ac9      	subs	r1, r1, r3
 8000f8a:	1bcb      	subs	r3, r1, r7
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	465d      	mov	r5, fp
 8000f90:	e576      	b.n	8000a80 <__aeabi_dsub+0x104>
 8000f92:	08ff      	lsrs	r7, r7, #3
 8000f94:	074b      	lsls	r3, r1, #29
 8000f96:	433b      	orrs	r3, r7
 8000f98:	08cc      	lsrs	r4, r1, #3
 8000f9a:	e667      	b.n	8000c6c <__aeabi_dsub+0x2f0>
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	433a      	orrs	r2, r7
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0x62a>
 8000fa4:	e66f      	b.n	8000c86 <__aeabi_dsub+0x30a>
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	0752      	lsls	r2, r2, #29
 8000faa:	4313      	orrs	r3, r2
 8000fac:	4662      	mov	r2, ip
 8000fae:	08d4      	lsrs	r4, r2, #3
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	0312      	lsls	r2, r2, #12
 8000fb4:	4214      	tst	r4, r2
 8000fb6:	d007      	beq.n	8000fc8 <__aeabi_dsub+0x64c>
 8000fb8:	08c8      	lsrs	r0, r1, #3
 8000fba:	4210      	tst	r0, r2
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_dsub+0x64c>
 8000fbe:	465d      	mov	r5, fp
 8000fc0:	0004      	movs	r4, r0
 8000fc2:	08fb      	lsrs	r3, r7, #3
 8000fc4:	0749      	lsls	r1, r1, #29
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	0f5a      	lsrs	r2, r3, #29
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	0752      	lsls	r2, r2, #29
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	e65d      	b.n	8000c90 <__aeabi_dsub+0x314>
 8000fd4:	074b      	lsls	r3, r1, #29
 8000fd6:	08ff      	lsrs	r7, r7, #3
 8000fd8:	433b      	orrs	r3, r7
 8000fda:	08cc      	lsrs	r4, r1, #3
 8000fdc:	e649      	b.n	8000c72 <__aeabi_dsub+0x2f6>
 8000fde:	19dc      	adds	r4, r3, r7
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	419b      	sbcs	r3, r3
 8000fe4:	4461      	add	r1, ip
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	425b      	negs	r3, r3
 8000fea:	4499      	add	r9, r3
 8000fec:	464b      	mov	r3, r9
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_dsub+0x678>
 8000ff2:	e631      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <__aeabi_dsub+0x6d8>)
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4691      	mov	r9, r2
 8000ffe:	4698      	mov	r8, r3
 8001000:	e62a      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 8001002:	0016      	movs	r6, r2
 8001004:	4664      	mov	r4, ip
 8001006:	3e20      	subs	r6, #32
 8001008:	40f4      	lsrs	r4, r6
 800100a:	46a0      	mov	r8, r4
 800100c:	2a20      	cmp	r2, #32
 800100e:	d005      	beq.n	800101c <__aeabi_dsub+0x6a0>
 8001010:	2640      	movs	r6, #64	; 0x40
 8001012:	4664      	mov	r4, ip
 8001014:	1ab2      	subs	r2, r6, r2
 8001016:	4094      	lsls	r4, r2
 8001018:	4323      	orrs	r3, r4
 800101a:	469a      	mov	sl, r3
 800101c:	4654      	mov	r4, sl
 800101e:	1e63      	subs	r3, r4, #1
 8001020:	419c      	sbcs	r4, r3
 8001022:	4643      	mov	r3, r8
 8001024:	431c      	orrs	r4, r3
 8001026:	e5db      	b.n	8000be0 <__aeabi_dsub+0x264>
 8001028:	0002      	movs	r2, r0
 800102a:	2400      	movs	r4, #0
 800102c:	2300      	movs	r3, #0
 800102e:	e548      	b.n	8000ac2 <__aeabi_dsub+0x146>
 8001030:	19dc      	adds	r4, r3, r7
 8001032:	42bc      	cmp	r4, r7
 8001034:	41bf      	sbcs	r7, r7
 8001036:	4461      	add	r1, ip
 8001038:	4689      	mov	r9, r1
 800103a:	427f      	negs	r7, r7
 800103c:	44b9      	add	r9, r7
 800103e:	e738      	b.n	8000eb2 <__aeabi_dsub+0x536>
 8001040:	464b      	mov	r3, r9
 8001042:	4323      	orrs	r3, r4
 8001044:	d100      	bne.n	8001048 <__aeabi_dsub+0x6cc>
 8001046:	e69f      	b.n	8000d88 <__aeabi_dsub+0x40c>
 8001048:	e606      	b.n	8000c58 <__aeabi_dsub+0x2dc>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	000007fe 	.word	0x000007fe
 8001050:	000007ff 	.word	0x000007ff
 8001054:	ff7fffff 	.word	0xff7fffff
 8001058:	08ff      	lsrs	r7, r7, #3
 800105a:	074b      	lsls	r3, r1, #29
 800105c:	433b      	orrs	r3, r7
 800105e:	08cc      	lsrs	r4, r1, #3
 8001060:	e616      	b.n	8000c90 <__aeabi_dsub+0x314>
 8001062:	4662      	mov	r2, ip
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	0752      	lsls	r2, r2, #29
 8001068:	4313      	orrs	r3, r2
 800106a:	4662      	mov	r2, ip
 800106c:	08d4      	lsrs	r4, r2, #3
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	4214      	tst	r4, r2
 8001074:	d007      	beq.n	8001086 <__aeabi_dsub+0x70a>
 8001076:	08c8      	lsrs	r0, r1, #3
 8001078:	4210      	tst	r0, r2
 800107a:	d104      	bne.n	8001086 <__aeabi_dsub+0x70a>
 800107c:	465d      	mov	r5, fp
 800107e:	0004      	movs	r4, r0
 8001080:	08fb      	lsrs	r3, r7, #3
 8001082:	0749      	lsls	r1, r1, #29
 8001084:	430b      	orrs	r3, r1
 8001086:	0f5a      	lsrs	r2, r3, #29
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	0752      	lsls	r2, r2, #29
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	4313      	orrs	r3, r2
 8001090:	e5fe      	b.n	8000c90 <__aeabi_dsub+0x314>
 8001092:	2300      	movs	r3, #0
 8001094:	4a01      	ldr	r2, [pc, #4]	; (800109c <__aeabi_dsub+0x720>)
 8001096:	001c      	movs	r4, r3
 8001098:	e513      	b.n	8000ac2 <__aeabi_dsub+0x146>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	000007ff 	.word	0x000007ff

080010a0 <__aeabi_d2iz>:
 80010a0:	000a      	movs	r2, r1
 80010a2:	b530      	push	{r4, r5, lr}
 80010a4:	4c13      	ldr	r4, [pc, #76]	; (80010f4 <__aeabi_d2iz+0x54>)
 80010a6:	0053      	lsls	r3, r2, #1
 80010a8:	0309      	lsls	r1, r1, #12
 80010aa:	0005      	movs	r5, r0
 80010ac:	0b09      	lsrs	r1, r1, #12
 80010ae:	2000      	movs	r0, #0
 80010b0:	0d5b      	lsrs	r3, r3, #21
 80010b2:	0fd2      	lsrs	r2, r2, #31
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	dd04      	ble.n	80010c2 <__aeabi_d2iz+0x22>
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <__aeabi_d2iz+0x58>)
 80010ba:	4283      	cmp	r3, r0
 80010bc:	dd02      	ble.n	80010c4 <__aeabi_d2iz+0x24>
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <__aeabi_d2iz+0x5c>)
 80010c0:	18d0      	adds	r0, r2, r3
 80010c2:	bd30      	pop	{r4, r5, pc}
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	0340      	lsls	r0, r0, #13
 80010c8:	4301      	orrs	r1, r0
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <__aeabi_d2iz+0x60>)
 80010cc:	1ac0      	subs	r0, r0, r3
 80010ce:	281f      	cmp	r0, #31
 80010d0:	dd08      	ble.n	80010e4 <__aeabi_d2iz+0x44>
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <__aeabi_d2iz+0x64>)
 80010d4:	1ac3      	subs	r3, r0, r3
 80010d6:	40d9      	lsrs	r1, r3
 80010d8:	000b      	movs	r3, r1
 80010da:	4258      	negs	r0, r3
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d1f0      	bne.n	80010c2 <__aeabi_d2iz+0x22>
 80010e0:	0018      	movs	r0, r3
 80010e2:	e7ee      	b.n	80010c2 <__aeabi_d2iz+0x22>
 80010e4:	4c08      	ldr	r4, [pc, #32]	; (8001108 <__aeabi_d2iz+0x68>)
 80010e6:	40c5      	lsrs	r5, r0
 80010e8:	46a4      	mov	ip, r4
 80010ea:	4463      	add	r3, ip
 80010ec:	4099      	lsls	r1, r3
 80010ee:	000b      	movs	r3, r1
 80010f0:	432b      	orrs	r3, r5
 80010f2:	e7f2      	b.n	80010da <__aeabi_d2iz+0x3a>
 80010f4:	000003fe 	.word	0x000003fe
 80010f8:	0000041d 	.word	0x0000041d
 80010fc:	7fffffff 	.word	0x7fffffff
 8001100:	00000433 	.word	0x00000433
 8001104:	00000413 	.word	0x00000413
 8001108:	fffffbed 	.word	0xfffffbed

0800110c <__aeabi_ui2d>:
 800110c:	b510      	push	{r4, lr}
 800110e:	1e04      	subs	r4, r0, #0
 8001110:	d010      	beq.n	8001134 <__aeabi_ui2d+0x28>
 8001112:	f000 f85f 	bl	80011d4 <__clzsi2>
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <__aeabi_ui2d+0x48>)
 8001118:	1a1b      	subs	r3, r3, r0
 800111a:	280a      	cmp	r0, #10
 800111c:	dc11      	bgt.n	8001142 <__aeabi_ui2d+0x36>
 800111e:	220b      	movs	r2, #11
 8001120:	0021      	movs	r1, r4
 8001122:	1a12      	subs	r2, r2, r0
 8001124:	40d1      	lsrs	r1, r2
 8001126:	3015      	adds	r0, #21
 8001128:	030a      	lsls	r2, r1, #12
 800112a:	055b      	lsls	r3, r3, #21
 800112c:	4084      	lsls	r4, r0
 800112e:	0b12      	lsrs	r2, r2, #12
 8001130:	0d5b      	lsrs	r3, r3, #21
 8001132:	e001      	b.n	8001138 <__aeabi_ui2d+0x2c>
 8001134:	2300      	movs	r3, #0
 8001136:	2200      	movs	r2, #0
 8001138:	051b      	lsls	r3, r3, #20
 800113a:	4313      	orrs	r3, r2
 800113c:	0020      	movs	r0, r4
 800113e:	0019      	movs	r1, r3
 8001140:	bd10      	pop	{r4, pc}
 8001142:	0022      	movs	r2, r4
 8001144:	380b      	subs	r0, #11
 8001146:	4082      	lsls	r2, r0
 8001148:	055b      	lsls	r3, r3, #21
 800114a:	0312      	lsls	r2, r2, #12
 800114c:	2400      	movs	r4, #0
 800114e:	0b12      	lsrs	r2, r2, #12
 8001150:	0d5b      	lsrs	r3, r3, #21
 8001152:	e7f1      	b.n	8001138 <__aeabi_ui2d+0x2c>
 8001154:	0000041e 	.word	0x0000041e

08001158 <__aeabi_cdrcmple>:
 8001158:	4684      	mov	ip, r0
 800115a:	0010      	movs	r0, r2
 800115c:	4662      	mov	r2, ip
 800115e:	468c      	mov	ip, r1
 8001160:	0019      	movs	r1, r3
 8001162:	4663      	mov	r3, ip
 8001164:	e000      	b.n	8001168 <__aeabi_cdcmpeq>
 8001166:	46c0      	nop			; (mov r8, r8)

08001168 <__aeabi_cdcmpeq>:
 8001168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800116a:	f000 f905 	bl	8001378 <__ledf2>
 800116e:	2800      	cmp	r0, #0
 8001170:	d401      	bmi.n	8001176 <__aeabi_cdcmpeq+0xe>
 8001172:	2100      	movs	r1, #0
 8001174:	42c8      	cmn	r0, r1
 8001176:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001178 <__aeabi_dcmpeq>:
 8001178:	b510      	push	{r4, lr}
 800117a:	f000 f855 	bl	8001228 <__eqdf2>
 800117e:	4240      	negs	r0, r0
 8001180:	3001      	adds	r0, #1
 8001182:	bd10      	pop	{r4, pc}

08001184 <__aeabi_dcmplt>:
 8001184:	b510      	push	{r4, lr}
 8001186:	f000 f8f7 	bl	8001378 <__ledf2>
 800118a:	2800      	cmp	r0, #0
 800118c:	db01      	blt.n	8001192 <__aeabi_dcmplt+0xe>
 800118e:	2000      	movs	r0, #0
 8001190:	bd10      	pop	{r4, pc}
 8001192:	2001      	movs	r0, #1
 8001194:	bd10      	pop	{r4, pc}
 8001196:	46c0      	nop			; (mov r8, r8)

08001198 <__aeabi_dcmple>:
 8001198:	b510      	push	{r4, lr}
 800119a:	f000 f8ed 	bl	8001378 <__ledf2>
 800119e:	2800      	cmp	r0, #0
 80011a0:	dd01      	ble.n	80011a6 <__aeabi_dcmple+0xe>
 80011a2:	2000      	movs	r0, #0
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	2001      	movs	r0, #1
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)

080011ac <__aeabi_dcmpgt>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	f000 f87d 	bl	80012ac <__gedf2>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	dc01      	bgt.n	80011ba <__aeabi_dcmpgt+0xe>
 80011b6:	2000      	movs	r0, #0
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	2001      	movs	r0, #1
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	46c0      	nop			; (mov r8, r8)

080011c0 <__aeabi_dcmpge>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	f000 f873 	bl	80012ac <__gedf2>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	da01      	bge.n	80011ce <__aeabi_dcmpge+0xe>
 80011ca:	2000      	movs	r0, #0
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	2001      	movs	r0, #1
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)

080011d4 <__clzsi2>:
 80011d4:	211c      	movs	r1, #28
 80011d6:	2301      	movs	r3, #1
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	4298      	cmp	r0, r3
 80011dc:	d301      	bcc.n	80011e2 <__clzsi2+0xe>
 80011de:	0c00      	lsrs	r0, r0, #16
 80011e0:	3910      	subs	r1, #16
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	4298      	cmp	r0, r3
 80011e6:	d301      	bcc.n	80011ec <__clzsi2+0x18>
 80011e8:	0a00      	lsrs	r0, r0, #8
 80011ea:	3908      	subs	r1, #8
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d301      	bcc.n	80011f6 <__clzsi2+0x22>
 80011f2:	0900      	lsrs	r0, r0, #4
 80011f4:	3904      	subs	r1, #4
 80011f6:	a202      	add	r2, pc, #8	; (adr r2, 8001200 <__clzsi2+0x2c>)
 80011f8:	5c10      	ldrb	r0, [r2, r0]
 80011fa:	1840      	adds	r0, r0, r1
 80011fc:	4770      	bx	lr
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	02020304 	.word	0x02020304
 8001204:	01010101 	.word	0x01010101
	...

08001210 <__clzdi2>:
 8001210:	b510      	push	{r4, lr}
 8001212:	2900      	cmp	r1, #0
 8001214:	d103      	bne.n	800121e <__clzdi2+0xe>
 8001216:	f7ff ffdd 	bl	80011d4 <__clzsi2>
 800121a:	3020      	adds	r0, #32
 800121c:	e002      	b.n	8001224 <__clzdi2+0x14>
 800121e:	0008      	movs	r0, r1
 8001220:	f7ff ffd8 	bl	80011d4 <__clzsi2>
 8001224:	bd10      	pop	{r4, pc}
 8001226:	46c0      	nop			; (mov r8, r8)

08001228 <__eqdf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	464e      	mov	r6, r9
 800122c:	4645      	mov	r5, r8
 800122e:	46de      	mov	lr, fp
 8001230:	4657      	mov	r7, sl
 8001232:	4690      	mov	r8, r2
 8001234:	b5e0      	push	{r5, r6, r7, lr}
 8001236:	0017      	movs	r7, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	0005      	movs	r5, r0
 800123e:	4684      	mov	ip, r0
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <__eqdf2+0x80>)
 8001242:	030e      	lsls	r6, r1, #12
 8001244:	004c      	lsls	r4, r1, #1
 8001246:	4691      	mov	r9, r2
 8001248:	005a      	lsls	r2, r3, #1
 800124a:	0fdb      	lsrs	r3, r3, #31
 800124c:	469b      	mov	fp, r3
 800124e:	0b36      	lsrs	r6, r6, #12
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	4284      	cmp	r4, r0
 8001258:	d019      	beq.n	800128e <__eqdf2+0x66>
 800125a:	4282      	cmp	r2, r0
 800125c:	d010      	beq.n	8001280 <__eqdf2+0x58>
 800125e:	2001      	movs	r0, #1
 8001260:	4294      	cmp	r4, r2
 8001262:	d10e      	bne.n	8001282 <__eqdf2+0x5a>
 8001264:	454e      	cmp	r6, r9
 8001266:	d10c      	bne.n	8001282 <__eqdf2+0x5a>
 8001268:	2001      	movs	r0, #1
 800126a:	45c4      	cmp	ip, r8
 800126c:	d109      	bne.n	8001282 <__eqdf2+0x5a>
 800126e:	4559      	cmp	r1, fp
 8001270:	d017      	beq.n	80012a2 <__eqdf2+0x7a>
 8001272:	2c00      	cmp	r4, #0
 8001274:	d105      	bne.n	8001282 <__eqdf2+0x5a>
 8001276:	0030      	movs	r0, r6
 8001278:	4328      	orrs	r0, r5
 800127a:	1e43      	subs	r3, r0, #1
 800127c:	4198      	sbcs	r0, r3
 800127e:	e000      	b.n	8001282 <__eqdf2+0x5a>
 8001280:	2001      	movs	r0, #1
 8001282:	bcf0      	pop	{r4, r5, r6, r7}
 8001284:	46bb      	mov	fp, r7
 8001286:	46b2      	mov	sl, r6
 8001288:	46a9      	mov	r9, r5
 800128a:	46a0      	mov	r8, r4
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128e:	0033      	movs	r3, r6
 8001290:	2001      	movs	r0, #1
 8001292:	432b      	orrs	r3, r5
 8001294:	d1f5      	bne.n	8001282 <__eqdf2+0x5a>
 8001296:	42a2      	cmp	r2, r4
 8001298:	d1f3      	bne.n	8001282 <__eqdf2+0x5a>
 800129a:	464b      	mov	r3, r9
 800129c:	433b      	orrs	r3, r7
 800129e:	d1f0      	bne.n	8001282 <__eqdf2+0x5a>
 80012a0:	e7e2      	b.n	8001268 <__eqdf2+0x40>
 80012a2:	2000      	movs	r0, #0
 80012a4:	e7ed      	b.n	8001282 <__eqdf2+0x5a>
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	000007ff 	.word	0x000007ff

080012ac <__gedf2>:
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	4647      	mov	r7, r8
 80012b0:	46ce      	mov	lr, r9
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	0016      	movs	r6, r2
 80012b8:	031b      	lsls	r3, r3, #12
 80012ba:	0b1b      	lsrs	r3, r3, #12
 80012bc:	4d2d      	ldr	r5, [pc, #180]	; (8001374 <__gedf2+0xc8>)
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	b580      	push	{r7, lr}
 80012c4:	0043      	lsls	r3, r0, #1
 80012c6:	030f      	lsls	r7, r1, #12
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d021      	beq.n	800131e <__gedf2+0x72>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d013      	beq.n	8001306 <__gedf2+0x5a>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d122      	bne.n	8001328 <__gedf2+0x7c>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <__gedf2+0x42>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d022      	beq.n	8001334 <__gedf2+0x88>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d010      	beq.n	8001314 <__gedf2+0x68>
 80012f2:	4281      	cmp	r1, r0
 80012f4:	d022      	beq.n	800133c <__gedf2+0x90>
 80012f6:	2002      	movs	r0, #2
 80012f8:	3901      	subs	r1, #1
 80012fa:	4008      	ands	r0, r1
 80012fc:	3801      	subs	r0, #1
 80012fe:	bcc0      	pop	{r6, r7}
 8001300:	46b9      	mov	r9, r7
 8001302:	46b0      	mov	r8, r6
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	464d      	mov	r5, r9
 8001308:	432e      	orrs	r6, r5
 800130a:	d129      	bne.n	8001360 <__gedf2+0xb4>
 800130c:	2a00      	cmp	r2, #0
 800130e:	d1f0      	bne.n	80012f2 <__gedf2+0x46>
 8001310:	433c      	orrs	r4, r7
 8001312:	d1ee      	bne.n	80012f2 <__gedf2+0x46>
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f2      	bne.n	80012fe <__gedf2+0x52>
 8001318:	2001      	movs	r0, #1
 800131a:	4240      	negs	r0, r0
 800131c:	e7ef      	b.n	80012fe <__gedf2+0x52>
 800131e:	003d      	movs	r5, r7
 8001320:	4325      	orrs	r5, r4
 8001322:	d11d      	bne.n	8001360 <__gedf2+0xb4>
 8001324:	4293      	cmp	r3, r2
 8001326:	d0ee      	beq.n	8001306 <__gedf2+0x5a>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e2      	bne.n	80012f2 <__gedf2+0x46>
 800132c:	464c      	mov	r4, r9
 800132e:	4326      	orrs	r6, r4
 8001330:	d1df      	bne.n	80012f2 <__gedf2+0x46>
 8001332:	e7e0      	b.n	80012f6 <__gedf2+0x4a>
 8001334:	2000      	movs	r0, #0
 8001336:	2c00      	cmp	r4, #0
 8001338:	d0e1      	beq.n	80012fe <__gedf2+0x52>
 800133a:	e7dc      	b.n	80012f6 <__gedf2+0x4a>
 800133c:	429a      	cmp	r2, r3
 800133e:	dc0a      	bgt.n	8001356 <__gedf2+0xaa>
 8001340:	dbe8      	blt.n	8001314 <__gedf2+0x68>
 8001342:	454f      	cmp	r7, r9
 8001344:	d8d7      	bhi.n	80012f6 <__gedf2+0x4a>
 8001346:	d00e      	beq.n	8001366 <__gedf2+0xba>
 8001348:	2000      	movs	r0, #0
 800134a:	454f      	cmp	r7, r9
 800134c:	d2d7      	bcs.n	80012fe <__gedf2+0x52>
 800134e:	2900      	cmp	r1, #0
 8001350:	d0e2      	beq.n	8001318 <__gedf2+0x6c>
 8001352:	0008      	movs	r0, r1
 8001354:	e7d3      	b.n	80012fe <__gedf2+0x52>
 8001356:	4243      	negs	r3, r0
 8001358:	4158      	adcs	r0, r3
 800135a:	0040      	lsls	r0, r0, #1
 800135c:	3801      	subs	r0, #1
 800135e:	e7ce      	b.n	80012fe <__gedf2+0x52>
 8001360:	2002      	movs	r0, #2
 8001362:	4240      	negs	r0, r0
 8001364:	e7cb      	b.n	80012fe <__gedf2+0x52>
 8001366:	45c4      	cmp	ip, r8
 8001368:	d8c5      	bhi.n	80012f6 <__gedf2+0x4a>
 800136a:	2000      	movs	r0, #0
 800136c:	45c4      	cmp	ip, r8
 800136e:	d2c6      	bcs.n	80012fe <__gedf2+0x52>
 8001370:	e7ed      	b.n	800134e <__gedf2+0xa2>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	000007ff 	.word	0x000007ff

08001378 <__ledf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	4647      	mov	r7, r8
 800137c:	46ce      	mov	lr, r9
 800137e:	0004      	movs	r4, r0
 8001380:	0018      	movs	r0, r3
 8001382:	0016      	movs	r6, r2
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	0b1b      	lsrs	r3, r3, #12
 8001388:	4d2c      	ldr	r5, [pc, #176]	; (800143c <__ledf2+0xc4>)
 800138a:	004a      	lsls	r2, r1, #1
 800138c:	4699      	mov	r9, r3
 800138e:	b580      	push	{r7, lr}
 8001390:	0043      	lsls	r3, r0, #1
 8001392:	030f      	lsls	r7, r1, #12
 8001394:	46a4      	mov	ip, r4
 8001396:	46b0      	mov	r8, r6
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	0d52      	lsrs	r2, r2, #21
 800139c:	0fc9      	lsrs	r1, r1, #31
 800139e:	0d5b      	lsrs	r3, r3, #21
 80013a0:	0fc0      	lsrs	r0, r0, #31
 80013a2:	42aa      	cmp	r2, r5
 80013a4:	d00d      	beq.n	80013c2 <__ledf2+0x4a>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d010      	beq.n	80013cc <__ledf2+0x54>
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d127      	bne.n	80013fe <__ledf2+0x86>
 80013ae:	433c      	orrs	r4, r7
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <__ledf2+0x60>
 80013b4:	464d      	mov	r5, r9
 80013b6:	432e      	orrs	r6, r5
 80013b8:	d10e      	bne.n	80013d8 <__ledf2+0x60>
 80013ba:	2000      	movs	r0, #0
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d015      	beq.n	80013ec <__ledf2+0x74>
 80013c0:	e00e      	b.n	80013e0 <__ledf2+0x68>
 80013c2:	003d      	movs	r5, r7
 80013c4:	4325      	orrs	r5, r4
 80013c6:	d110      	bne.n	80013ea <__ledf2+0x72>
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d118      	bne.n	80013fe <__ledf2+0x86>
 80013cc:	464d      	mov	r5, r9
 80013ce:	432e      	orrs	r6, r5
 80013d0:	d10b      	bne.n	80013ea <__ledf2+0x72>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d102      	bne.n	80013dc <__ledf2+0x64>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	2c00      	cmp	r4, #0
 80013da:	d00b      	beq.n	80013f4 <__ledf2+0x7c>
 80013dc:	4281      	cmp	r1, r0
 80013de:	d014      	beq.n	800140a <__ledf2+0x92>
 80013e0:	2002      	movs	r0, #2
 80013e2:	3901      	subs	r1, #1
 80013e4:	4008      	ands	r0, r1
 80013e6:	3801      	subs	r0, #1
 80013e8:	e000      	b.n	80013ec <__ledf2+0x74>
 80013ea:	2002      	movs	r0, #2
 80013ec:	bcc0      	pop	{r6, r7}
 80013ee:	46b9      	mov	r9, r7
 80013f0:	46b0      	mov	r8, r6
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1f9      	bne.n	80013ec <__ledf2+0x74>
 80013f8:	2001      	movs	r0, #1
 80013fa:	4240      	negs	r0, r0
 80013fc:	e7f6      	b.n	80013ec <__ledf2+0x74>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ec      	bne.n	80013dc <__ledf2+0x64>
 8001402:	464c      	mov	r4, r9
 8001404:	4326      	orrs	r6, r4
 8001406:	d1e9      	bne.n	80013dc <__ledf2+0x64>
 8001408:	e7ea      	b.n	80013e0 <__ledf2+0x68>
 800140a:	429a      	cmp	r2, r3
 800140c:	dd04      	ble.n	8001418 <__ledf2+0xa0>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7e9      	b.n	80013ec <__ledf2+0x74>
 8001418:	429a      	cmp	r2, r3
 800141a:	dbeb      	blt.n	80013f4 <__ledf2+0x7c>
 800141c:	454f      	cmp	r7, r9
 800141e:	d8df      	bhi.n	80013e0 <__ledf2+0x68>
 8001420:	d006      	beq.n	8001430 <__ledf2+0xb8>
 8001422:	2000      	movs	r0, #0
 8001424:	454f      	cmp	r7, r9
 8001426:	d2e1      	bcs.n	80013ec <__ledf2+0x74>
 8001428:	2900      	cmp	r1, #0
 800142a:	d0e5      	beq.n	80013f8 <__ledf2+0x80>
 800142c:	0008      	movs	r0, r1
 800142e:	e7dd      	b.n	80013ec <__ledf2+0x74>
 8001430:	45c4      	cmp	ip, r8
 8001432:	d8d5      	bhi.n	80013e0 <__ledf2+0x68>
 8001434:	2000      	movs	r0, #0
 8001436:	45c4      	cmp	ip, r8
 8001438:	d2d8      	bcs.n	80013ec <__ledf2+0x74>
 800143a:	e7f5      	b.n	8001428 <__ledf2+0xb0>
 800143c:	000007ff 	.word	0x000007ff

08001440 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
 8001446:	0005      	movs	r5, r0
 8001448:	000c      	movs	r4, r1
 800144a:	0010      	movs	r0, r2
 800144c:	0019      	movs	r1, r3
 800144e:	1dbb      	adds	r3, r7, #6
 8001450:	1c2a      	adds	r2, r5, #0
 8001452:	801a      	strh	r2, [r3, #0]
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	1c22      	adds	r2, r4, #0
 8001458:	801a      	strh	r2, [r3, #0]
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	1c02      	adds	r2, r0, #0
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	003b      	movs	r3, r7
 8001462:	1c0a      	adds	r2, r1, #0
 8001464:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8001466:	1dbb      	adds	r3, r7, #6
 8001468:	8818      	ldrh	r0, [r3, #0]
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	8819      	ldrh	r1, [r3, #0]
 800146e:	1cbb      	adds	r3, r7, #2
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	003b      	movs	r3, r7
 8001474:	881c      	ldrh	r4, [r3, #0]
 8001476:	2318      	movs	r3, #24
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	0023      	movs	r3, r4
 8001480:	f000 fb30 	bl	8001ae4 <ST7735_FillRectangle>
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bdb0      	pop	{r4, r5, r7, pc}

0800148c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	0002      	movs	r2, r0
 8001494:	1dbb      	adds	r3, r7, #6
 8001496:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <fillScreen+0x30>)
 800149a:	2200      	movs	r2, #0
 800149c:	5e9a      	ldrsh	r2, [r3, r2]
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <fillScreen+0x34>)
 80014a0:	2100      	movs	r1, #0
 80014a2:	5e59      	ldrsh	r1, [r3, r1]
 80014a4:	1dbb      	adds	r3, r7, #6
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	000b      	movs	r3, r1
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ffc6 	bl	8001440 <fillRect>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000094 	.word	0x20000094
 80014c0:	20000096 	.word	0x20000096

080014c4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <ST7735_Select+0x18>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fd20 	bl	8002f14 <HAL_GPIO_WritePin>
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	50000400 	.word	0x50000400

080014e0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <ST7735_Unselect+0x18>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fd12 	bl	8002f14 <HAL_GPIO_WritePin>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	50000400 	.word	0x50000400

080014fc <ST7735_Reset>:

void ST7735_Reset()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <ST7735_Reset+0x28>)
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0018      	movs	r0, r3
 8001508:	f001 fd04 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800150c:	2005      	movs	r0, #5
 800150e:	f000 ff1b 	bl	8002348 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <ST7735_Reset+0x28>)
 8001514:	2201      	movs	r2, #1
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fcfb 	bl	8002f14 <HAL_GPIO_WritePin>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	50000800 	.word	0x50000800

08001528 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2200      	movs	r2, #0
 800153e:	0018      	movs	r0, r3
 8001540:	f001 fce8 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001544:	2301      	movs	r3, #1
 8001546:	425b      	negs	r3, r3
 8001548:	1df9      	adds	r1, r7, #7
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <ST7735_WriteCommand+0x34>)
 800154c:	2201      	movs	r2, #1
 800154e:	f002 fb45 	bl	8003bdc <HAL_SPI_Transmit>
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	200000fc 	.word	0x200000fc

08001560 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	0099      	lsls	r1, r3, #2
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	2201      	movs	r2, #1
 8001574:	0018      	movs	r0, r3
 8001576:	f001 fccd 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b29a      	uxth	r2, r3
 800157e:	2301      	movs	r3, #1
 8001580:	425b      	negs	r3, r3
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <ST7735_WriteData+0x34>)
 8001586:	f002 fb29 	bl	8003bdc <HAL_SPI_Transmit>
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	200000fc 	.word	0x200000fc

08001598 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	220f      	movs	r2, #15
 80015a8:	18ba      	adds	r2, r7, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80015ae:	e04a      	b.n	8001646 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	210b      	movs	r1, #11
 80015b8:	187a      	adds	r2, r7, r1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff ffb0 	bl	8001528 <ST7735_WriteCommand>

        numArgs = *addr++;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	200a      	movs	r0, #10
 80015d0:	183a      	adds	r2, r7, r0
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	230c      	movs	r3, #12
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	400a      	ands	r2, r1
 80015e4:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	183a      	adds	r2, r7, r0
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	217f      	movs	r1, #127	; 0x7f
 80015ee:	400a      	ands	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80015fa:	0004      	movs	r4, r0
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ffab 	bl	8001560 <ST7735_WriteData>
            addr += numArgs;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001614:	210c      	movs	r1, #12
 8001616:	187b      	adds	r3, r7, r1
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d013      	beq.n	8001646 <DisplayInit+0xae>
            ms = *addr++;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	187b      	adds	r3, r7, r1
 8001628:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d103      	bne.n	800163a <DisplayInit+0xa2>
 8001632:	187b      	adds	r3, r7, r1
 8001634:	22fa      	movs	r2, #250	; 0xfa
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800163a:	230c      	movs	r3, #12
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fe81 	bl	8002348 <HAL_Delay>
    while(numCommands--) {
 8001646:	220f      	movs	r2, #15
 8001648:	18bb      	adds	r3, r7, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	18ba      	adds	r2, r7, r2
 800164e:	1e59      	subs	r1, r3, #1
 8001650:	7011      	strb	r1, [r2, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ac      	bne.n	80015b0 <DisplayInit+0x18>
        }
    }
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b005      	add	sp, #20
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	0005      	movs	r5, r0
 8001668:	000c      	movs	r4, r1
 800166a:	0010      	movs	r0, r2
 800166c:	0019      	movs	r1, r3
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	1c2a      	adds	r2, r5, #0
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	1c22      	adds	r2, r4, #0
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	1d7b      	adds	r3, r7, #5
 800167c:	1c02      	adds	r2, r0, #0
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	1c0a      	adds	r2, r1, #0
 8001684:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001686:	202a      	movs	r0, #42	; 0x2a
 8001688:	f7ff ff4e 	bl	8001528 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800168c:	210c      	movs	r1, #12
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <ST7735_SetAddressWindow+0xa8>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	705a      	strb	r2, [r3, #1]
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	709a      	strb	r2, [r3, #2]
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <ST7735_SetAddressWindow+0xa8>)
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	1d7b      	adds	r3, r7, #5
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80016ba:	000c      	movs	r4, r1
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2104      	movs	r1, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff4d 	bl	8001560 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80016c6:	202b      	movs	r0, #43	; 0x2b
 80016c8:	f7ff ff2e 	bl	8001528 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <ST7735_SetAddressWindow+0xac>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	1dbb      	adds	r3, r7, #6
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	0021      	movs	r1, r4
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <ST7735_SetAddressWindow+0xac>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2104      	movs	r1, #4
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ff34 	bl	8001560 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80016f8:	202c      	movs	r0, #44	; 0x2c
 80016fa:	f7ff ff15 	bl	8001528 <ST7735_WriteCommand>
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bdb0      	pop	{r4, r5, r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	2000009b 	.word	0x2000009b
 800170c:	2000009c 	.word	0x2000009c

08001710 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	0002      	movs	r2, r0
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800171c:	f7ff fed2 	bl	80014c4 <ST7735_Select>
    ST7735_Reset();
 8001720:	f7ff feec 	bl	80014fc <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <ST7735_Init+0x50>)
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff ff36 	bl	8001598 <DisplayInit>
    DisplayInit(init_cmds2);
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <ST7735_Init+0x54>)
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ff32 	bl	8001598 <DisplayInit>
    DisplayInit(init_cmds3);
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <ST7735_Init+0x58>)
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff ff2e 	bl	8001598 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <ST7735_Init+0x5c>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <ST7735_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f811 	bl	8001774 <ST7735_SetRotation>
    ST7735_Unselect();
 8001752:	f7ff fec5 	bl	80014e0 <ST7735_Unselect>

}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	080049e8 	.word	0x080049e8
 8001764:	08004a20 	.word	0x08004a20
 8001768:	08004a30 	.word	0x08004a30
 800176c:	20000099 	.word	0x20000099
 8001770:	2000009a 	.word	0x2000009a

08001774 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2203      	movs	r2, #3
 800178e:	4013      	ands	r3, r2
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <ST7735_SetRotation+0xf8>)
 8001794:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001796:	4b35      	ldr	r3, [pc, #212]	; (800186c <ST7735_SetRotation+0xf8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d041      	beq.n	8001822 <ST7735_SetRotation+0xae>
 800179e:	dc53      	bgt.n	8001848 <ST7735_SetRotation+0xd4>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d02b      	beq.n	80017fc <ST7735_SetRotation+0x88>
 80017a4:	dc50      	bgt.n	8001848 <ST7735_SetRotation+0xd4>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ST7735_SetRotation+0x3c>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d013      	beq.n	80017d6 <ST7735_SetRotation+0x62>
 80017ae:	e04b      	b.n	8001848 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	22c0      	movs	r2, #192	; 0xc0
 80017b6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <ST7735_SetRotation+0xfc>)
 80017ba:	22a0      	movs	r2, #160	; 0xa0
 80017bc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <ST7735_SetRotation+0x100>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <ST7735_SetRotation+0x104>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <ST7735_SetRotation+0x108>)
 80017ca:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <ST7735_SetRotation+0x10c>)
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <ST7735_SetRotation+0x110>)
 80017d2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80017d4:	e038      	b.n	8001848 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	22a0      	movs	r2, #160	; 0xa0
 80017dc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <ST7735_SetRotation+0x100>)
 80017e0:	22a0      	movs	r2, #160	; 0xa0
 80017e2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <ST7735_SetRotation+0xfc>)
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <ST7735_SetRotation+0x104>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <ST7735_SetRotation+0x110>)
 80017f0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <ST7735_SetRotation+0x10c>)
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <ST7735_SetRotation+0x108>)
 80017f8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80017fa:	e025      	b.n	8001848 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <ST7735_SetRotation+0xfc>)
 8001806:	22a0      	movs	r2, #160	; 0xa0
 8001808:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <ST7735_SetRotation+0x100>)
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <ST7735_SetRotation+0x104>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <ST7735_SetRotation+0x108>)
 8001816:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <ST7735_SetRotation+0x10c>)
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <ST7735_SetRotation+0x110>)
 800181e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001820:	e012      	b.n	8001848 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2260      	movs	r2, #96	; 0x60
 8001828:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <ST7735_SetRotation+0x100>)
 800182c:	22a0      	movs	r2, #160	; 0xa0
 800182e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <ST7735_SetRotation+0xfc>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <ST7735_SetRotation+0x104>)
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <ST7735_SetRotation+0x110>)
 800183c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <ST7735_SetRotation+0x10c>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <ST7735_SetRotation+0x108>)
 8001844:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001846:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8001848:	f7ff fe3c 	bl	80014c4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800184c:	2036      	movs	r0, #54	; 0x36
 800184e:	f7ff fe6b 	bl	8001528 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2101      	movs	r1, #1
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fe81 	bl	8001560 <ST7735_WriteData>
  ST7735_Unselect();
 800185e:	f7ff fe3f 	bl	80014e0 <ST7735_Unselect>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000098 	.word	0x20000098
 8001870:	20000096 	.word	0x20000096
 8001874:	20000094 	.word	0x20000094
 8001878:	20000099 	.word	0x20000099
 800187c:	2000009b 	.word	0x2000009b
 8001880:	2000009a 	.word	0x2000009a
 8001884:	2000009c 	.word	0x2000009c

08001888 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001888:	b082      	sub	sp, #8
 800188a:	b5b0      	push	{r4, r5, r7, lr}
 800188c:	b088      	sub	sp, #32
 800188e:	af00      	add	r7, sp, #0
 8001890:	0004      	movs	r4, r0
 8001892:	0008      	movs	r0, r1
 8001894:	0011      	movs	r1, r2
 8001896:	2204      	movs	r2, #4
 8001898:	2530      	movs	r5, #48	; 0x30
 800189a:	1952      	adds	r2, r2, r5
 800189c:	19d2      	adds	r2, r2, r7
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	1c22      	adds	r2, r4, #0
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	1c02      	adds	r2, r0, #0
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	1cfb      	adds	r3, r7, #3
 80018ae:	1c0a      	adds	r2, r1, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80018b2:	1dbb      	adds	r3, r7, #6
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b2d9      	uxtb	r1, r3
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	2304      	movs	r3, #4
 80018c6:	195b      	adds	r3, r3, r5
 80018c8:	19db      	adds	r3, r3, r7
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b2dc      	uxtb	r4, r3
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	2304      	movs	r3, #4
 80018dc:	195b      	adds	r3, r3, r5
 80018de:	19db      	adds	r3, r3, r7
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	18d3      	adds	r3, r2, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	0022      	movs	r2, r4
 80018ec:	f7ff feb8 	bl	8001660 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	e053      	b.n	800199e <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 80018f6:	2304      	movs	r3, #4
 80018f8:	2030      	movs	r0, #48	; 0x30
 80018fa:	181b      	adds	r3, r3, r0
 80018fc:	19db      	adds	r3, r3, r7
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	1cfb      	adds	r3, r7, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3b20      	subs	r3, #32
 8001906:	2104      	movs	r1, #4
 8001908:	1809      	adds	r1, r1, r0
 800190a:	19c9      	adds	r1, r1, r7
 800190c:	7849      	ldrb	r1, [r1, #1]
 800190e:	434b      	muls	r3, r1
 8001910:	0019      	movs	r1, r3
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	18cb      	adds	r3, r1, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e030      	b.n	8001986 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	409a      	lsls	r2, r3
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4013      	ands	r3, r2
 8001930:	d013      	beq.n	800195a <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001932:	203c      	movs	r0, #60	; 0x3c
 8001934:	183b      	adds	r3, r7, r0
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	b2da      	uxtb	r2, r3
 800193e:	2110      	movs	r1, #16
 8001940:	187b      	adds	r3, r7, r1
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	183b      	adds	r3, r7, r0
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	187b      	adds	r3, r7, r1
 800194c:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2102      	movs	r1, #2
 8001952:	0018      	movs	r0, r3
 8001954:	f7ff fe04 	bl	8001560 <ST7735_WriteData>
 8001958:	e012      	b.n	8001980 <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800195a:	2040      	movs	r0, #64	; 0x40
 800195c:	183b      	adds	r3, r7, r0
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2da      	uxtb	r2, r3
 8001966:	210c      	movs	r1, #12
 8001968:	187b      	adds	r3, r7, r1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	183b      	adds	r3, r7, r0
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	187b      	adds	r3, r7, r1
 8001974:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2102      	movs	r1, #2
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff fdf0 	bl	8001560 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3301      	adds	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	2304      	movs	r3, #4
 8001988:	2230      	movs	r2, #48	; 0x30
 800198a:	189b      	adds	r3, r3, r2
 800198c:	19db      	adds	r3, r3, r7
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	001a      	movs	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4293      	cmp	r3, r2
 8001996:	d3c5      	bcc.n	8001924 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	2304      	movs	r3, #4
 80019a0:	2230      	movs	r2, #48	; 0x30
 80019a2:	189b      	adds	r3, r3, r2
 80019a4:	19db      	adds	r3, r3, r7
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	001a      	movs	r2, r3
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d3a2      	bcc.n	80018f6 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b008      	add	sp, #32
 80019b8:	bcb0      	pop	{r4, r5, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	b002      	add	sp, #8
 80019be:	4718      	bx	r3

080019c0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80019c0:	b082      	sub	sp, #8
 80019c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af04      	add	r7, sp, #16
 80019c8:	603a      	str	r2, [r7, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	2418      	movs	r4, #24
 80019ce:	1912      	adds	r2, r2, r4
 80019d0:	2408      	movs	r4, #8
 80019d2:	46a4      	mov	ip, r4
 80019d4:	44bc      	add	ip, r7
 80019d6:	4462      	add	r2, ip
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	1c02      	adds	r2, r0, #0
 80019de:	801a      	strh	r2, [r3, #0]
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	1c0a      	adds	r2, r1, #0
 80019e4:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 80019e6:	f7ff fd6d 	bl	80014c4 <ST7735_Select>

    while(*str) {
 80019ea:	e067      	b.n	8001abc <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 80019ec:	1dbb      	adds	r3, r7, #6
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2204      	movs	r2, #4
 80019f2:	2118      	movs	r1, #24
 80019f4:	1852      	adds	r2, r2, r1
 80019f6:	2008      	movs	r0, #8
 80019f8:	4684      	mov	ip, r0
 80019fa:	44bc      	add	ip, r7
 80019fc:	4462      	add	r2, ip
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	189b      	adds	r3, r3, r2
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <ST7735_WriteString+0x11c>)
 8001a04:	2000      	movs	r0, #0
 8001a06:	5e12      	ldrsh	r2, [r2, r0]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	db27      	blt.n	8001a5c <ST7735_WriteString+0x9c>
            x = 0;
 8001a0c:	1dbb      	adds	r3, r7, #6
 8001a0e:	2200      	movs	r2, #0
 8001a10:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8001a12:	2304      	movs	r3, #4
 8001a14:	0008      	movs	r0, r1
 8001a16:	185b      	adds	r3, r3, r1
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4694      	mov	ip, r2
 8001a1c:	44bc      	add	ip, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	b299      	uxth	r1, r3
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	1d3a      	adds	r2, r7, #4
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	188a      	adds	r2, r1, r2
 8001a2c:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	1812      	adds	r2, r2, r0
 8001a36:	2108      	movs	r1, #8
 8001a38:	468c      	mov	ip, r1
 8001a3a:	44bc      	add	ip, r7
 8001a3c:	4462      	add	r2, ip
 8001a3e:	7852      	ldrb	r2, [r2, #1]
 8001a40:	189b      	adds	r3, r3, r2
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <ST7735_WriteString+0x120>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	5e52      	ldrsh	r2, [r2, r1]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	da3c      	bge.n	8001ac6 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d103      	bne.n	8001a5c <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	603b      	str	r3, [r7, #0]
                continue;
 8001a5a:	e02f      	b.n	8001abc <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	781d      	ldrb	r5, [r3, #0]
 8001a60:	2304      	movs	r3, #4
 8001a62:	2618      	movs	r6, #24
 8001a64:	199b      	adds	r3, r3, r6
 8001a66:	2208      	movs	r2, #8
 8001a68:	4694      	mov	ip, r2
 8001a6a:	44bc      	add	ip, r7
 8001a6c:	4463      	add	r3, ip
 8001a6e:	1d3a      	adds	r2, r7, #4
 8001a70:	8814      	ldrh	r4, [r2, #0]
 8001a72:	1dba      	adds	r2, r7, #6
 8001a74:	8810      	ldrh	r0, [r2, #0]
 8001a76:	2228      	movs	r2, #40	; 0x28
 8001a78:	2108      	movs	r1, #8
 8001a7a:	1852      	adds	r2, r2, r1
 8001a7c:	19d2      	adds	r2, r2, r7
 8001a7e:	8812      	ldrh	r2, [r2, #0]
 8001a80:	9202      	str	r2, [sp, #8]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	1852      	adds	r2, r2, r1
 8001a86:	19d2      	adds	r2, r2, r7
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	466a      	mov	r2, sp
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	002a      	movs	r2, r5
 8001a96:	0021      	movs	r1, r4
 8001a98:	f7ff fef6 	bl	8001888 <ST7735_WriteChar>
        x += font.width;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	199b      	adds	r3, r3, r6
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	4694      	mov	ip, r2
 8001aa4:	44bc      	add	ip, r7
 8001aa6:	4463      	add	r3, ip
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	1dba      	adds	r2, r7, #6
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	188a      	adds	r2, r1, r2
 8001ab4:	801a      	strh	r2, [r3, #0]
        str++;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d193      	bne.n	80019ec <ST7735_WriteString+0x2c>
 8001ac4:	e000      	b.n	8001ac8 <ST7735_WriteString+0x108>
                break;
 8001ac6:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 8001ac8:	f7ff fd0a 	bl	80014e0 <ST7735_Unselect>
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b003      	add	sp, #12
 8001ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ad4:	bc08      	pop	{r3}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	4718      	bx	r3
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20000094 	.word	0x20000094
 8001ae0:	20000096 	.word	0x20000096

08001ae4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	0005      	movs	r5, r0
 8001aec:	000c      	movs	r4, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	1c2a      	adds	r2, r5, #0
 8001af6:	801a      	strh	r2, [r3, #0]
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	1c22      	adds	r2, r4, #0
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	1c02      	adds	r2, r0, #0
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	003b      	movs	r3, r7
 8001b06:	1c0a      	adds	r2, r1, #0
 8001b08:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4a4a      	ldr	r2, [pc, #296]	; (8001c38 <ST7735_FillRectangle+0x154>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	5e52      	ldrsh	r2, [r2, r1]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	db00      	blt.n	8001b1a <ST7735_FillRectangle+0x36>
 8001b18:	e089      	b.n	8001c2e <ST7735_FillRectangle+0x14a>
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	4a47      	ldr	r2, [pc, #284]	; (8001c3c <ST7735_FillRectangle+0x158>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	5e52      	ldrsh	r2, [r2, r1]
 8001b24:	4293      	cmp	r3, r2
 8001b26:	db00      	blt.n	8001b2a <ST7735_FillRectangle+0x46>
 8001b28:	e081      	b.n	8001c2e <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	1cbb      	adds	r3, r7, #2
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <ST7735_FillRectangle+0x154>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	5e52      	ldrsh	r2, [r2, r1]
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	dd08      	ble.n	8001b50 <ST7735_FillRectangle+0x6c>
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <ST7735_FillRectangle+0x154>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	5e9b      	ldrsh	r3, [r3, r2]
 8001b44:	b299      	uxth	r1, r3
 8001b46:	1cbb      	adds	r3, r7, #2
 8001b48:	1dba      	adds	r2, r7, #6
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	003b      	movs	r3, r7
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	18d3      	adds	r3, r2, r3
 8001b5a:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <ST7735_FillRectangle+0x158>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5e52      	ldrsh	r2, [r2, r1]
 8001b60:	4293      	cmp	r3, r2
 8001b62:	dd08      	ble.n	8001b76 <ST7735_FillRectangle+0x92>
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <ST7735_FillRectangle+0x158>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	5e9b      	ldrsh	r3, [r3, r2]
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	003b      	movs	r3, r7
 8001b6e:	1d3a      	adds	r2, r7, #4
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	1a8a      	subs	r2, r1, r2
 8001b74:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001b76:	f7ff fca5 	bl	80014c4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b7a:	1dbb      	adds	r3, r7, #6
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b2d8      	uxtb	r0, r3
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b2d9      	uxtb	r1, r3
 8001b86:	1dbb      	adds	r3, r7, #6
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	1cbb      	adds	r3, r7, #2
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	18d3      	adds	r3, r2, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2dc      	uxtb	r4, r3
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	003b      	movs	r3, r7
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	0022      	movs	r2, r4
 8001bb0:	f7ff fd56 	bl	8001660 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	200c      	movs	r0, #12
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	183b      	adds	r3, r7, r0
 8001bce:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	0099      	lsls	r1, r3, #2
 8001bd4:	23a0      	movs	r3, #160	; 0xa0
 8001bd6:	05db      	lsls	r3, r3, #23
 8001bd8:	2201      	movs	r2, #1
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f001 f99a 	bl	8002f14 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	003a      	movs	r2, r7
 8001be4:	8812      	ldrh	r2, [r2, #0]
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	e01a      	b.n	8001c20 <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	1cba      	adds	r2, r7, #2
 8001bee:	8812      	ldrh	r2, [r2, #0]
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e00c      	b.n	8001c0e <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	18b9      	adds	r1, r7, r2
 8001bfc:	4810      	ldr	r0, [pc, #64]	; (8001c40 <ST7735_FillRectangle+0x15c>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f001 ffec 	bl	8003bdc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001c04:	1dbb      	adds	r3, r7, #6
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	1dbb      	adds	r3, r7, #6
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ee      	bne.n	8001bf4 <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e0      	bne.n	8001bea <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 8001c28:	f7ff fc5a 	bl	80014e0 <ST7735_Unselect>
 8001c2c:	e000      	b.n	8001c30 <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 8001c2e:	46c0      	nop			; (mov r8, r8)
}
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000094 	.word	0x20000094
 8001c3c:	20000096 	.word	0x20000096
 8001c40:	200000fc 	.word	0x200000fc

08001c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4a:	f000 fb0d 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4e:	f000 f86d 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c52:	f000 f95d 	bl	8001f10 <MX_GPIO_Init>
  MX_ADC_Init();
 8001c56:	f000 f8bd 	bl	8001dd4 <MX_ADC_Init>
  MX_SPI1_Init();
 8001c5a:	f000 f921 	bl	8001ea0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fd56 	bl	8001710 <ST7735_Init>
  fillScreen(CYAN);
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <main+0xc0>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff fc10 	bl	800148c <fillScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	          HAL_ADC_Start(&hadc);
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <main+0xc4>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fd02 	bl	8002678 <HAL_ADC_Start>
	          if(  HAL_ADC_PollForConversion(&hadc, 100)==HAL_OK)
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <main+0xc4>)
 8001c76:	2164      	movs	r1, #100	; 0x64
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fd51 	bl	8002720 <HAL_ADC_PollForConversion>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d1f4      	bne.n	8001c6c <main+0x28>
	          {
				  adc_res=HAL_ADC_GetValue(&hadc);
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <main+0xc4>)
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 fde7 	bl	8002858 <HAL_ADC_GetValue>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <main+0xc8>)
 8001c8e:	601a      	str	r2, [r3, #0]
				  tcelsius=100.558-0.187364*adc_res;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <main+0xc8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff fa39 	bl	800110c <__aeabi_ui2d>
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <main+0xcc>)
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <main+0xd0>)
 8001c9e:	f7fe fc01 	bl	80004a4 <__aeabi_dmul>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <main+0xd4>)
 8001ca8:	491c      	ldr	r1, [pc, #112]	; (8001d1c <main+0xd8>)
 8001caa:	f7fe fe67 	bl	800097c <__aeabi_dsub>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	f7fe fb0b 	bl	80002d0 <__aeabi_d2uiz>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <main+0xdc>)
 8001cbe:	601a      	str	r2, [r3, #0]
				  ST7735_SetRotation(3);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7ff fd57 	bl	8001774 <ST7735_SetRotation>
				  char buffer[16];
				  if(tcelsius<=45&&tcelsius>=25)
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <main+0xdc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b2d      	cmp	r3, #45	; 0x2d
 8001ccc:	d8ce      	bhi.n	8001c6c <main+0x28>
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <main+0xdc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b18      	cmp	r3, #24
 8001cd4:	d9ca      	bls.n	8001c6c <main+0x28>
				  {
				  sprintf(buffer, "Pixel    Tempnow: %d'C", tcelsius);
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <main+0xdc>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4912      	ldr	r1, [pc, #72]	; (8001d24 <main+0xe0>)
 8001cdc:	003b      	movs	r3, r7
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f002 f9e0 	bl	80040a4 <siprintf>
				  ST7735_WriteString(1, 1, &buffer, Font_16x26, BLACK ,CYAN);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <main+0xe4>)
 8001ce6:	0038      	movs	r0, r7
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <main+0xc0>)
 8001cea:	9202      	str	r2, [sp, #8]
 8001cec:	2200      	movs	r2, #0
 8001cee:	9201      	str	r2, [sp, #4]
 8001cf0:	466a      	mov	r2, sp
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	6011      	str	r1, [r2, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff fe5f 	bl	80019c0 <ST7735_WriteString>
	          HAL_ADC_Start(&hadc);
 8001d02:	e7b3      	b.n	8001c6c <main+0x28>
 8001d04:	000007ff 	.word	0x000007ff
 8001d08:	200000a0 	.word	0x200000a0
 8001d0c:	20000154 	.word	0x20000154
 8001d10:	26394fad 	.word	0x26394fad
 8001d14:	3fc7fb8b 	.word	0x3fc7fb8b
 8001d18:	45a1cac1 	.word	0x45a1cac1
 8001d1c:	405923b6 	.word	0x405923b6
 8001d20:	20000158 	.word	0x20000158
 8001d24:	08004990 	.word	0x08004990
 8001d28:	20000000 	.word	0x20000000

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b095      	sub	sp, #84	; 0x54
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	2418      	movs	r4, #24
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	2338      	movs	r3, #56	; 0x38
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f002 f9a9 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	0018      	movs	r0, r3
 8001d46:	2314      	movs	r3, #20
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f002 f9a2 	bl	8004094 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <SystemClock_Config+0xa0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <SystemClock_Config+0xa4>)
 8001d56:	401a      	ands	r2, r3
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <SystemClock_Config+0xa0>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0109      	lsls	r1, r1, #4
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d62:	0021      	movs	r1, r4
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2210      	movs	r2, #16
 8001d68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	22a0      	movs	r2, #160	; 0xa0
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	f001 f8e2 	bl	8002f50 <HAL_RCC_OscConfig>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001d90:	f000 f952 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	220f      	movs	r2, #15
 8001d98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2100      	movs	r1, #0
 8001db6:	0018      	movs	r0, r3
 8001db8:	f001 fc8e 	bl	80036d8 <HAL_RCC_ClockConfig>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dc0:	f000 f93a 	bl	8002038 <Error_Handler>
  }
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b015      	add	sp, #84	; 0x54
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	ffffe7ff 	.word	0xffffe7ff

08001dd4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dda:	003b      	movs	r3, r7
 8001ddc:	0018      	movs	r0, r3
 8001dde:	2308      	movs	r3, #8
 8001de0:	001a      	movs	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f002 f956 	bl	8004094 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001dea:	4a2b      	ldr	r2, [pc, #172]	; (8001e98 <MX_ADC_Init+0xc4>)
 8001dec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001df6:	22c0      	movs	r2, #192	; 0xc0
 8001df8:	0612      	lsls	r2, r2, #24
 8001dfa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e16:	2220      	movs	r2, #32
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e1e:	2221      	movs	r2, #33	; 0x21
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e2c:	22c2      	movs	r2, #194	; 0xc2
 8001e2e:	32ff      	adds	r2, #255	; 0xff
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e34:	222c      	movs	r2, #44	; 0x2c
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 fa98 	bl	8002390 <HAL_ADC_Init>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001e64:	f000 f8e8 	bl	8002038 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e68:	003b      	movs	r3, r7
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <MX_ADC_Init+0xc8>)
 8001e6c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e6e:	003b      	movs	r3, r7
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0152      	lsls	r2, r2, #5
 8001e74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e76:	003a      	movs	r2, r7
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_ADC_Init+0xc0>)
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fcf7 	bl	8002870 <HAL_ADC_ConfigChannel>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001e86:	f000 f8d7 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	200000a0 	.word	0x200000a0
 8001e98:	40012400 	.word	0x40012400
 8001e9c:	04000002 	.word	0x04000002

08001ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <MX_SPI1_Init+0x6c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eac:	2282      	movs	r2, #130	; 0x82
 8001eae:	0052      	lsls	r2, r2, #1
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 fdde 	bl	8003ab4 <HAL_SPI_Init>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d001      	beq.n	8001f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001efc:	f000 f89c 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	200000fc 	.word	0x200000fc
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b08b      	sub	sp, #44	; 0x2c
 8001f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	2414      	movs	r4, #20
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	2314      	movs	r3, #20
 8001f1e:	001a      	movs	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	f002 f8b7 	bl	8004094 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	2204      	movs	r2, #4
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f74:	2102      	movs	r1, #2
 8001f76:	430a      	orrs	r2, r1
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <MX_GPIO_Init+0x11c>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <MX_GPIO_Init+0x120>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 ffc1 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	0099      	lsls	r1, r3, #2
 8001f96:	23a0      	movs	r3, #160	; 0xa0
 8001f98:	05db      	lsls	r3, r3, #23
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 ffb9 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <MX_GPIO_Init+0x124>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2140      	movs	r1, #64	; 0x40
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 ffb3 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	193b      	adds	r3, r7, r4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <MX_GPIO_Init+0x120>)
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f000 fe2b 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd2:	0021      	movs	r1, r4
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	000c      	movs	r4, r1
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	193a      	adds	r2, r7, r4
 8001ff2:	23a0      	movs	r3, #160	; 0xa0
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 fe15 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ffe:	0021      	movs	r1, r4
 8002000:	187b      	adds	r3, r7, r1
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	187b      	adds	r3, r7, r1
 800201a:	4a06      	ldr	r2, [pc, #24]	; (8002034 <MX_GPIO_Init+0x124>)
 800201c:	0019      	movs	r1, r3
 800201e:	0010      	movs	r0, r2
 8002020:	f000 fe02 	bl	8002c28 <HAL_GPIO_Init>

}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b00b      	add	sp, #44	; 0x2c
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	50000800 	.word	0x50000800
 8002034:	50000400 	.word	0x50000400

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>
	...

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_MspInit+0x24>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x24>)
 800204e:	2101      	movs	r1, #1
 8002050:	430a      	orrs	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_MspInit+0x24>)
 8002056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_MspInit+0x24>)
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	0549      	lsls	r1, r1, #21
 800205e:	430a      	orrs	r2, r1
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	240c      	movs	r4, #12
 8002076:	193b      	adds	r3, r7, r4
 8002078:	0018      	movs	r0, r3
 800207a:	2314      	movs	r3, #20
 800207c:	001a      	movs	r2, r3
 800207e:	2100      	movs	r1, #0
 8002080:	f002 f808 	bl	8004094 <memset>
  if(hadc->Instance==ADC1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_ADC_MspInit+0x70>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d122      	bne.n	80020d4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_ADC_MspInit+0x74>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_ADC_MspInit+0x74>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0089      	lsls	r1, r1, #2
 8002098:	430a      	orrs	r2, r1
 800209a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_ADC_MspInit+0x74>)
 800209e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_ADC_MspInit+0x74>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_ADC_MspInit+0x74>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2201      	movs	r2, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ba:	193b      	adds	r3, r7, r4
 80020bc:	2203      	movs	r2, #3
 80020be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	193a      	adds	r2, r7, r4
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	0011      	movs	r1, r2
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 fdaa 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b009      	add	sp, #36	; 0x24
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	40012400 	.word	0x40012400
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	240c      	movs	r4, #12
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	0018      	movs	r0, r3
 80020f2:	2314      	movs	r3, #20
 80020f4:	001a      	movs	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f001 ffcc 	bl	8004094 <memset>
  if(hspi->Instance==SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d129      	bne.n	800215a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_SPI_MspInit+0x84>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0x84>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0149      	lsls	r1, r1, #5
 8002110:	430a      	orrs	r2, r1
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_SPI_MspInit+0x84>)
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_SPI_MspInit+0x84>)
 800211a:	2101      	movs	r1, #1
 800211c:	430a      	orrs	r2, r1
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_SPI_MspInit+0x84>)
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800212c:	0021      	movs	r1, r4
 800212e:	187b      	adds	r3, r7, r1
 8002130:	22e0      	movs	r2, #224	; 0xe0
 8002132:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2202      	movs	r2, #2
 8002138:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	187b      	adds	r3, r7, r1
 8002142:	2203      	movs	r2, #3
 8002144:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002146:	187b      	adds	r3, r7, r1
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	187a      	adds	r2, r7, r1
 800214e:	23a0      	movs	r3, #160	; 0xa0
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	0011      	movs	r1, r2
 8002154:	0018      	movs	r0, r3
 8002156:	f000 fd67 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b009      	add	sp, #36	; 0x24
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	40013000 	.word	0x40013000
 8002168:	40021000 	.word	0x40021000

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002190:	f000 f8be 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	18d3      	adds	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f001 ff38 	bl	8004040 <__errno>
 80021d0:	0003      	movs	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	425b      	negs	r3, r3
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	18d2      	adds	r2, r2, r3
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b006      	add	sp, #24
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20002000 	.word	0x20002000
 80021fc:	00000400 	.word	0x00000400
 8002200:	2000015c 	.word	0x2000015c
 8002204:	20000178 	.word	0x20000178

08002208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002216:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002218:	f7ff fff6 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <LoopForever+0x6>)
  ldr r1, =_edata
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <LoopForever+0xe>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002224:	e002      	b.n	800222c <LoopCopyDataInit>

08002226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222a:	3304      	adds	r3, #4

0800222c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800222c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002230:	d3f9      	bcc.n	8002226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002234:	4c0a      	ldr	r4, [pc, #40]	; (8002260 <LoopForever+0x16>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002238:	e001      	b.n	800223e <LoopFillZerobss>

0800223a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800223c:	3204      	adds	r2, #4

0800223e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002240:	d3fb      	bcc.n	800223a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002242:	f001 ff03 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff fcfd 	bl	8001c44 <main>

0800224a <LoopForever>:

LoopForever:
    b LoopForever
 800224a:	e7fe      	b.n	800224a <LoopForever>
  ldr   r0, =_estack
 800224c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002258:	08005e04 	.word	0x08005e04
  ldr r2, =_sbss
 800225c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002260:	20000174 	.word	0x20000174

08002264 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC1_COMP_IRQHandler>
	...

08002268 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_Init+0x3c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_Init+0x3c>)
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f811 	bl	80022a8 <HAL_InitTick>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d003      	beq.n	8002292 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e001      	b.n	8002296 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002292:	f7ff fed7 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_InitTick+0x5c>)
 80022b2:	681c      	ldr	r4, [r3, #0]
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_InitTick+0x60>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	0019      	movs	r1, r3
 80022ba:	23fa      	movs	r3, #250	; 0xfa
 80022bc:	0098      	lsls	r0, r3, #2
 80022be:	f7fd ff2d 	bl	800011c <__udivsi3>
 80022c2:	0003      	movs	r3, r0
 80022c4:	0019      	movs	r1, r3
 80022c6:	0020      	movs	r0, r4
 80022c8:	f7fd ff28 	bl	800011c <__udivsi3>
 80022cc:	0003      	movs	r3, r0
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fc9d 	bl	8002c0e <HAL_SYSTICK_Config>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e00f      	b.n	80022fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d80b      	bhi.n	80022fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2301      	movs	r3, #1
 80022e6:	425b      	negs	r3, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fc7a 	bl	8002be4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_InitTick+0x64>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b003      	add	sp, #12
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	20000008 	.word	0x20000008
 8002308:	20000010 	.word	0x20000010
 800230c:	2000000c 	.word	0x2000000c

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_IncTick+0x1c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	001a      	movs	r2, r3
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_IncTick+0x20>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	18d2      	adds	r2, r2, r3
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_IncTick+0x20>)
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	20000010 	.word	0x20000010
 8002330:	20000160 	.word	0x20000160

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_GetTick+0x10>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000160 	.word	0x20000160

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fff0 	bl	8002334 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3301      	adds	r3, #1
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	001a      	movs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	189b      	adds	r3, r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	f7ff ffe0 	bl	8002334 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	20000010 	.word	0x20000010

08002390 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e159      	b.n	8002656 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2250      	movs	r2, #80	; 0x50
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fe56 	bl	800206c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	2210      	movs	r2, #16
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d005      	beq.n	80023d8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2204      	movs	r2, #4
 80023d4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80023d6:	d00b      	beq.n	80023f0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2210      	movs	r2, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2250      	movs	r2, #80	; 0x50
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e132      	b.n	8002656 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	4a9a      	ldr	r2, [pc, #616]	; (8002660 <HAL_ADC_Init+0x2d0>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	2202      	movs	r2, #2
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_ADC_Init+0x90>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ADC_Init+0x90>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_ADC_Init+0x92>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d149      	bne.n	80024ba <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	23c0      	movs	r3, #192	; 0xc0
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	429a      	cmp	r2, r3
 8002430:	d00b      	beq.n	800244a <HAL_ADC_Init+0xba>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	429a      	cmp	r2, r3
 800243c:	d005      	beq.n	800244a <HAL_ADC_Init+0xba>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	429a      	cmp	r2, r3
 8002448:	d111      	bne.n	800246e <HAL_ADC_Init+0xde>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	0892      	lsrs	r2, r2, #2
 8002458:	611a      	str	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6919      	ldr	r1, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	e014      	b.n	8002498 <HAL_ADC_Init+0x108>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	0892      	lsrs	r2, r2, #2
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	4b79      	ldr	r3, [pc, #484]	; (8002664 <HAL_ADC_Init+0x2d4>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_ADC_Init+0x2d4>)
 8002484:	4978      	ldr	r1, [pc, #480]	; (8002668 <HAL_ADC_Init+0x2d8>)
 8002486:	400a      	ands	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_ADC_Init+0x2d4>)
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_ADC_Init+0x2d4>)
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2118      	movs	r1, #24
 80024a4:	438a      	bics	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80024ba:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_ADC_Init+0x2d4>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_ADC_Init+0x2d4>)
 80024c0:	496a      	ldr	r1, [pc, #424]	; (800266c <HAL_ADC_Init+0x2dc>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_ADC_Init+0x2d4>)
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	065a      	lsls	r2, r3, #25
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_ADC_Init+0x2d4>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	4013      	ands	r3, r2
 80024e2:	d108      	bne.n	80024f6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0549      	lsls	r1, r1, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	495b      	ldr	r1, [pc, #364]	; (8002670 <HAL_ADC_Init+0x2e0>)
 8002502:	400a      	ands	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68d9      	ldr	r1, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d101      	bne.n	800251c <HAL_ADC_Init+0x18c>
 8002518:	2304      	movs	r3, #4
 800251a:	e000      	b.n	800251e <HAL_ADC_Init+0x18e>
 800251c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800251e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2020      	movs	r0, #32
 8002524:	5c1b      	ldrb	r3, [r3, r0]
 8002526:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002528:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	202c      	movs	r0, #44	; 0x2c
 800252e:	5c1b      	ldrb	r3, [r3, r0]
 8002530:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002532:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002538:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002540:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002548:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002556:	23c2      	movs	r3, #194	; 0xc2
 8002558:	33ff      	adds	r3, #255	; 0xff
 800255a:	429a      	cmp	r2, r3
 800255c:	d00b      	beq.n	8002576 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d11a      	bne.n	80025b6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0249      	lsls	r1, r1, #9
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e00b      	b.n	80025b6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	2220      	movs	r2, #32
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	2201      	movs	r2, #1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11f      	bne.n	80025fe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	492a      	ldr	r1, [pc, #168]	; (8002674 <HAL_ADC_Init+0x2e4>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025dc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80025e2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	611a      	str	r2, [r3, #16]
 80025fc:	e00e      	b.n	800261c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2201      	movs	r2, #1
 8002606:	4013      	ands	r3, r2
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2101      	movs	r1, #1
 8002618:	438a      	bics	r2, r1
 800261a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2107      	movs	r1, #7
 8002628:	438a      	bics	r2, r1
 800262a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	2203      	movs	r2, #3
 800264a:	4393      	bics	r3, r2
 800264c:	2201      	movs	r2, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	fffffefd 	.word	0xfffffefd
 8002664:	40012708 	.word	0x40012708
 8002668:	ffc3ffff 	.word	0xffc3ffff
 800266c:	fdffffff 	.word	0xfdffffff
 8002670:	fffe0219 	.word	0xfffe0219
 8002674:	fffffc03 	.word	0xfffffc03

08002678 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	d138      	bne.n	8002706 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2250      	movs	r2, #80	; 0x50
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Start+0x2a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e038      	b.n	8002714 <HAL_ADC_Start+0x9c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2250      	movs	r2, #80	; 0x50
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d007      	beq.n	80026c2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026b2:	230f      	movs	r3, #15
 80026b4:	18fc      	adds	r4, r7, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f979 	bl	80029b0 <ADC_Enable>
 80026be:	0003      	movs	r3, r0
 80026c0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026c2:	230f      	movs	r3, #15
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d120      	bne.n	800270e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_ADC_Start+0xa4>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2250      	movs	r2, #80	; 0x50
 80026e8:	2100      	movs	r1, #0
 80026ea:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	221c      	movs	r2, #28
 80026f2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2104      	movs	r1, #4
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e003      	b.n	800270e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800270e:	230f      	movs	r3, #15
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b005      	add	sp, #20
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	fffff0fe 	.word	0xfffff0fe

08002720 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d102      	bne.n	8002740 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800273a:	2308      	movs	r3, #8
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e014      	b.n	800276a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10b      	bne.n	8002766 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	2220      	movs	r2, #32
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2250      	movs	r2, #80	; 0x50
 800275e:	2100      	movs	r1, #0
 8002760:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e072      	b.n	800284c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002766:	230c      	movs	r3, #12
 8002768:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800276a:	f7ff fde3 	bl	8002334 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002772:	e01f      	b.n	80027b4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	d01c      	beq.n	80027b4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_ADC_PollForConversion+0x70>
 8002780:	f7ff fdd8 	bl	8002334 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d211      	bcs.n	80027b4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	d10b      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	2204      	movs	r2, #4
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2250      	movs	r2, #80	; 0x50
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e04b      	b.n	800284c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	d0d9      	beq.n	8002774 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	23c0      	movs	r3, #192	; 0xc0
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d12e      	bne.n	800283a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d129      	bne.n	800283a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2208      	movs	r2, #8
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d122      	bne.n	800283a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d110      	bne.n	8002822 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	210c      	movs	r1, #12
 800280c:	438a      	bics	r2, r1
 800280e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_ADC_PollForConversion+0x134>)
 8002816:	4013      	ands	r3, r2
 8002818:	2201      	movs	r2, #1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
 8002820:	e00b      	b.n	800283a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	2220      	movs	r2, #32
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	2201      	movs	r2, #1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	220c      	movs	r2, #12
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bd80      	pop	{r7, pc}
 8002854:	fffffefe 	.word	0xfffffefe

08002858 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2250      	movs	r2, #80	; 0x50
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x18>
 8002884:	2302      	movs	r3, #2
 8002886:	e085      	b.n	8002994 <HAL_ADC_ConfigChannel+0x124>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2250      	movs	r2, #80	; 0x50
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	d00b      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2220      	movs	r2, #32
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2250      	movs	r2, #80	; 0x50
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e06f      	b.n	8002994 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a38      	ldr	r2, [pc, #224]	; (800299c <HAL_ADC_ConfigChannel+0x12c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d035      	beq.n	800292a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	035b      	lsls	r3, r3, #13
 80028ca:	0b5a      	lsrs	r2, r3, #13
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	02db      	lsls	r3, r3, #11
 80028dc:	4013      	ands	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	0409      	lsls	r1, r1, #16
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80028ee:	200a      	movs	r0, #10
 80028f0:	f000 f8c6 	bl	8002a80 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	d006      	beq.n	800290e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	03c9      	lsls	r1, r1, #15
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	025b      	lsls	r3, r3, #9
 8002916:	4013      	ands	r3, r2
 8002918:	d037      	beq.n	800298a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0449      	lsls	r1, r1, #17
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e02f      	b.n	800298a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	035b      	lsls	r3, r3, #13
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	43d9      	mvns	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	400a      	ands	r2, r1
 8002940:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	02db      	lsls	r3, r3, #11
 800294a:	4013      	ands	r3, r2
 800294c:	d005      	beq.n	800295a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002954:	4913      	ldr	r1, [pc, #76]	; (80029a4 <HAL_ADC_ConfigChannel+0x134>)
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	4013      	ands	r3, r2
 8002964:	d005      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_ADC_ConfigChannel+0x138>)
 800296e:	400a      	ands	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	025b      	lsls	r3, r3, #9
 800297a:	4013      	ands	r3, r2
 800297c:	d005      	beq.n	800298a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_ADC_ConfigChannel+0x130>)
 8002984:	4909      	ldr	r1, [pc, #36]	; (80029ac <HAL_ADC_ConfigChannel+0x13c>)
 8002986:	400a      	ands	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2250      	movs	r2, #80	; 0x50
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00001001 	.word	0x00001001
 80029a0:	40012708 	.word	0x40012708
 80029a4:	ff7fffff 	.word	0xff7fffff
 80029a8:	ffbfffff 	.word	0xffbfffff
 80029ac:	feffffff 	.word	0xfeffffff

080029b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2203      	movs	r2, #3
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <ADC_Enable+0x2c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <ADC_Enable+0x2c>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <ADC_Enable+0x2e>
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d146      	bne.n	8002a70 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <ADC_Enable+0xcc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	2210      	movs	r2, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	2201      	movs	r2, #1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e033      	b.n	8002a72 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 f830 	bl	8002a80 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a20:	f7ff fc88 	bl	8002334 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a28:	e01b      	b.n	8002a62 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2a:	f7ff fc83 	bl	8002334 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b0a      	cmp	r3, #10
 8002a36:	d914      	bls.n	8002a62 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d00d      	beq.n	8002a62 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	2201      	movs	r2, #1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d1dc      	bne.n	8002a2a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	80000017 	.word	0x80000017

08002a80 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <ADC_DelayMicroSecond+0x38>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	490b      	ldr	r1, [pc, #44]	; (8002abc <ADC_DelayMicroSecond+0x3c>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd fb44 	bl	800011c <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	001a      	movs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4353      	muls	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002a9e:	e002      	b.n	8002aa6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f9      	bne.n	8002aa0 <ADC_DelayMicroSecond+0x20>
  }
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	000f4240 	.word	0x000f4240

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad4:	d828      	bhi.n	8002b28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <__NVIC_SetPriority+0xd4>)
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	33c0      	adds	r3, #192	; 0xc0
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	589b      	ldr	r3, [r3, r2]
 8002ae6:	1dfa      	adds	r2, r7, #7
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	0011      	movs	r1, r2
 8002aec:	2203      	movs	r2, #3
 8002aee:	400a      	ands	r2, r1
 8002af0:	00d2      	lsls	r2, r2, #3
 8002af2:	21ff      	movs	r1, #255	; 0xff
 8002af4:	4091      	lsls	r1, r2
 8002af6:	000a      	movs	r2, r1
 8002af8:	43d2      	mvns	r2, r2
 8002afa:	401a      	ands	r2, r3
 8002afc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	22ff      	movs	r2, #255	; 0xff
 8002b04:	401a      	ands	r2, r3
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	4003      	ands	r3, r0
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b14:	481f      	ldr	r0, [pc, #124]	; (8002b94 <__NVIC_SetPriority+0xd4>)
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	33c0      	adds	r3, #192	; 0xc0
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b26:	e031      	b.n	8002b8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <__NVIC_SetPriority+0xd8>)
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	0019      	movs	r1, r3
 8002b30:	230f      	movs	r3, #15
 8002b32:	400b      	ands	r3, r1
 8002b34:	3b08      	subs	r3, #8
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3306      	adds	r3, #6
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	18d3      	adds	r3, r2, r3
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1dfa      	adds	r2, r7, #7
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	0011      	movs	r1, r2
 8002b48:	2203      	movs	r2, #3
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	00d2      	lsls	r2, r2, #3
 8002b4e:	21ff      	movs	r1, #255	; 0xff
 8002b50:	4091      	lsls	r1, r2
 8002b52:	000a      	movs	r2, r1
 8002b54:	43d2      	mvns	r2, r2
 8002b56:	401a      	ands	r2, r3
 8002b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	22ff      	movs	r2, #255	; 0xff
 8002b60:	401a      	ands	r2, r3
 8002b62:	1dfb      	adds	r3, r7, #7
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	0018      	movs	r0, r3
 8002b68:	2303      	movs	r3, #3
 8002b6a:	4003      	ands	r3, r0
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <__NVIC_SetPriority+0xd8>)
 8002b72:	1dfb      	adds	r3, r7, #7
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	001c      	movs	r4, r3
 8002b78:	230f      	movs	r3, #15
 8002b7a:	4023      	ands	r3, r4
 8002b7c:	3b08      	subs	r3, #8
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	430a      	orrs	r2, r1
 8002b82:	3306      	adds	r3, #6
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	18c3      	adds	r3, r0, r3
 8002b88:	3304      	adds	r3, #4
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b003      	add	sp, #12
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	1e5a      	subs	r2, r3, #1
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	045b      	lsls	r3, r3, #17
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d301      	bcc.n	8002bb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e010      	b.n	8002bd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <SysTick_Config+0x44>)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	425b      	negs	r3, r3
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7ff ff7c 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <SysTick_Config+0x44>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <SysTick_Config+0x44>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	210f      	movs	r1, #15
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	1c02      	adds	r2, r0, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff ff5d 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b004      	add	sp, #16
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff ffbf 	bl	8002b9c <SysTick_Config>
 8002c1e:	0003      	movs	r3, r0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c3e:	e14f      	b.n	8002ee0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d100      	bne.n	8002c58 <HAL_GPIO_Init+0x30>
 8002c56:	e140      	b.n	8002eda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d005      	beq.n	8002c70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d130      	bne.n	8002cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	43da      	mvns	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	409a      	lsls	r2, r3
 8002cac:	0013      	movs	r3, r2
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d017      	beq.n	8002d0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d123      	bne.n	8002d62 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	58d3      	ldr	r3, [r2, r3]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	409a      	lsls	r2, r3
 8002d34:	0013      	movs	r3, r2
 8002d36:	43da      	mvns	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2107      	movs	r1, #7
 8002d46:	400b      	ands	r3, r1
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	43da      	mvns	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	401a      	ands	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	409a      	lsls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d100      	bne.n	8002da4 <HAL_GPIO_Init+0x17c>
 8002da2:	e09a      	b.n	8002eda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x2d4>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	589b      	ldr	r3, [r3, r2]
 8002dbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	0013      	movs	r3, r2
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	23a0      	movs	r3, #160	; 0xa0
 8002dd8:	05db      	lsls	r3, r3, #23
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_Init+0x1ea>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_GPIO_Init+0x2d8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0x1e6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_GPIO_Init+0x2dc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_Init+0x1e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a45      	ldr	r2, [pc, #276]	; (8002f08 <HAL_GPIO_Init+0x2e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_Init+0x1de>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_Init+0x1da>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002e02:	2306      	movs	r3, #6
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	2103      	movs	r1, #3
 8002e18:	400a      	ands	r2, r1
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	; (8002efc <HAL_GPIO_Init+0x2d4>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e32:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	035b      	lsls	r3, r3, #13
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	039b      	lsls	r3, r3, #14
 8002e74:	4013      	ands	r3, r2
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	029b      	lsls	r3, r3, #10
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	40da      	lsrs	r2, r3
 8002ee8:	1e13      	subs	r3, r2, #0
 8002eea:	d000      	beq.n	8002eee <HAL_GPIO_Init+0x2c6>
 8002eec:	e6a8      	b.n	8002c40 <HAL_GPIO_Init+0x18>
  }
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b006      	add	sp, #24
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	50000400 	.word	0x50000400
 8002f04:	50000800 	.word	0x50000800
 8002f08:	50000c00 	.word	0x50000c00
 8002f0c:	50001c00 	.word	0x50001c00
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	0008      	movs	r0, r1
 8002f1e:	0011      	movs	r1, r2
 8002f20:	1cbb      	adds	r3, r7, #2
 8002f22:	1c02      	adds	r2, r0, #0
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	1c7b      	adds	r3, r7, #1
 8002f28:	1c0a      	adds	r2, r1, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	1c7b      	adds	r3, r7, #1
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f34:	1cbb      	adds	r3, r7, #2
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002f3e:	1cbb      	adds	r3, r7, #2
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f000 fbaf 	bl	80036c2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f64:	4bcf      	ldr	r3, [pc, #828]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	220c      	movs	r2, #12
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6e:	4bcd      	ldr	r3, [pc, #820]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	025b      	lsls	r3, r3, #9
 8002f76:	4013      	ands	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCC_OscConfig+0x36>
 8002f84:	e07e      	b.n	8003084 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d112      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x68>
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	025b      	lsls	r3, r3, #9
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4bc1      	ldr	r3, [pc, #772]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d100      	bne.n	8002faa <HAL_RCC_OscConfig+0x5a>
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_OscConfig+0x132>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d167      	bne.n	8003082 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f000 fb85 	bl	80036c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x84>
 8002fc4:	4bb7      	ldr	r3, [pc, #732]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4bb6      	ldr	r3, [pc, #728]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0249      	lsls	r1, r1, #9
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e027      	b.n	8003024 <HAL_RCC_OscConfig+0xd4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	23a0      	movs	r3, #160	; 0xa0
 8002fda:	02db      	lsls	r3, r3, #11
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10e      	bne.n	8002ffe <HAL_RCC_OscConfig+0xae>
 8002fe0:	4bb0      	ldr	r3, [pc, #704]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4baf      	ldr	r3, [pc, #700]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	02c9      	lsls	r1, r1, #11
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	4bad      	ldr	r3, [pc, #692]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4bac      	ldr	r3, [pc, #688]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0249      	lsls	r1, r1, #9
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e012      	b.n	8003024 <HAL_RCC_OscConfig+0xd4>
 8002ffe:	4ba9      	ldr	r3, [pc, #676]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4ba8      	ldr	r3, [pc, #672]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003004:	49a8      	ldr	r1, [pc, #672]	; (80032a8 <HAL_RCC_OscConfig+0x358>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4ba6      	ldr	r3, [pc, #664]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	025b      	lsls	r3, r3, #9
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4ba2      	ldr	r3, [pc, #648]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4ba1      	ldr	r3, [pc, #644]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800301e:	49a3      	ldr	r1, [pc, #652]	; (80032ac <HAL_RCC_OscConfig+0x35c>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff f982 	bl	8002334 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003034:	e009      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003036:	f7ff f97d 	bl	8002334 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d902      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	f000 fb3c 	bl	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800304a:	4b96      	ldr	r3, [pc, #600]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	029b      	lsls	r3, r3, #10
 8003052:	4013      	ands	r3, r2
 8003054:	d0ef      	beq.n	8003036 <HAL_RCC_OscConfig+0xe6>
 8003056:	e015      	b.n	8003084 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff f96c 	bl	8002334 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003062:	f7ff f967 	bl	8002334 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e326      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003074:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	4013      	ands	r3, r2
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x112>
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003082:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d100      	bne.n	8003090 <HAL_RCC_OscConfig+0x140>
 800308e:	e08b      	b.n	80031a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d13e      	bne.n	8003120 <HAL_RCC_OscConfig+0x1d0>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d13b      	bne.n	8003120 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2204      	movs	r2, #4
 80030ae:	4013      	ands	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_RCC_OscConfig+0x16c>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e302      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b79      	ldr	r3, [pc, #484]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <HAL_RCC_OscConfig+0x360>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	021a      	lsls	r2, r3, #8
 80030cc:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030d2:	4b74      	ldr	r3, [pc, #464]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2209      	movs	r2, #9
 80030d8:	4393      	bics	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e4:	f000 fc40 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80030e8:	0001      	movs	r1, r0
 80030ea:	4b6e      	ldr	r3, [pc, #440]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	220f      	movs	r2, #15
 80030f2:	4013      	ands	r3, r2
 80030f4:	4a6f      	ldr	r2, [pc, #444]	; (80032b4 <HAL_RCC_OscConfig+0x364>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	000a      	movs	r2, r1
 80030fa:	40da      	lsrs	r2, r3
 80030fc:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x368>)
 80030fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003100:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x36c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2513      	movs	r5, #19
 8003106:	197c      	adds	r4, r7, r5
 8003108:	0018      	movs	r0, r3
 800310a:	f7ff f8cd 	bl	80022a8 <HAL_InitTick>
 800310e:	0003      	movs	r3, r0
 8003110:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003112:	197b      	adds	r3, r7, r5
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d046      	beq.n	80031a8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800311a:	197b      	adds	r3, r7, r5
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	e2d0      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d027      	beq.n	8003176 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003126:	4b5f      	ldr	r3, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2209      	movs	r2, #9
 800312c:	4393      	bics	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff f8fc 	bl	8002334 <HAL_GetTick>
 800313c:	0003      	movs	r3, r0
 800313e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003142:	f7ff f8f7 	bl	8002334 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2b6      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	4013      	ands	r3, r2
 800315c:	d0f1      	beq.n	8003142 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_RCC_OscConfig+0x360>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e018      	b.n	80031a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800317c:	2101      	movs	r1, #1
 800317e:	438a      	bics	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7ff f8d7 	bl	8002334 <HAL_GetTick>
 8003186:	0003      	movs	r3, r0
 8003188:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318c:	f7ff f8d2 	bl	8002334 <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e291      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	d1f1      	bne.n	800318c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_RCC_OscConfig+0x264>
 80031b2:	e0a1      	b.n	80032f8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d140      	bne.n	800323c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ba:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x282>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e277      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a3a      	ldr	r2, [pc, #232]	; (80032c0 <HAL_RCC_OscConfig+0x370>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	0a19      	lsrs	r1, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	061a      	lsls	r2, r3, #24
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	3301      	adds	r3, #1
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	0212      	lsls	r2, r2, #8
 8003206:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	210f      	movs	r1, #15
 8003210:	400b      	ands	r3, r1
 8003212:	4928      	ldr	r1, [pc, #160]	; (80032b4 <HAL_RCC_OscConfig+0x364>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x368>)
 800321a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x36c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2513      	movs	r5, #19
 8003222:	197c      	adds	r4, r7, r5
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff f83f 	bl	80022a8 <HAL_InitTick>
 800322a:	0003      	movs	r3, r0
 800322c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800322e:	197b      	adds	r3, r7, r5
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d060      	beq.n	80032f8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003236:	197b      	adds	r3, r7, r5
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	e242      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03f      	beq.n	80032c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0049      	lsls	r1, r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7ff f86f 	bl	8002334 <HAL_GetTick>
 8003256:	0003      	movs	r3, r0
 8003258:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325c:	f7ff f86a 	bl	8002334 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e229      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4013      	ands	r3, r2
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_RCC_OscConfig+0x370>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	0a19      	lsrs	r1, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	061a      	lsls	r2, r3, #24
 800329c:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <HAL_RCC_OscConfig+0x354>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e029      	b.n	80032f8 <HAL_RCC_OscConfig+0x3a8>
 80032a4:	40021000 	.word	0x40021000
 80032a8:	fffeffff 	.word	0xfffeffff
 80032ac:	fffbffff 	.word	0xfffbffff
 80032b0:	ffffe0ff 	.word	0xffffe0ff
 80032b4:	08005da8 	.word	0x08005da8
 80032b8:	20000008 	.word	0x20000008
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032c4:	4bbd      	ldr	r3, [pc, #756]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4bbc      	ldr	r3, [pc, #752]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80032ca:	49bd      	ldr	r1, [pc, #756]	; (80035c0 <HAL_RCC_OscConfig+0x670>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff f830 	bl	8002334 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032da:	f7ff f82b 	bl	8002334 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1ea      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032ec:	4bb3      	ldr	r3, [pc, #716]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	4013      	ands	r3, r2
 8003300:	d036      	beq.n	8003370 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d019      	beq.n	800333e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330a:	4bac      	ldr	r3, [pc, #688]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800330c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800330e:	4bab      	ldr	r3, [pc, #684]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7ff f80d 	bl	8002334 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7ff f808 	bl	8002334 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1c7      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003332:	4ba2      	ldr	r3, [pc, #648]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d0f1      	beq.n	8003320 <HAL_RCC_OscConfig+0x3d0>
 800333c:	e018      	b.n	8003370 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333e:	4b9f      	ldr	r3, [pc, #636]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003342:	4b9e      	ldr	r3, [pc, #632]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334a:	f7fe fff3 	bl	8002334 <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe ffee 	bl	8002334 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1ad      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003366:	4b95      	ldr	r3, [pc, #596]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d1f1      	bne.n	8003354 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2204      	movs	r2, #4
 8003376:	4013      	ands	r3, r2
 8003378:	d100      	bne.n	800337c <HAL_RCC_OscConfig+0x42c>
 800337a:	e0ae      	b.n	80034da <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337c:	2027      	movs	r0, #39	; 0x27
 800337e:	183b      	adds	r3, r7, r0
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003384:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	055b      	lsls	r3, r3, #21
 800338c:	4013      	ands	r3, r2
 800338e:	d109      	bne.n	80033a4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003394:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	0549      	lsls	r1, r1, #21
 800339a:	430a      	orrs	r2, r1
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b87      	ldr	r3, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x674>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d11a      	bne.n	80033e6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <HAL_RCC_OscConfig+0x674>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b83      	ldr	r3, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x674>)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0049      	lsls	r1, r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe ffb9 	bl	8002334 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fe ffb4 	bl	8002334 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e173      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x674>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_OscConfig+0x4b2>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80033f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f6:	4b71      	ldr	r3, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	0049      	lsls	r1, r1, #1
 80033fc:	430a      	orrs	r2, r1
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003400:	e031      	b.n	8003466 <HAL_RCC_OscConfig+0x516>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x4d4>
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800340c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340e:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003410:	496b      	ldr	r1, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x670>)
 8003412:	400a      	ands	r2, r1
 8003414:	651a      	str	r2, [r3, #80]	; 0x50
 8003416:	4b69      	ldr	r3, [pc, #420]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341a:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800341c:	496a      	ldr	r1, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0x678>)
 800341e:	400a      	ands	r2, r1
 8003420:	651a      	str	r2, [r3, #80]	; 0x50
 8003422:	e020      	b.n	8003466 <HAL_RCC_OscConfig+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	23a0      	movs	r3, #160	; 0xa0
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	429a      	cmp	r2, r3
 800342e:	d10e      	bne.n	800344e <HAL_RCC_OscConfig+0x4fe>
 8003430:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	00c9      	lsls	r1, r1, #3
 800343a:	430a      	orrs	r2, r1
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
 800343e:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003442:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	0049      	lsls	r1, r1, #1
 8003448:	430a      	orrs	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
 800344c:	e00b      	b.n	8003466 <HAL_RCC_OscConfig+0x516>
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003454:	495a      	ldr	r1, [pc, #360]	; (80035c0 <HAL_RCC_OscConfig+0x670>)
 8003456:	400a      	ands	r2, r1
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
 800345a:	4b58      	ldr	r3, [pc, #352]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800345c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345e:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003460:	4959      	ldr	r1, [pc, #356]	; (80035c8 <HAL_RCC_OscConfig+0x678>)
 8003462:	400a      	ands	r2, r1
 8003464:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe ff61 	bl	8002334 <HAL_GetTick>
 8003472:	0003      	movs	r3, r0
 8003474:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003476:	e009      	b.n	800348c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe ff5c 	bl	8002334 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x67c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e11a      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348c:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800348e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4013      	ands	r3, r2
 8003496:	d0ef      	beq.n	8003478 <HAL_RCC_OscConfig+0x528>
 8003498:	e014      	b.n	80034c4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fe ff4b 	bl	8002334 <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034a2:	e009      	b.n	80034b8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe ff46 	bl	8002334 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	4a47      	ldr	r2, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x67c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e104      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d1ef      	bne.n	80034a4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c4:	2327      	movs	r3, #39	; 0x27
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d2:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034d4:	493e      	ldr	r1, [pc, #248]	; (80035d0 <HAL_RCC_OscConfig+0x680>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2220      	movs	r2, #32
 80034e0:	4013      	ands	r3, r2
 80034e2:	d049      	beq.n	8003578 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d026      	beq.n	800353a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 80034fe:	2101      	movs	r1, #1
 8003500:	430a      	orrs	r2, r1
 8003502:	635a      	str	r2, [r3, #52]	; 0x34
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCC_OscConfig+0x684>)
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0x684>)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	0189      	lsls	r1, r1, #6
 800350e:	430a      	orrs	r2, r1
 8003510:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe ff0f 	bl	8002334 <HAL_GetTick>
 8003516:	0003      	movs	r3, r0
 8003518:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7fe ff0a 	bl	8002334 <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0c9      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2202      	movs	r2, #2
 8003534:	4013      	ands	r3, r2
 8003536:	d0f1      	beq.n	800351c <HAL_RCC_OscConfig+0x5cc>
 8003538:	e01e      	b.n	8003578 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003540:	2101      	movs	r1, #1
 8003542:	438a      	bics	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_RCC_OscConfig+0x684>)
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCC_OscConfig+0x684>)
 800354c:	4922      	ldr	r1, [pc, #136]	; (80035d8 <HAL_RCC_OscConfig+0x688>)
 800354e:	400a      	ands	r2, r1
 8003550:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe feef 	bl	8002334 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800355c:	f7fe feea 	bl	8002334 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0a9      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d1f1      	bne.n	800355c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d100      	bne.n	8003582 <HAL_RCC_OscConfig+0x632>
 8003580:	e09e      	b.n	80036c0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d100      	bne.n	800358a <HAL_RCC_OscConfig+0x63a>
 8003588:	e077      	b.n	800367a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	2b02      	cmp	r3, #2
 8003590:	d158      	bne.n	8003644 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x66c>)
 8003598:	4910      	ldr	r1, [pc, #64]	; (80035dc <HAL_RCC_OscConfig+0x68c>)
 800359a:	400a      	ands	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fec9 	bl	8002334 <HAL_GetTick>
 80035a2:	0003      	movs	r3, r0
 80035a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035a6:	e01b      	b.n	80035e0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fec4 	bl	8002334 <HAL_GetTick>
 80035ac:	0002      	movs	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d914      	bls.n	80035e0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e083      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	40021000 	.word	0x40021000
 80035c0:	fffffeff 	.word	0xfffffeff
 80035c4:	40007000 	.word	0x40007000
 80035c8:	fffffbff 	.word	0xfffffbff
 80035cc:	00001388 	.word	0x00001388
 80035d0:	efffffff 	.word	0xefffffff
 80035d4:	40010000 	.word	0x40010000
 80035d8:	ffffdfff 	.word	0xffffdfff
 80035dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035e0:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	049b      	lsls	r3, r3, #18
 80035e8:	4013      	ands	r3, r2
 80035ea:	d1dd      	bne.n	80035a8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <HAL_RCC_OscConfig+0x780>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	431a      	orrs	r2, r3
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	0449      	lsls	r1, r1, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe fe8b 	bl	8002334 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fe86 	bl	8002334 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e045      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	049b      	lsls	r3, r3, #18
 800363e:	4013      	ands	r3, r2
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x6d4>
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003644:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_OscConfig+0x784>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe fe70 	bl	8002334 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fe6b 	bl	8002334 <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e02a      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	049b      	lsls	r3, r3, #18
 8003674:	4013      	ands	r3, r2
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x70a>
 8003678:	e022      	b.n	80036c0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01d      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	025b      	lsls	r3, r3, #9
 8003692:	401a      	ands	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	429a      	cmp	r2, r3
 800369a:	d10f      	bne.n	80036bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	23f0      	movs	r3, #240	; 0xf0
 80036a0:	039b      	lsls	r3, r3, #14
 80036a2:	401a      	ands	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	23c0      	movs	r3, #192	; 0xc0
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	401a      	ands	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b00a      	add	sp, #40	; 0x28
 80036c8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	40021000 	.word	0x40021000
 80036d0:	ff02ffff 	.word	0xff02ffff
 80036d4:	feffffff 	.word	0xfeffffff

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b5b0      	push	{r4, r5, r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e128      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b96      	ldr	r3, [pc, #600]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	4013      	ands	r3, r2
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d91e      	bls.n	8003738 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b93      	ldr	r3, [pc, #588]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2201      	movs	r2, #1
 8003700:	4393      	bics	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	4b90      	ldr	r3, [pc, #576]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800370c:	f7fe fe12 	bl	8002334 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003714:	e009      	b.n	800372a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003716:	f7fe fe0d 	bl	8002334 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	4a8a      	ldr	r2, [pc, #552]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e109      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b87      	ldr	r3, [pc, #540]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003742:	4b83      	ldr	r3, [pc, #524]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	22f0      	movs	r2, #240	; 0xf0
 8003748:	4393      	bics	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 8003752:	430a      	orrs	r2, r1
 8003754:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d100      	bne.n	8003762 <HAL_RCC_ClockConfig+0x8a>
 8003760:	e089      	b.n	8003876 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	4013      	ands	r3, r2
 8003774:	d120      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0e1      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003782:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	049b      	lsls	r3, r3, #18
 800378a:	4013      	ands	r3, r2
 800378c:	d114      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0d5      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2204      	movs	r2, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0ca      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0c2      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2203      	movs	r2, #3
 80037be:	4393      	bics	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fe fdb2 	bl	8002334 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d111      	bne.n	8003800 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037dc:	e009      	b.n	80037f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037de:	f7fe fda9 	bl	8002334 <HAL_GetTick>
 80037e2:	0002      	movs	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0a5      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f2:	4b57      	ldr	r3, [pc, #348]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	220c      	movs	r2, #12
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d1ef      	bne.n	80037de <HAL_RCC_ClockConfig+0x106>
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d111      	bne.n	800382c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003808:	e009      	b.n	800381e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380a:	f7fe fd93 	bl	8002334 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	4a4d      	ldr	r2, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e08f      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	220c      	movs	r2, #12
 8003824:	4013      	ands	r3, r2
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d1ef      	bne.n	800380a <HAL_RCC_ClockConfig+0x132>
 800382a:	e024      	b.n	8003876 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11b      	bne.n	800386c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003834:	e009      	b.n	800384a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003836:	f7fe fd7d 	bl	8002334 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	4a42      	ldr	r2, [pc, #264]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e079      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	220c      	movs	r2, #12
 8003850:	4013      	ands	r3, r2
 8003852:	2b04      	cmp	r3, #4
 8003854:	d1ef      	bne.n	8003836 <HAL_RCC_ClockConfig+0x15e>
 8003856:	e00e      	b.n	8003876 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fd6c 	bl	8002334 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e068      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	220c      	movs	r2, #12
 8003872:	4013      	ands	r3, r2
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d21e      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003884:	4b30      	ldr	r3, [pc, #192]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	4393      	bics	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003896:	f7fe fd4d 	bl	8002334 <HAL_GetTick>
 800389a:	0003      	movs	r3, r0
 800389c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	e009      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe fd48 	bl	8002334 <HAL_GetTick>
 80038a4:	0002      	movs	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_RCC_ClockConfig+0x274>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e044      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_ClockConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d1ee      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2204      	movs	r2, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a20      	ldr	r2, [pc, #128]	; (8003954 <HAL_RCC_ClockConfig+0x27c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2208      	movs	r2, #8
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00a      	beq.n	8003900 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_RCC_ClockConfig+0x280>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	00da      	lsls	r2, r3, #3
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003900:	f000 f832 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003904:	0001      	movs	r1, r0
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x278>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	220f      	movs	r2, #15
 800390e:	4013      	ands	r3, r2
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_RCC_ClockConfig+0x284>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	000a      	movs	r2, r1
 8003916:	40da      	lsrs	r2, r3
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_ClockConfig+0x288>)
 800391a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_ClockConfig+0x28c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	250b      	movs	r5, #11
 8003922:	197c      	adds	r4, r7, r5
 8003924:	0018      	movs	r0, r3
 8003926:	f7fe fcbf 	bl	80022a8 <HAL_InitTick>
 800392a:	0003      	movs	r3, r0
 800392c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800392e:	197b      	adds	r3, r7, r5
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003936:	197b      	adds	r3, r7, r5
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	e000      	b.n	800393e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bdb0      	pop	{r4, r5, r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	40022000 	.word	0x40022000
 800394c:	00001388 	.word	0x00001388
 8003950:	40021000 	.word	0x40021000
 8003954:	fffff8ff 	.word	0xfffff8ff
 8003958:	ffffc7ff 	.word	0xffffc7ff
 800395c:	08005da8 	.word	0x08005da8
 8003960:	20000008 	.word	0x20000008
 8003964:	2000000c 	.word	0x2000000c

08003968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b5b0      	push	{r4, r5, r7, lr}
 800396a:	b08e      	sub	sp, #56	; 0x38
 800396c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800396e:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	230c      	movs	r3, #12
 8003978:	4013      	ands	r3, r2
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d014      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800397e:	d900      	bls.n	8003982 <HAL_RCC_GetSysClockFreq+0x1a>
 8003980:	e07b      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x112>
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x24>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e076      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2210      	movs	r2, #16
 8003992:	4013      	ands	r3, r2
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800399a:	e07c      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x140>)
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039a0:	e079      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <HAL_RCC_GetSysClockFreq+0x144>)
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039a6:	e076      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	0c9a      	lsrs	r2, r3, #18
 80039ac:	230f      	movs	r3, #15
 80039ae:	401a      	ands	r2, r3
 80039b0:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x148>)
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	0d9a      	lsrs	r2, r3, #22
 80039ba:	2303      	movs	r3, #3
 80039bc:	4013      	ands	r3, r2
 80039be:	3301      	adds	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c2:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	025b      	lsls	r3, r3, #9
 80039ca:	4013      	ands	r3, r2
 80039cc:	d01a      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	4a35      	ldr	r2, [pc, #212]	; (8003aac <HAL_RCC_GetSysClockFreq+0x144>)
 80039d8:	2300      	movs	r3, #0
 80039da:	69b8      	ldr	r0, [r7, #24]
 80039dc:	69f9      	ldr	r1, [r7, #28]
 80039de:	f7fc fc49 	bl	8000274 <__aeabi_lmul>
 80039e2:	0002      	movs	r2, r0
 80039e4:	000b      	movs	r3, r1
 80039e6:	0010      	movs	r0, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f7fc fc1d 	bl	8000234 <__aeabi_uldivmod>
 80039fa:	0002      	movs	r2, r0
 80039fc:	000b      	movs	r3, r1
 80039fe:	0013      	movs	r3, r2
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
 8003a02:	e037      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d01a      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	68b8      	ldr	r0, [r7, #8]
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	f7fc fc29 	bl	8000274 <__aeabi_lmul>
 8003a22:	0002      	movs	r2, r0
 8003a24:	000b      	movs	r3, r1
 8003a26:	0010      	movs	r0, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f7fc fbfd 	bl	8000234 <__aeabi_uldivmod>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	000b      	movs	r3, r1
 8003a3e:	0013      	movs	r3, r2
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
 8003a42:	e017      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	0018      	movs	r0, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f7fc fc10 	bl	8000274 <__aeabi_lmul>
 8003a54:	0002      	movs	r2, r0
 8003a56:	000b      	movs	r3, r1
 8003a58:	0010      	movs	r0, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	001c      	movs	r4, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	001d      	movs	r5, r3
 8003a64:	0022      	movs	r2, r4
 8003a66:	002b      	movs	r3, r5
 8003a68:	f7fc fbe4 	bl	8000234 <__aeabi_uldivmod>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	000b      	movs	r3, r1
 8003a70:	0013      	movs	r3, r2
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a78:	e00d      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0b5b      	lsrs	r3, r3, #13
 8003a80:	2207      	movs	r2, #7
 8003a82:	4013      	ands	r3, r2
 8003a84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0212      	lsls	r2, r2, #8
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a94:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b00e      	add	sp, #56	; 0x38
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	003d0900 	.word	0x003d0900
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	007a1200 	.word	0x007a1200
 8003ab0:	08005db8 	.word	0x08005db8

08003ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e083      	b.n	8003bce <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	2382      	movs	r3, #130	; 0x82
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d009      	beq.n	8003aee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
 8003ae0:	e005      	b.n	8003aee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2251      	movs	r2, #81	; 0x51
 8003af8:	5c9b      	ldrb	r3, [r3, r2]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2250      	movs	r2, #80	; 0x50
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7fe faea 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2251      	movs	r2, #81	; 0x51
 8003b14:	2102      	movs	r1, #2
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	438a      	bics	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	2382      	movs	r3, #130	; 0x82
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	401a      	ands	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	2384      	movs	r3, #132	; 0x84
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68d9      	ldr	r1, [r3, #12]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	400b      	ands	r3, r1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2102      	movs	r1, #2
 8003b50:	400b      	ands	r3, r1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6999      	ldr	r1, [r3, #24]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	400b      	ands	r3, r1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	2138      	movs	r1, #56	; 0x38
 8003b70:	400b      	ands	r3, r1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	0011      	movs	r1, r2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	401a      	ands	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	2204      	movs	r2, #4
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <HAL_SPI_Init+0x124>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2251      	movs	r2, #81	; 0x51
 8003bc8:	2101      	movs	r1, #1
 8003bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	fffff7ff 	.word	0xfffff7ff

08003bdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	1dbb      	adds	r3, r7, #6
 8003bea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bec:	231f      	movs	r3, #31
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2250      	movs	r2, #80	; 0x50
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_SPI_Transmit+0x26>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e145      	b.n	8003e8e <HAL_SPI_Transmit+0x2b2>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2250      	movs	r2, #80	; 0x50
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0a:	f7fe fb93 	bl	8002334 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c12:	2316      	movs	r3, #22
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	1dba      	adds	r2, r7, #6
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2251      	movs	r2, #81	; 0x51
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d004      	beq.n	8003c32 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003c28:	231f      	movs	r3, #31
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c30:	e126      	b.n	8003e80 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_SPI_Transmit+0x64>
 8003c38:	1dbb      	adds	r3, r7, #6
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003c40:	231f      	movs	r3, #31
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c48:	e11a      	b.n	8003e80 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2251      	movs	r2, #81	; 0x51
 8003c4e:	2103      	movs	r1, #3
 8003c50:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1dba      	adds	r2, r7, #6
 8003c62:	8812      	ldrh	r2, [r2, #0]
 8003c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1dba      	adds	r2, r7, #6
 8003c6a:	8812      	ldrh	r2, [r2, #0]
 8003c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d110      	bne.n	8003cba <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2140      	movs	r1, #64	; 0x40
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	01c9      	lsls	r1, r1, #7
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2240      	movs	r2, #64	; 0x40
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d007      	beq.n	8003cd8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d152      	bne.n	8003d8a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_SPI_Transmit+0x11a>
 8003cec:	2316      	movs	r3, #22
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d143      	bne.n	8003d7e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d1a:	e030      	b.n	8003d7e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d112      	bne.n	8003d50 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d4e:	e016      	b.n	8003d7e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d50:	f7fe faf0 	bl	8002334 <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d802      	bhi.n	8003d66 <HAL_SPI_Transmit+0x18a>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit+0x190>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003d6c:	231f      	movs	r3, #31
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2203      	movs	r2, #3
 8003d72:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2251      	movs	r2, #81	; 0x51
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003d7c:	e080      	b.n	8003e80 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1c9      	bne.n	8003d1c <HAL_SPI_Transmit+0x140>
 8003d88:	e053      	b.n	8003e32 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_SPI_Transmit+0x1c0>
 8003d92:	2316      	movs	r3, #22
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d145      	bne.n	8003e28 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dc2:	e031      	b.n	8003e28 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d113      	bne.n	8003dfa <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003df8:	e016      	b.n	8003e28 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfa:	f7fe fa9b 	bl	8002334 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d802      	bhi.n	8003e10 <HAL_SPI_Transmit+0x234>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_Transmit+0x23a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003e16:	231f      	movs	r3, #31
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2251      	movs	r2, #81	; 0x51
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e26:	e02b      	b.n	8003e80 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1c8      	bne.n	8003dc4 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f8bb 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003e6e:	231f      	movs	r3, #31
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e003      	b.n	8003e80 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2251      	movs	r2, #81	; 0x51
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2250      	movs	r2, #80	; 0x50
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e88:	231f      	movs	r3, #31
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b008      	add	sp, #32
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ea8:	f7fe fa44 	bl	8002334 <HAL_GetTick>
 8003eac:	0002      	movs	r2, r0
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eb8:	f7fe fa3c 	bl	8002334 <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	; (8003fac <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	015b      	lsls	r3, r3, #5
 8003ec6:	0d1b      	lsrs	r3, r3, #20
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4353      	muls	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	e058      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	d055      	beq.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ed6:	f7fe fa2d 	bl	8002334 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d902      	bls.n	8003eec <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d142      	bne.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	21e0      	movs	r1, #224	; 0xe0
 8003ef8:	438a      	bics	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	2382      	movs	r3, #130	; 0x82
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d113      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d005      	beq.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	019b      	lsls	r3, r3, #6
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d110      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2180      	movs	r1, #128	; 0x80
 8003f58:	0189      	lsls	r1, r1, #6
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2251      	movs	r2, #81	; 0x51
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2250      	movs	r2, #80	; 0x50
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e017      	b.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	425a      	negs	r2, r3
 8003f92:	4153      	adcs	r3, r2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	001a      	movs	r2, r3
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d197      	bne.n	8003ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b008      	add	sp, #32
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	20000008 	.word	0x20000008
 8003fb0:	ffffdfff 	.word	0xffffdfff

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <SPI_EndRxTxTransaction+0x84>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	491d      	ldr	r1, [pc, #116]	; (800403c <SPI_EndRxTxTransaction+0x88>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8a8 	bl	800011c <__udivsi3>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	001a      	movs	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	015b      	lsls	r3, r3, #5
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	2382      	movs	r3, #130	; 0x82
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d112      	bne.n	8004010 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	f7ff ff4e 	bl	8003e98 <SPI_WaitFlagStateUntilTimeout>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d016      	beq.n	800402e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	2220      	movs	r2, #32
 8004006:	431a      	orrs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e00f      	b.n	8004030 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3b01      	subs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	4013      	ands	r3, r2
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d0f2      	beq.n	8004010 <SPI_EndRxTxTransaction+0x5c>
 800402a:	e000      	b.n	800402e <SPI_EndRxTxTransaction+0x7a>
        break;
 800402c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000008 	.word	0x20000008
 800403c:	016e3600 	.word	0x016e3600

08004040 <__errno>:
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <__errno+0x8>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	4770      	bx	lr
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20000014 	.word	0x20000014

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	2600      	movs	r6, #0
 8004050:	4d0c      	ldr	r5, [pc, #48]	; (8004084 <__libc_init_array+0x38>)
 8004052:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004054:	1b64      	subs	r4, r4, r5
 8004056:	10a4      	asrs	r4, r4, #2
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	2600      	movs	r6, #0
 800405e:	f000 fc8b 	bl	8004978 <_init>
 8004062:	4d0a      	ldr	r5, [pc, #40]	; (800408c <__libc_init_array+0x40>)
 8004064:	4c0a      	ldr	r4, [pc, #40]	; (8004090 <__libc_init_array+0x44>)
 8004066:	1b64      	subs	r4, r4, r5
 8004068:	10a4      	asrs	r4, r4, #2
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	00b3      	lsls	r3, r6, #2
 8004072:	58eb      	ldr	r3, [r5, r3]
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	00b3      	lsls	r3, r6, #2
 800407c:	58eb      	ldr	r3, [r5, r3]
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08005dfc 	.word	0x08005dfc
 8004088:	08005dfc 	.word	0x08005dfc
 800408c:	08005dfc 	.word	0x08005dfc
 8004090:	08005e00 	.word	0x08005e00

08004094 <memset>:
 8004094:	0003      	movs	r3, r0
 8004096:	1882      	adds	r2, r0, r2
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	7019      	strb	r1, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <siprintf>:
 80040a4:	b40e      	push	{r1, r2, r3}
 80040a6:	b500      	push	{lr}
 80040a8:	490b      	ldr	r1, [pc, #44]	; (80040d8 <siprintf+0x34>)
 80040aa:	b09c      	sub	sp, #112	; 0x70
 80040ac:	ab1d      	add	r3, sp, #116	; 0x74
 80040ae:	9002      	str	r0, [sp, #8]
 80040b0:	9006      	str	r0, [sp, #24]
 80040b2:	9107      	str	r1, [sp, #28]
 80040b4:	9104      	str	r1, [sp, #16]
 80040b6:	4809      	ldr	r0, [pc, #36]	; (80040dc <siprintf+0x38>)
 80040b8:	4909      	ldr	r1, [pc, #36]	; (80040e0 <siprintf+0x3c>)
 80040ba:	cb04      	ldmia	r3!, {r2}
 80040bc:	9105      	str	r1, [sp, #20]
 80040be:	6800      	ldr	r0, [r0, #0]
 80040c0:	a902      	add	r1, sp, #8
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	f000 f870 	bl	80041a8 <_svfiprintf_r>
 80040c8:	2300      	movs	r3, #0
 80040ca:	9a02      	ldr	r2, [sp, #8]
 80040cc:	7013      	strb	r3, [r2, #0]
 80040ce:	b01c      	add	sp, #112	; 0x70
 80040d0:	bc08      	pop	{r3}
 80040d2:	b003      	add	sp, #12
 80040d4:	4718      	bx	r3
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	7fffffff 	.word	0x7fffffff
 80040dc:	20000014 	.word	0x20000014
 80040e0:	ffff0208 	.word	0xffff0208

080040e4 <__ssputs_r>:
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	688e      	ldr	r6, [r1, #8]
 80040e8:	b085      	sub	sp, #20
 80040ea:	0007      	movs	r7, r0
 80040ec:	000c      	movs	r4, r1
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	429e      	cmp	r6, r3
 80040f4:	d83c      	bhi.n	8004170 <__ssputs_r+0x8c>
 80040f6:	2390      	movs	r3, #144	; 0x90
 80040f8:	898a      	ldrh	r2, [r1, #12]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	421a      	tst	r2, r3
 80040fe:	d034      	beq.n	800416a <__ssputs_r+0x86>
 8004100:	6909      	ldr	r1, [r1, #16]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	6960      	ldr	r0, [r4, #20]
 8004106:	1a5b      	subs	r3, r3, r1
 8004108:	9302      	str	r3, [sp, #8]
 800410a:	2303      	movs	r3, #3
 800410c:	4343      	muls	r3, r0
 800410e:	0fdd      	lsrs	r5, r3, #31
 8004110:	18ed      	adds	r5, r5, r3
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	9802      	ldr	r0, [sp, #8]
 8004116:	3301      	adds	r3, #1
 8004118:	181b      	adds	r3, r3, r0
 800411a:	106d      	asrs	r5, r5, #1
 800411c:	42ab      	cmp	r3, r5
 800411e:	d900      	bls.n	8004122 <__ssputs_r+0x3e>
 8004120:	001d      	movs	r5, r3
 8004122:	0553      	lsls	r3, r2, #21
 8004124:	d532      	bpl.n	800418c <__ssputs_r+0xa8>
 8004126:	0029      	movs	r1, r5
 8004128:	0038      	movs	r0, r7
 800412a:	f000 fb53 	bl	80047d4 <_malloc_r>
 800412e:	1e06      	subs	r6, r0, #0
 8004130:	d109      	bne.n	8004146 <__ssputs_r+0x62>
 8004132:	230c      	movs	r3, #12
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	2001      	movs	r0, #1
 800413a:	89a2      	ldrh	r2, [r4, #12]
 800413c:	4240      	negs	r0, r0
 800413e:	4313      	orrs	r3, r2
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	b005      	add	sp, #20
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004146:	9a02      	ldr	r2, [sp, #8]
 8004148:	6921      	ldr	r1, [r4, #16]
 800414a:	f000 faba 	bl	80046c2 <memcpy>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <__ssputs_r+0xc0>)
 8004152:	401a      	ands	r2, r3
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	4313      	orrs	r3, r2
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	9b02      	ldr	r3, [sp, #8]
 800415c:	6126      	str	r6, [r4, #16]
 800415e:	18f6      	adds	r6, r6, r3
 8004160:	6026      	str	r6, [r4, #0]
 8004162:	6165      	str	r5, [r4, #20]
 8004164:	9e01      	ldr	r6, [sp, #4]
 8004166:	1aed      	subs	r5, r5, r3
 8004168:	60a5      	str	r5, [r4, #8]
 800416a:	9b01      	ldr	r3, [sp, #4]
 800416c:	429e      	cmp	r6, r3
 800416e:	d900      	bls.n	8004172 <__ssputs_r+0x8e>
 8004170:	9e01      	ldr	r6, [sp, #4]
 8004172:	0032      	movs	r2, r6
 8004174:	9903      	ldr	r1, [sp, #12]
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	f000 faac 	bl	80046d4 <memmove>
 800417c:	68a3      	ldr	r3, [r4, #8]
 800417e:	2000      	movs	r0, #0
 8004180:	1b9b      	subs	r3, r3, r6
 8004182:	60a3      	str	r3, [r4, #8]
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	199e      	adds	r6, r3, r6
 8004188:	6026      	str	r6, [r4, #0]
 800418a:	e7da      	b.n	8004142 <__ssputs_r+0x5e>
 800418c:	002a      	movs	r2, r5
 800418e:	0038      	movs	r0, r7
 8004190:	f000 fb96 	bl	80048c0 <_realloc_r>
 8004194:	1e06      	subs	r6, r0, #0
 8004196:	d1e0      	bne.n	800415a <__ssputs_r+0x76>
 8004198:	0038      	movs	r0, r7
 800419a:	6921      	ldr	r1, [r4, #16]
 800419c:	f000 faae 	bl	80046fc <_free_r>
 80041a0:	e7c7      	b.n	8004132 <__ssputs_r+0x4e>
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	fffffb7f 	.word	0xfffffb7f

080041a8 <_svfiprintf_r>:
 80041a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041aa:	b0a1      	sub	sp, #132	; 0x84
 80041ac:	9003      	str	r0, [sp, #12]
 80041ae:	001d      	movs	r5, r3
 80041b0:	898b      	ldrh	r3, [r1, #12]
 80041b2:	000f      	movs	r7, r1
 80041b4:	0016      	movs	r6, r2
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	d511      	bpl.n	80041de <_svfiprintf_r+0x36>
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10e      	bne.n	80041de <_svfiprintf_r+0x36>
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	f000 fb07 	bl	80047d4 <_malloc_r>
 80041c6:	6038      	str	r0, [r7, #0]
 80041c8:	6138      	str	r0, [r7, #16]
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d105      	bne.n	80041da <_svfiprintf_r+0x32>
 80041ce:	230c      	movs	r3, #12
 80041d0:	9a03      	ldr	r2, [sp, #12]
 80041d2:	3801      	subs	r0, #1
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	b021      	add	sp, #132	; 0x84
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	ac08      	add	r4, sp, #32
 80041e2:	6163      	str	r3, [r4, #20]
 80041e4:	3320      	adds	r3, #32
 80041e6:	7663      	strb	r3, [r4, #25]
 80041e8:	3310      	adds	r3, #16
 80041ea:	76a3      	strb	r3, [r4, #26]
 80041ec:	9507      	str	r5, [sp, #28]
 80041ee:	0035      	movs	r5, r6
 80041f0:	782b      	ldrb	r3, [r5, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <_svfiprintf_r+0x52>
 80041f6:	2b25      	cmp	r3, #37	; 0x25
 80041f8:	d147      	bne.n	800428a <_svfiprintf_r+0xe2>
 80041fa:	1bab      	subs	r3, r5, r6
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	42b5      	cmp	r5, r6
 8004200:	d00c      	beq.n	800421c <_svfiprintf_r+0x74>
 8004202:	0032      	movs	r2, r6
 8004204:	0039      	movs	r1, r7
 8004206:	9803      	ldr	r0, [sp, #12]
 8004208:	f7ff ff6c 	bl	80040e4 <__ssputs_r>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d100      	bne.n	8004212 <_svfiprintf_r+0x6a>
 8004210:	e0ae      	b.n	8004370 <_svfiprintf_r+0x1c8>
 8004212:	6962      	ldr	r2, [r4, #20]
 8004214:	9b05      	ldr	r3, [sp, #20]
 8004216:	4694      	mov	ip, r2
 8004218:	4463      	add	r3, ip
 800421a:	6163      	str	r3, [r4, #20]
 800421c:	782b      	ldrb	r3, [r5, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d100      	bne.n	8004224 <_svfiprintf_r+0x7c>
 8004222:	e0a5      	b.n	8004370 <_svfiprintf_r+0x1c8>
 8004224:	2201      	movs	r2, #1
 8004226:	2300      	movs	r3, #0
 8004228:	4252      	negs	r2, r2
 800422a:	6062      	str	r2, [r4, #4]
 800422c:	a904      	add	r1, sp, #16
 800422e:	3254      	adds	r2, #84	; 0x54
 8004230:	1852      	adds	r2, r2, r1
 8004232:	1c6e      	adds	r6, r5, #1
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	60e3      	str	r3, [r4, #12]
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	7013      	strb	r3, [r2, #0]
 800423c:	65a3      	str	r3, [r4, #88]	; 0x58
 800423e:	2205      	movs	r2, #5
 8004240:	7831      	ldrb	r1, [r6, #0]
 8004242:	4854      	ldr	r0, [pc, #336]	; (8004394 <_svfiprintf_r+0x1ec>)
 8004244:	f000 fa32 	bl	80046ac <memchr>
 8004248:	1c75      	adds	r5, r6, #1
 800424a:	2800      	cmp	r0, #0
 800424c:	d11f      	bne.n	800428e <_svfiprintf_r+0xe6>
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	06d3      	lsls	r3, r2, #27
 8004252:	d504      	bpl.n	800425e <_svfiprintf_r+0xb6>
 8004254:	2353      	movs	r3, #83	; 0x53
 8004256:	a904      	add	r1, sp, #16
 8004258:	185b      	adds	r3, r3, r1
 800425a:	2120      	movs	r1, #32
 800425c:	7019      	strb	r1, [r3, #0]
 800425e:	0713      	lsls	r3, r2, #28
 8004260:	d504      	bpl.n	800426c <_svfiprintf_r+0xc4>
 8004262:	2353      	movs	r3, #83	; 0x53
 8004264:	a904      	add	r1, sp, #16
 8004266:	185b      	adds	r3, r3, r1
 8004268:	212b      	movs	r1, #43	; 0x2b
 800426a:	7019      	strb	r1, [r3, #0]
 800426c:	7833      	ldrb	r3, [r6, #0]
 800426e:	2b2a      	cmp	r3, #42	; 0x2a
 8004270:	d016      	beq.n	80042a0 <_svfiprintf_r+0xf8>
 8004272:	0035      	movs	r5, r6
 8004274:	2100      	movs	r1, #0
 8004276:	200a      	movs	r0, #10
 8004278:	68e3      	ldr	r3, [r4, #12]
 800427a:	782a      	ldrb	r2, [r5, #0]
 800427c:	1c6e      	adds	r6, r5, #1
 800427e:	3a30      	subs	r2, #48	; 0x30
 8004280:	2a09      	cmp	r2, #9
 8004282:	d94e      	bls.n	8004322 <_svfiprintf_r+0x17a>
 8004284:	2900      	cmp	r1, #0
 8004286:	d111      	bne.n	80042ac <_svfiprintf_r+0x104>
 8004288:	e017      	b.n	80042ba <_svfiprintf_r+0x112>
 800428a:	3501      	adds	r5, #1
 800428c:	e7b0      	b.n	80041f0 <_svfiprintf_r+0x48>
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <_svfiprintf_r+0x1ec>)
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	1ac0      	subs	r0, r0, r3
 8004294:	2301      	movs	r3, #1
 8004296:	4083      	lsls	r3, r0
 8004298:	4313      	orrs	r3, r2
 800429a:	002e      	movs	r6, r5
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	e7ce      	b.n	800423e <_svfiprintf_r+0x96>
 80042a0:	9b07      	ldr	r3, [sp, #28]
 80042a2:	1d19      	adds	r1, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9107      	str	r1, [sp, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db01      	blt.n	80042b0 <_svfiprintf_r+0x108>
 80042ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80042ae:	e004      	b.n	80042ba <_svfiprintf_r+0x112>
 80042b0:	425b      	negs	r3, r3
 80042b2:	60e3      	str	r3, [r4, #12]
 80042b4:	2302      	movs	r3, #2
 80042b6:	4313      	orrs	r3, r2
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	782b      	ldrb	r3, [r5, #0]
 80042bc:	2b2e      	cmp	r3, #46	; 0x2e
 80042be:	d10a      	bne.n	80042d6 <_svfiprintf_r+0x12e>
 80042c0:	786b      	ldrb	r3, [r5, #1]
 80042c2:	2b2a      	cmp	r3, #42	; 0x2a
 80042c4:	d135      	bne.n	8004332 <_svfiprintf_r+0x18a>
 80042c6:	9b07      	ldr	r3, [sp, #28]
 80042c8:	3502      	adds	r5, #2
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9207      	str	r2, [sp, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db2b      	blt.n	800432c <_svfiprintf_r+0x184>
 80042d4:	9309      	str	r3, [sp, #36]	; 0x24
 80042d6:	4e30      	ldr	r6, [pc, #192]	; (8004398 <_svfiprintf_r+0x1f0>)
 80042d8:	2203      	movs	r2, #3
 80042da:	0030      	movs	r0, r6
 80042dc:	7829      	ldrb	r1, [r5, #0]
 80042de:	f000 f9e5 	bl	80046ac <memchr>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d006      	beq.n	80042f4 <_svfiprintf_r+0x14c>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	1b80      	subs	r0, r0, r6
 80042ea:	4083      	lsls	r3, r0
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	3501      	adds	r5, #1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	7829      	ldrb	r1, [r5, #0]
 80042f6:	2206      	movs	r2, #6
 80042f8:	4828      	ldr	r0, [pc, #160]	; (800439c <_svfiprintf_r+0x1f4>)
 80042fa:	1c6e      	adds	r6, r5, #1
 80042fc:	7621      	strb	r1, [r4, #24]
 80042fe:	f000 f9d5 	bl	80046ac <memchr>
 8004302:	2800      	cmp	r0, #0
 8004304:	d03c      	beq.n	8004380 <_svfiprintf_r+0x1d8>
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <_svfiprintf_r+0x1f8>)
 8004308:	2b00      	cmp	r3, #0
 800430a:	d125      	bne.n	8004358 <_svfiprintf_r+0x1b0>
 800430c:	2207      	movs	r2, #7
 800430e:	9b07      	ldr	r3, [sp, #28]
 8004310:	3307      	adds	r3, #7
 8004312:	4393      	bics	r3, r2
 8004314:	3308      	adds	r3, #8
 8004316:	9307      	str	r3, [sp, #28]
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	9a04      	ldr	r2, [sp, #16]
 800431c:	189b      	adds	r3, r3, r2
 800431e:	6163      	str	r3, [r4, #20]
 8004320:	e765      	b.n	80041ee <_svfiprintf_r+0x46>
 8004322:	4343      	muls	r3, r0
 8004324:	0035      	movs	r5, r6
 8004326:	2101      	movs	r1, #1
 8004328:	189b      	adds	r3, r3, r2
 800432a:	e7a6      	b.n	800427a <_svfiprintf_r+0xd2>
 800432c:	2301      	movs	r3, #1
 800432e:	425b      	negs	r3, r3
 8004330:	e7d0      	b.n	80042d4 <_svfiprintf_r+0x12c>
 8004332:	2300      	movs	r3, #0
 8004334:	200a      	movs	r0, #10
 8004336:	001a      	movs	r2, r3
 8004338:	3501      	adds	r5, #1
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	7829      	ldrb	r1, [r5, #0]
 800433e:	1c6e      	adds	r6, r5, #1
 8004340:	3930      	subs	r1, #48	; 0x30
 8004342:	2909      	cmp	r1, #9
 8004344:	d903      	bls.n	800434e <_svfiprintf_r+0x1a6>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0c5      	beq.n	80042d6 <_svfiprintf_r+0x12e>
 800434a:	9209      	str	r2, [sp, #36]	; 0x24
 800434c:	e7c3      	b.n	80042d6 <_svfiprintf_r+0x12e>
 800434e:	4342      	muls	r2, r0
 8004350:	0035      	movs	r5, r6
 8004352:	2301      	movs	r3, #1
 8004354:	1852      	adds	r2, r2, r1
 8004356:	e7f1      	b.n	800433c <_svfiprintf_r+0x194>
 8004358:	ab07      	add	r3, sp, #28
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	003a      	movs	r2, r7
 800435e:	0021      	movs	r1, r4
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <_svfiprintf_r+0x1fc>)
 8004362:	9803      	ldr	r0, [sp, #12]
 8004364:	e000      	b.n	8004368 <_svfiprintf_r+0x1c0>
 8004366:	bf00      	nop
 8004368:	9004      	str	r0, [sp, #16]
 800436a:	9b04      	ldr	r3, [sp, #16]
 800436c:	3301      	adds	r3, #1
 800436e:	d1d3      	bne.n	8004318 <_svfiprintf_r+0x170>
 8004370:	89bb      	ldrh	r3, [r7, #12]
 8004372:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004374:	065b      	lsls	r3, r3, #25
 8004376:	d400      	bmi.n	800437a <_svfiprintf_r+0x1d2>
 8004378:	e72d      	b.n	80041d6 <_svfiprintf_r+0x2e>
 800437a:	2001      	movs	r0, #1
 800437c:	4240      	negs	r0, r0
 800437e:	e72a      	b.n	80041d6 <_svfiprintf_r+0x2e>
 8004380:	ab07      	add	r3, sp, #28
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	003a      	movs	r2, r7
 8004386:	0021      	movs	r1, r4
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <_svfiprintf_r+0x1fc>)
 800438a:	9803      	ldr	r0, [sp, #12]
 800438c:	f000 f87c 	bl	8004488 <_printf_i>
 8004390:	e7ea      	b.n	8004368 <_svfiprintf_r+0x1c0>
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	08005dc1 	.word	0x08005dc1
 8004398:	08005dc7 	.word	0x08005dc7
 800439c:	08005dcb 	.word	0x08005dcb
 80043a0:	00000000 	.word	0x00000000
 80043a4:	080040e5 	.word	0x080040e5

080043a8 <_printf_common>:
 80043a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043aa:	0015      	movs	r5, r2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	688a      	ldr	r2, [r1, #8]
 80043b0:	690b      	ldr	r3, [r1, #16]
 80043b2:	000c      	movs	r4, r1
 80043b4:	9000      	str	r0, [sp, #0]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	da00      	bge.n	80043bc <_printf_common+0x14>
 80043ba:	0013      	movs	r3, r2
 80043bc:	0022      	movs	r2, r4
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	3243      	adds	r2, #67	; 0x43
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	d001      	beq.n	80043cc <_printf_common+0x24>
 80043c8:	3301      	adds	r3, #1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	069b      	lsls	r3, r3, #26
 80043d0:	d502      	bpl.n	80043d8 <_printf_common+0x30>
 80043d2:	682b      	ldr	r3, [r5, #0]
 80043d4:	3302      	adds	r3, #2
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	2306      	movs	r3, #6
 80043dc:	0017      	movs	r7, r2
 80043de:	401f      	ands	r7, r3
 80043e0:	421a      	tst	r2, r3
 80043e2:	d027      	beq.n	8004434 <_printf_common+0x8c>
 80043e4:	0023      	movs	r3, r4
 80043e6:	3343      	adds	r3, #67	; 0x43
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	1e5a      	subs	r2, r3, #1
 80043ec:	4193      	sbcs	r3, r2
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d430      	bmi.n	8004456 <_printf_common+0xae>
 80043f4:	0022      	movs	r2, r4
 80043f6:	9901      	ldr	r1, [sp, #4]
 80043f8:	9800      	ldr	r0, [sp, #0]
 80043fa:	9e08      	ldr	r6, [sp, #32]
 80043fc:	3243      	adds	r2, #67	; 0x43
 80043fe:	47b0      	blx	r6
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d025      	beq.n	8004450 <_printf_common+0xa8>
 8004404:	2306      	movs	r3, #6
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	682a      	ldr	r2, [r5, #0]
 800440a:	68e1      	ldr	r1, [r4, #12]
 800440c:	2500      	movs	r5, #0
 800440e:	4003      	ands	r3, r0
 8004410:	2b04      	cmp	r3, #4
 8004412:	d103      	bne.n	800441c <_printf_common+0x74>
 8004414:	1a8d      	subs	r5, r1, r2
 8004416:	43eb      	mvns	r3, r5
 8004418:	17db      	asrs	r3, r3, #31
 800441a:	401d      	ands	r5, r3
 800441c:	68a3      	ldr	r3, [r4, #8]
 800441e:	6922      	ldr	r2, [r4, #16]
 8004420:	4293      	cmp	r3, r2
 8004422:	dd01      	ble.n	8004428 <_printf_common+0x80>
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	18ed      	adds	r5, r5, r3
 8004428:	2700      	movs	r7, #0
 800442a:	42bd      	cmp	r5, r7
 800442c:	d120      	bne.n	8004470 <_printf_common+0xc8>
 800442e:	2000      	movs	r0, #0
 8004430:	e010      	b.n	8004454 <_printf_common+0xac>
 8004432:	3701      	adds	r7, #1
 8004434:	68e3      	ldr	r3, [r4, #12]
 8004436:	682a      	ldr	r2, [r5, #0]
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	42bb      	cmp	r3, r7
 800443c:	ddd2      	ble.n	80043e4 <_printf_common+0x3c>
 800443e:	0022      	movs	r2, r4
 8004440:	2301      	movs	r3, #1
 8004442:	9901      	ldr	r1, [sp, #4]
 8004444:	9800      	ldr	r0, [sp, #0]
 8004446:	9e08      	ldr	r6, [sp, #32]
 8004448:	3219      	adds	r2, #25
 800444a:	47b0      	blx	r6
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d1f0      	bne.n	8004432 <_printf_common+0x8a>
 8004450:	2001      	movs	r0, #1
 8004452:	4240      	negs	r0, r0
 8004454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004456:	2030      	movs	r0, #48	; 0x30
 8004458:	18e1      	adds	r1, r4, r3
 800445a:	3143      	adds	r1, #67	; 0x43
 800445c:	7008      	strb	r0, [r1, #0]
 800445e:	0021      	movs	r1, r4
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	3145      	adds	r1, #69	; 0x45
 8004464:	7809      	ldrb	r1, [r1, #0]
 8004466:	18a2      	adds	r2, r4, r2
 8004468:	3243      	adds	r2, #67	; 0x43
 800446a:	3302      	adds	r3, #2
 800446c:	7011      	strb	r1, [r2, #0]
 800446e:	e7c1      	b.n	80043f4 <_printf_common+0x4c>
 8004470:	0022      	movs	r2, r4
 8004472:	2301      	movs	r3, #1
 8004474:	9901      	ldr	r1, [sp, #4]
 8004476:	9800      	ldr	r0, [sp, #0]
 8004478:	9e08      	ldr	r6, [sp, #32]
 800447a:	321a      	adds	r2, #26
 800447c:	47b0      	blx	r6
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d0e6      	beq.n	8004450 <_printf_common+0xa8>
 8004482:	3701      	adds	r7, #1
 8004484:	e7d1      	b.n	800442a <_printf_common+0x82>
	...

08004488 <_printf_i>:
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	b08b      	sub	sp, #44	; 0x2c
 800448c:	9206      	str	r2, [sp, #24]
 800448e:	000a      	movs	r2, r1
 8004490:	3243      	adds	r2, #67	; 0x43
 8004492:	9307      	str	r3, [sp, #28]
 8004494:	9005      	str	r0, [sp, #20]
 8004496:	9204      	str	r2, [sp, #16]
 8004498:	7e0a      	ldrb	r2, [r1, #24]
 800449a:	000c      	movs	r4, r1
 800449c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800449e:	2a78      	cmp	r2, #120	; 0x78
 80044a0:	d807      	bhi.n	80044b2 <_printf_i+0x2a>
 80044a2:	2a62      	cmp	r2, #98	; 0x62
 80044a4:	d809      	bhi.n	80044ba <_printf_i+0x32>
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	d100      	bne.n	80044ac <_printf_i+0x24>
 80044aa:	e0c1      	b.n	8004630 <_printf_i+0x1a8>
 80044ac:	2a58      	cmp	r2, #88	; 0x58
 80044ae:	d100      	bne.n	80044b2 <_printf_i+0x2a>
 80044b0:	e08c      	b.n	80045cc <_printf_i+0x144>
 80044b2:	0026      	movs	r6, r4
 80044b4:	3642      	adds	r6, #66	; 0x42
 80044b6:	7032      	strb	r2, [r6, #0]
 80044b8:	e022      	b.n	8004500 <_printf_i+0x78>
 80044ba:	0010      	movs	r0, r2
 80044bc:	3863      	subs	r0, #99	; 0x63
 80044be:	2815      	cmp	r0, #21
 80044c0:	d8f7      	bhi.n	80044b2 <_printf_i+0x2a>
 80044c2:	f7fb fe21 	bl	8000108 <__gnu_thumb1_case_shi>
 80044c6:	0016      	.short	0x0016
 80044c8:	fff6001f 	.word	0xfff6001f
 80044cc:	fff6fff6 	.word	0xfff6fff6
 80044d0:	001ffff6 	.word	0x001ffff6
 80044d4:	fff6fff6 	.word	0xfff6fff6
 80044d8:	fff6fff6 	.word	0xfff6fff6
 80044dc:	003600a8 	.word	0x003600a8
 80044e0:	fff6009a 	.word	0xfff6009a
 80044e4:	00b9fff6 	.word	0x00b9fff6
 80044e8:	0036fff6 	.word	0x0036fff6
 80044ec:	fff6fff6 	.word	0xfff6fff6
 80044f0:	009e      	.short	0x009e
 80044f2:	0026      	movs	r6, r4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	3642      	adds	r6, #66	; 0x42
 80044f8:	1d11      	adds	r1, r2, #4
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	7033      	strb	r3, [r6, #0]
 8004500:	2301      	movs	r3, #1
 8004502:	e0a7      	b.n	8004654 <_printf_i+0x1cc>
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	1d0a      	adds	r2, r1, #4
 800450a:	0605      	lsls	r5, r0, #24
 800450c:	d50b      	bpl.n	8004526 <_printf_i+0x9e>
 800450e:	680d      	ldr	r5, [r1, #0]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	2d00      	cmp	r5, #0
 8004514:	da03      	bge.n	800451e <_printf_i+0x96>
 8004516:	232d      	movs	r3, #45	; 0x2d
 8004518:	9a04      	ldr	r2, [sp, #16]
 800451a:	426d      	negs	r5, r5
 800451c:	7013      	strb	r3, [r2, #0]
 800451e:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <_printf_i+0x21c>)
 8004520:	270a      	movs	r7, #10
 8004522:	9303      	str	r3, [sp, #12]
 8004524:	e01b      	b.n	800455e <_printf_i+0xd6>
 8004526:	680d      	ldr	r5, [r1, #0]
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	0641      	lsls	r1, r0, #25
 800452c:	d5f1      	bpl.n	8004512 <_printf_i+0x8a>
 800452e:	b22d      	sxth	r5, r5
 8004530:	e7ef      	b.n	8004512 <_printf_i+0x8a>
 8004532:	680d      	ldr	r5, [r1, #0]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	1d08      	adds	r0, r1, #4
 8004538:	6018      	str	r0, [r3, #0]
 800453a:	062e      	lsls	r6, r5, #24
 800453c:	d501      	bpl.n	8004542 <_printf_i+0xba>
 800453e:	680d      	ldr	r5, [r1, #0]
 8004540:	e003      	b.n	800454a <_printf_i+0xc2>
 8004542:	066d      	lsls	r5, r5, #25
 8004544:	d5fb      	bpl.n	800453e <_printf_i+0xb6>
 8004546:	680d      	ldr	r5, [r1, #0]
 8004548:	b2ad      	uxth	r5, r5
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <_printf_i+0x21c>)
 800454c:	2708      	movs	r7, #8
 800454e:	9303      	str	r3, [sp, #12]
 8004550:	2a6f      	cmp	r2, #111	; 0x6f
 8004552:	d000      	beq.n	8004556 <_printf_i+0xce>
 8004554:	3702      	adds	r7, #2
 8004556:	0023      	movs	r3, r4
 8004558:	2200      	movs	r2, #0
 800455a:	3343      	adds	r3, #67	; 0x43
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	6863      	ldr	r3, [r4, #4]
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db03      	blt.n	800456e <_printf_i+0xe6>
 8004566:	2204      	movs	r2, #4
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	4391      	bics	r1, r2
 800456c:	6021      	str	r1, [r4, #0]
 800456e:	2d00      	cmp	r5, #0
 8004570:	d102      	bne.n	8004578 <_printf_i+0xf0>
 8004572:	9e04      	ldr	r6, [sp, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <_printf_i+0x10a>
 8004578:	9e04      	ldr	r6, [sp, #16]
 800457a:	0028      	movs	r0, r5
 800457c:	0039      	movs	r1, r7
 800457e:	f7fb fe53 	bl	8000228 <__aeabi_uidivmod>
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	3e01      	subs	r6, #1
 8004586:	5c5b      	ldrb	r3, [r3, r1]
 8004588:	7033      	strb	r3, [r6, #0]
 800458a:	002b      	movs	r3, r5
 800458c:	0005      	movs	r5, r0
 800458e:	429f      	cmp	r7, r3
 8004590:	d9f3      	bls.n	800457a <_printf_i+0xf2>
 8004592:	2f08      	cmp	r7, #8
 8004594:	d109      	bne.n	80045aa <_printf_i+0x122>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	07db      	lsls	r3, r3, #31
 800459a:	d506      	bpl.n	80045aa <_printf_i+0x122>
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	6922      	ldr	r2, [r4, #16]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	dc02      	bgt.n	80045aa <_printf_i+0x122>
 80045a4:	2330      	movs	r3, #48	; 0x30
 80045a6:	3e01      	subs	r6, #1
 80045a8:	7033      	strb	r3, [r6, #0]
 80045aa:	9b04      	ldr	r3, [sp, #16]
 80045ac:	1b9b      	subs	r3, r3, r6
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	9b07      	ldr	r3, [sp, #28]
 80045b2:	0021      	movs	r1, r4
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	9805      	ldr	r0, [sp, #20]
 80045b8:	9b06      	ldr	r3, [sp, #24]
 80045ba:	aa09      	add	r2, sp, #36	; 0x24
 80045bc:	f7ff fef4 	bl	80043a8 <_printf_common>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d14c      	bne.n	800465e <_printf_i+0x1d6>
 80045c4:	2001      	movs	r0, #1
 80045c6:	4240      	negs	r0, r0
 80045c8:	b00b      	add	sp, #44	; 0x2c
 80045ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045cc:	3145      	adds	r1, #69	; 0x45
 80045ce:	700a      	strb	r2, [r1, #0]
 80045d0:	4a34      	ldr	r2, [pc, #208]	; (80046a4 <_printf_i+0x21c>)
 80045d2:	9203      	str	r2, [sp, #12]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	6821      	ldr	r1, [r4, #0]
 80045d8:	ca20      	ldmia	r2!, {r5}
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	0608      	lsls	r0, r1, #24
 80045de:	d516      	bpl.n	800460e <_printf_i+0x186>
 80045e0:	07cb      	lsls	r3, r1, #31
 80045e2:	d502      	bpl.n	80045ea <_printf_i+0x162>
 80045e4:	2320      	movs	r3, #32
 80045e6:	4319      	orrs	r1, r3
 80045e8:	6021      	str	r1, [r4, #0]
 80045ea:	2710      	movs	r7, #16
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	d1b2      	bne.n	8004556 <_printf_i+0xce>
 80045f0:	2320      	movs	r3, #32
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	439a      	bics	r2, r3
 80045f6:	6022      	str	r2, [r4, #0]
 80045f8:	e7ad      	b.n	8004556 <_printf_i+0xce>
 80045fa:	2220      	movs	r2, #32
 80045fc:	6809      	ldr	r1, [r1, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	6022      	str	r2, [r4, #0]
 8004602:	0022      	movs	r2, r4
 8004604:	2178      	movs	r1, #120	; 0x78
 8004606:	3245      	adds	r2, #69	; 0x45
 8004608:	7011      	strb	r1, [r2, #0]
 800460a:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <_printf_i+0x220>)
 800460c:	e7e1      	b.n	80045d2 <_printf_i+0x14a>
 800460e:	0648      	lsls	r0, r1, #25
 8004610:	d5e6      	bpl.n	80045e0 <_printf_i+0x158>
 8004612:	b2ad      	uxth	r5, r5
 8004614:	e7e4      	b.n	80045e0 <_printf_i+0x158>
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	680d      	ldr	r5, [r1, #0]
 800461a:	1d10      	adds	r0, r2, #4
 800461c:	6949      	ldr	r1, [r1, #20]
 800461e:	6018      	str	r0, [r3, #0]
 8004620:	6813      	ldr	r3, [r2, #0]
 8004622:	062e      	lsls	r6, r5, #24
 8004624:	d501      	bpl.n	800462a <_printf_i+0x1a2>
 8004626:	6019      	str	r1, [r3, #0]
 8004628:	e002      	b.n	8004630 <_printf_i+0x1a8>
 800462a:	066d      	lsls	r5, r5, #25
 800462c:	d5fb      	bpl.n	8004626 <_printf_i+0x19e>
 800462e:	8019      	strh	r1, [r3, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	9e04      	ldr	r6, [sp, #16]
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	e7bb      	b.n	80045b0 <_printf_i+0x128>
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	1d11      	adds	r1, r2, #4
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	6816      	ldr	r6, [r2, #0]
 8004640:	2100      	movs	r1, #0
 8004642:	0030      	movs	r0, r6
 8004644:	6862      	ldr	r2, [r4, #4]
 8004646:	f000 f831 	bl	80046ac <memchr>
 800464a:	2800      	cmp	r0, #0
 800464c:	d001      	beq.n	8004652 <_printf_i+0x1ca>
 800464e:	1b80      	subs	r0, r0, r6
 8004650:	6060      	str	r0, [r4, #4]
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	2300      	movs	r3, #0
 8004658:	9a04      	ldr	r2, [sp, #16]
 800465a:	7013      	strb	r3, [r2, #0]
 800465c:	e7a8      	b.n	80045b0 <_printf_i+0x128>
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	0032      	movs	r2, r6
 8004662:	9906      	ldr	r1, [sp, #24]
 8004664:	9805      	ldr	r0, [sp, #20]
 8004666:	9d07      	ldr	r5, [sp, #28]
 8004668:	47a8      	blx	r5
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d0aa      	beq.n	80045c4 <_printf_i+0x13c>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	079b      	lsls	r3, r3, #30
 8004672:	d415      	bmi.n	80046a0 <_printf_i+0x218>
 8004674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004676:	68e0      	ldr	r0, [r4, #12]
 8004678:	4298      	cmp	r0, r3
 800467a:	daa5      	bge.n	80045c8 <_printf_i+0x140>
 800467c:	0018      	movs	r0, r3
 800467e:	e7a3      	b.n	80045c8 <_printf_i+0x140>
 8004680:	0022      	movs	r2, r4
 8004682:	2301      	movs	r3, #1
 8004684:	9906      	ldr	r1, [sp, #24]
 8004686:	9805      	ldr	r0, [sp, #20]
 8004688:	9e07      	ldr	r6, [sp, #28]
 800468a:	3219      	adds	r2, #25
 800468c:	47b0      	blx	r6
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	d098      	beq.n	80045c4 <_printf_i+0x13c>
 8004692:	3501      	adds	r5, #1
 8004694:	68e3      	ldr	r3, [r4, #12]
 8004696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	42ab      	cmp	r3, r5
 800469c:	dcf0      	bgt.n	8004680 <_printf_i+0x1f8>
 800469e:	e7e9      	b.n	8004674 <_printf_i+0x1ec>
 80046a0:	2500      	movs	r5, #0
 80046a2:	e7f7      	b.n	8004694 <_printf_i+0x20c>
 80046a4:	08005dd2 	.word	0x08005dd2
 80046a8:	08005de3 	.word	0x08005de3

080046ac <memchr>:
 80046ac:	b2c9      	uxtb	r1, r1
 80046ae:	1882      	adds	r2, r0, r2
 80046b0:	4290      	cmp	r0, r2
 80046b2:	d101      	bne.n	80046b8 <memchr+0xc>
 80046b4:	2000      	movs	r0, #0
 80046b6:	4770      	bx	lr
 80046b8:	7803      	ldrb	r3, [r0, #0]
 80046ba:	428b      	cmp	r3, r1
 80046bc:	d0fb      	beq.n	80046b6 <memchr+0xa>
 80046be:	3001      	adds	r0, #1
 80046c0:	e7f6      	b.n	80046b0 <memchr+0x4>

080046c2 <memcpy>:
 80046c2:	2300      	movs	r3, #0
 80046c4:	b510      	push	{r4, lr}
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d100      	bne.n	80046cc <memcpy+0xa>
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	5ccc      	ldrb	r4, [r1, r3]
 80046ce:	54c4      	strb	r4, [r0, r3]
 80046d0:	3301      	adds	r3, #1
 80046d2:	e7f8      	b.n	80046c6 <memcpy+0x4>

080046d4 <memmove>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4288      	cmp	r0, r1
 80046d8:	d902      	bls.n	80046e0 <memmove+0xc>
 80046da:	188b      	adds	r3, r1, r2
 80046dc:	4298      	cmp	r0, r3
 80046de:	d303      	bcc.n	80046e8 <memmove+0x14>
 80046e0:	2300      	movs	r3, #0
 80046e2:	e007      	b.n	80046f4 <memmove+0x20>
 80046e4:	5c8b      	ldrb	r3, [r1, r2]
 80046e6:	5483      	strb	r3, [r0, r2]
 80046e8:	3a01      	subs	r2, #1
 80046ea:	d2fb      	bcs.n	80046e4 <memmove+0x10>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	5ccc      	ldrb	r4, [r1, r3]
 80046f0:	54c4      	strb	r4, [r0, r3]
 80046f2:	3301      	adds	r3, #1
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1fa      	bne.n	80046ee <memmove+0x1a>
 80046f8:	e7f8      	b.n	80046ec <memmove+0x18>
	...

080046fc <_free_r>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	0005      	movs	r5, r0
 8004700:	2900      	cmp	r1, #0
 8004702:	d010      	beq.n	8004726 <_free_r+0x2a>
 8004704:	1f0c      	subs	r4, r1, #4
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	da00      	bge.n	800470e <_free_r+0x12>
 800470c:	18e4      	adds	r4, r4, r3
 800470e:	0028      	movs	r0, r5
 8004710:	f000 f918 	bl	8004944 <__malloc_lock>
 8004714:	4a1d      	ldr	r2, [pc, #116]	; (800478c <_free_r+0x90>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <_free_r+0x2c>
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6014      	str	r4, [r2, #0]
 8004720:	0028      	movs	r0, r5
 8004722:	f000 f917 	bl	8004954 <__malloc_unlock>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	42a3      	cmp	r3, r4
 800472a:	d908      	bls.n	800473e <_free_r+0x42>
 800472c:	6821      	ldr	r1, [r4, #0]
 800472e:	1860      	adds	r0, r4, r1
 8004730:	4283      	cmp	r3, r0
 8004732:	d1f3      	bne.n	800471c <_free_r+0x20>
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	1841      	adds	r1, r0, r1
 800473a:	6021      	str	r1, [r4, #0]
 800473c:	e7ee      	b.n	800471c <_free_r+0x20>
 800473e:	001a      	movs	r2, r3
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <_free_r+0x4e>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d9f9      	bls.n	800473e <_free_r+0x42>
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	1850      	adds	r0, r2, r1
 800474e:	42a0      	cmp	r0, r4
 8004750:	d10b      	bne.n	800476a <_free_r+0x6e>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1809      	adds	r1, r1, r0
 8004756:	1850      	adds	r0, r2, r1
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	4283      	cmp	r3, r0
 800475c:	d1e0      	bne.n	8004720 <_free_r+0x24>
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	1841      	adds	r1, r0, r1
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e7da      	b.n	8004720 <_free_r+0x24>
 800476a:	42a0      	cmp	r0, r4
 800476c:	d902      	bls.n	8004774 <_free_r+0x78>
 800476e:	230c      	movs	r3, #12
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	e7d5      	b.n	8004720 <_free_r+0x24>
 8004774:	6821      	ldr	r1, [r4, #0]
 8004776:	1860      	adds	r0, r4, r1
 8004778:	4283      	cmp	r3, r0
 800477a:	d103      	bne.n	8004784 <_free_r+0x88>
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	1841      	adds	r1, r0, r1
 8004782:	6021      	str	r1, [r4, #0]
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	6054      	str	r4, [r2, #4]
 8004788:	e7ca      	b.n	8004720 <_free_r+0x24>
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000164 	.word	0x20000164

08004790 <sbrk_aligned>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0f      	ldr	r6, [pc, #60]	; (80047d0 <sbrk_aligned+0x40>)
 8004794:	000d      	movs	r5, r1
 8004796:	6831      	ldr	r1, [r6, #0]
 8004798:	0004      	movs	r4, r0
 800479a:	2900      	cmp	r1, #0
 800479c:	d102      	bne.n	80047a4 <sbrk_aligned+0x14>
 800479e:	f000 f8bf 	bl	8004920 <_sbrk_r>
 80047a2:	6030      	str	r0, [r6, #0]
 80047a4:	0029      	movs	r1, r5
 80047a6:	0020      	movs	r0, r4
 80047a8:	f000 f8ba 	bl	8004920 <_sbrk_r>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d00a      	beq.n	80047c6 <sbrk_aligned+0x36>
 80047b0:	2303      	movs	r3, #3
 80047b2:	1cc5      	adds	r5, r0, #3
 80047b4:	439d      	bics	r5, r3
 80047b6:	42a8      	cmp	r0, r5
 80047b8:	d007      	beq.n	80047ca <sbrk_aligned+0x3a>
 80047ba:	1a29      	subs	r1, r5, r0
 80047bc:	0020      	movs	r0, r4
 80047be:	f000 f8af 	bl	8004920 <_sbrk_r>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d101      	bne.n	80047ca <sbrk_aligned+0x3a>
 80047c6:	2501      	movs	r5, #1
 80047c8:	426d      	negs	r5, r5
 80047ca:	0028      	movs	r0, r5
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000168 	.word	0x20000168

080047d4 <_malloc_r>:
 80047d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d6:	2203      	movs	r2, #3
 80047d8:	1ccb      	adds	r3, r1, #3
 80047da:	4393      	bics	r3, r2
 80047dc:	3308      	adds	r3, #8
 80047de:	0006      	movs	r6, r0
 80047e0:	001f      	movs	r7, r3
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d232      	bcs.n	800484c <_malloc_r+0x78>
 80047e6:	270c      	movs	r7, #12
 80047e8:	42b9      	cmp	r1, r7
 80047ea:	d831      	bhi.n	8004850 <_malloc_r+0x7c>
 80047ec:	0030      	movs	r0, r6
 80047ee:	f000 f8a9 	bl	8004944 <__malloc_lock>
 80047f2:	4d32      	ldr	r5, [pc, #200]	; (80048bc <_malloc_r+0xe8>)
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	001c      	movs	r4, r3
 80047f8:	2c00      	cmp	r4, #0
 80047fa:	d12e      	bne.n	800485a <_malloc_r+0x86>
 80047fc:	0039      	movs	r1, r7
 80047fe:	0030      	movs	r0, r6
 8004800:	f7ff ffc6 	bl	8004790 <sbrk_aligned>
 8004804:	0004      	movs	r4, r0
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d11e      	bne.n	8004848 <_malloc_r+0x74>
 800480a:	682c      	ldr	r4, [r5, #0]
 800480c:	0025      	movs	r5, r4
 800480e:	2d00      	cmp	r5, #0
 8004810:	d14a      	bne.n	80048a8 <_malloc_r+0xd4>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	0029      	movs	r1, r5
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	0030      	movs	r0, r6
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f000 f880 	bl	8004920 <_sbrk_r>
 8004820:	9b01      	ldr	r3, [sp, #4]
 8004822:	4283      	cmp	r3, r0
 8004824:	d143      	bne.n	80048ae <_malloc_r+0xda>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	3703      	adds	r7, #3
 800482a:	1aff      	subs	r7, r7, r3
 800482c:	2303      	movs	r3, #3
 800482e:	439f      	bics	r7, r3
 8004830:	3708      	adds	r7, #8
 8004832:	2f0c      	cmp	r7, #12
 8004834:	d200      	bcs.n	8004838 <_malloc_r+0x64>
 8004836:	270c      	movs	r7, #12
 8004838:	0039      	movs	r1, r7
 800483a:	0030      	movs	r0, r6
 800483c:	f7ff ffa8 	bl	8004790 <sbrk_aligned>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d034      	beq.n	80048ae <_malloc_r+0xda>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	19df      	adds	r7, r3, r7
 8004848:	6027      	str	r7, [r4, #0]
 800484a:	e013      	b.n	8004874 <_malloc_r+0xa0>
 800484c:	2b00      	cmp	r3, #0
 800484e:	dacb      	bge.n	80047e8 <_malloc_r+0x14>
 8004850:	230c      	movs	r3, #12
 8004852:	2500      	movs	r5, #0
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	0028      	movs	r0, r5
 8004858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	1bd1      	subs	r1, r2, r7
 800485e:	d420      	bmi.n	80048a2 <_malloc_r+0xce>
 8004860:	290b      	cmp	r1, #11
 8004862:	d917      	bls.n	8004894 <_malloc_r+0xc0>
 8004864:	19e2      	adds	r2, r4, r7
 8004866:	6027      	str	r7, [r4, #0]
 8004868:	42a3      	cmp	r3, r4
 800486a:	d111      	bne.n	8004890 <_malloc_r+0xbc>
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	6863      	ldr	r3, [r4, #4]
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	6053      	str	r3, [r2, #4]
 8004874:	0030      	movs	r0, r6
 8004876:	0025      	movs	r5, r4
 8004878:	f000 f86c 	bl	8004954 <__malloc_unlock>
 800487c:	2207      	movs	r2, #7
 800487e:	350b      	adds	r5, #11
 8004880:	1d23      	adds	r3, r4, #4
 8004882:	4395      	bics	r5, r2
 8004884:	1aea      	subs	r2, r5, r3
 8004886:	429d      	cmp	r5, r3
 8004888:	d0e5      	beq.n	8004856 <_malloc_r+0x82>
 800488a:	1b5b      	subs	r3, r3, r5
 800488c:	50a3      	str	r3, [r4, r2]
 800488e:	e7e2      	b.n	8004856 <_malloc_r+0x82>
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e7ec      	b.n	800486e <_malloc_r+0x9a>
 8004894:	6862      	ldr	r2, [r4, #4]
 8004896:	42a3      	cmp	r3, r4
 8004898:	d101      	bne.n	800489e <_malloc_r+0xca>
 800489a:	602a      	str	r2, [r5, #0]
 800489c:	e7ea      	b.n	8004874 <_malloc_r+0xa0>
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e7e8      	b.n	8004874 <_malloc_r+0xa0>
 80048a2:	0023      	movs	r3, r4
 80048a4:	6864      	ldr	r4, [r4, #4]
 80048a6:	e7a7      	b.n	80047f8 <_malloc_r+0x24>
 80048a8:	002c      	movs	r4, r5
 80048aa:	686d      	ldr	r5, [r5, #4]
 80048ac:	e7af      	b.n	800480e <_malloc_r+0x3a>
 80048ae:	230c      	movs	r3, #12
 80048b0:	0030      	movs	r0, r6
 80048b2:	6033      	str	r3, [r6, #0]
 80048b4:	f000 f84e 	bl	8004954 <__malloc_unlock>
 80048b8:	e7cd      	b.n	8004856 <_malloc_r+0x82>
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000164 	.word	0x20000164

080048c0 <_realloc_r>:
 80048c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048c2:	0007      	movs	r7, r0
 80048c4:	000e      	movs	r6, r1
 80048c6:	0014      	movs	r4, r2
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d105      	bne.n	80048d8 <_realloc_r+0x18>
 80048cc:	0011      	movs	r1, r2
 80048ce:	f7ff ff81 	bl	80047d4 <_malloc_r>
 80048d2:	0005      	movs	r5, r0
 80048d4:	0028      	movs	r0, r5
 80048d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d103      	bne.n	80048e4 <_realloc_r+0x24>
 80048dc:	f7ff ff0e 	bl	80046fc <_free_r>
 80048e0:	0025      	movs	r5, r4
 80048e2:	e7f7      	b.n	80048d4 <_realloc_r+0x14>
 80048e4:	f000 f83e 	bl	8004964 <_malloc_usable_size_r>
 80048e8:	9001      	str	r0, [sp, #4]
 80048ea:	4284      	cmp	r4, r0
 80048ec:	d803      	bhi.n	80048f6 <_realloc_r+0x36>
 80048ee:	0035      	movs	r5, r6
 80048f0:	0843      	lsrs	r3, r0, #1
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d3ee      	bcc.n	80048d4 <_realloc_r+0x14>
 80048f6:	0021      	movs	r1, r4
 80048f8:	0038      	movs	r0, r7
 80048fa:	f7ff ff6b 	bl	80047d4 <_malloc_r>
 80048fe:	1e05      	subs	r5, r0, #0
 8004900:	d0e8      	beq.n	80048d4 <_realloc_r+0x14>
 8004902:	9b01      	ldr	r3, [sp, #4]
 8004904:	0022      	movs	r2, r4
 8004906:	429c      	cmp	r4, r3
 8004908:	d900      	bls.n	800490c <_realloc_r+0x4c>
 800490a:	001a      	movs	r2, r3
 800490c:	0031      	movs	r1, r6
 800490e:	0028      	movs	r0, r5
 8004910:	f7ff fed7 	bl	80046c2 <memcpy>
 8004914:	0031      	movs	r1, r6
 8004916:	0038      	movs	r0, r7
 8004918:	f7ff fef0 	bl	80046fc <_free_r>
 800491c:	e7da      	b.n	80048d4 <_realloc_r+0x14>
	...

08004920 <_sbrk_r>:
 8004920:	2300      	movs	r3, #0
 8004922:	b570      	push	{r4, r5, r6, lr}
 8004924:	4d06      	ldr	r5, [pc, #24]	; (8004940 <_sbrk_r+0x20>)
 8004926:	0004      	movs	r4, r0
 8004928:	0008      	movs	r0, r1
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	f7fd fc36 	bl	800219c <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d103      	bne.n	800493c <_sbrk_r+0x1c>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d000      	beq.n	800493c <_sbrk_r+0x1c>
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	2000016c 	.word	0x2000016c

08004944 <__malloc_lock>:
 8004944:	b510      	push	{r4, lr}
 8004946:	4802      	ldr	r0, [pc, #8]	; (8004950 <__malloc_lock+0xc>)
 8004948:	f000 f814 	bl	8004974 <__retarget_lock_acquire_recursive>
 800494c:	bd10      	pop	{r4, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	20000170 	.word	0x20000170

08004954 <__malloc_unlock>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4802      	ldr	r0, [pc, #8]	; (8004960 <__malloc_unlock+0xc>)
 8004958:	f000 f80d 	bl	8004976 <__retarget_lock_release_recursive>
 800495c:	bd10      	pop	{r4, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	20000170 	.word	0x20000170

08004964 <_malloc_usable_size_r>:
 8004964:	1f0b      	subs	r3, r1, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1f18      	subs	r0, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	da01      	bge.n	8004972 <_malloc_usable_size_r+0xe>
 800496e:	580b      	ldr	r3, [r1, r0]
 8004970:	18c0      	adds	r0, r0, r3
 8004972:	4770      	bx	lr

08004974 <__retarget_lock_acquire_recursive>:
 8004974:	4770      	bx	lr

08004976 <__retarget_lock_release_recursive>:
 8004976:	4770      	bx	lr

08004978 <_init>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr

08004984 <_fini>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr
